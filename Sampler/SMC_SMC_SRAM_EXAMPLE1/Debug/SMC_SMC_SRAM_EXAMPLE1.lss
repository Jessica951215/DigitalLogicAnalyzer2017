
SMC_SMC_SRAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004968  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404968  00404968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c4  20000000  00404970  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b4c  200009c4  00405334  000209c4  2**2
                  ALLOC
  4 .stack        00003000  20001510  00405e80  000209c4  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209c4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209f2  2**0
                  CONTENTS, READONLY
  7 .debug_info   000190ce  00000000  00000000  00020a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003353  00000000  00000000  00039b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005712  00000000  00000000  0003ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b60  00000000  00000000  0004257e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ac8  00000000  00000000  000430de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000189c5  00000000  00000000  00043ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c825  00000000  00000000  0005c56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063451  00000000  00000000  00068d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002438  00000000  00000000  000cc1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 45 00 20 7d 0b 40 00 7b 0b 40 00 7b 0b 40 00     .E. }.@.{.@.{.@.
  400010:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 00 00 00 00     {.@.{.@.{.@.....
	...
  40002c:	7b 0b 40 00 7b 0b 40 00 00 00 00 00 7b 0b 40 00     {.@.{.@.....{.@.
  40003c:	99 11 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     ..@.{.@.{.@.{.@.
  40004c:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     {.@.{.@.{.@.{.@.
  40005c:	7b 0b 40 00 7b 0b 40 00 35 09 40 00 49 09 40 00     {.@.{.@.5.@.I.@.
  40006c:	5d 09 40 00 71 09 40 00 85 09 40 00 7b 0b 40 00     ].@.q.@...@.{.@.
  40007c:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     {.@.{.@.{.@.{.@.
  40008c:	7b 0b 40 00 c9 10 40 00 7b 0b 40 00 7b 0b 40 00     {.@...@.{.@.{.@.
  40009c:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     {.@.{.@.{.@.{.@.
  4000ac:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     {.@.{.@.{.@.{.@.
  4000bc:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     {.@.{.@.{.@.{.@.
  4000cc:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     {.@.{.@.{.@.{.@.
  4000dc:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00 7b 0b 40 00     {.@.{.@.{.@.{.@.
  4000ec:	7b 0b 40 00 7b 0b 40 00 7b 0b 40 00                 {.@.{.@.{.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009c4 	.word	0x200009c4
  400114:	00000000 	.word	0x00000000
  400118:	00404970 	.word	0x00404970

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00404970 	.word	0x00404970
  400158:	200009c8 	.word	0x200009c8
  40015c:	00404970 	.word	0x00404970
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	480b      	ldr	r0, [pc, #44]	; (4001c8 <sysclk_init+0x64>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400d51 	.word	0x00400d51
  4001a8:	004009fd 	.word	0x004009fd
  4001ac:	00400a51 	.word	0x00400a51
  4001b0:	00400a61 	.word	0x00400a61
  4001b4:	200f3f01 	.word	0x200f3f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	00400a71 	.word	0x00400a71
  4001c0:	00400999 	.word	0x00400999
  4001c4:	00400c45 	.word	0x00400c45
  4001c8:	05b8d800 	.word	0x05b8d800

004001cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d0:	b980      	cbnz	r0, 4001f4 <_read+0x28>
  4001d2:	460c      	mov	r4, r1
  4001d4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001d6:	2a00      	cmp	r2, #0
  4001d8:	dd0f      	ble.n	4001fa <_read+0x2e>
  4001da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001dc:	4e08      	ldr	r6, [pc, #32]	; (400200 <_read+0x34>)
  4001de:	4d09      	ldr	r5, [pc, #36]	; (400204 <_read+0x38>)
  4001e0:	6830      	ldr	r0, [r6, #0]
  4001e2:	4621      	mov	r1, r4
  4001e4:	682b      	ldr	r3, [r5, #0]
  4001e6:	4798      	blx	r3
		ptr++;
  4001e8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001ea:	42bc      	cmp	r4, r7
  4001ec:	d1f8      	bne.n	4001e0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ee:	4640      	mov	r0, r8
  4001f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001f4:	f04f 38ff 	mov.w	r8, #4294967295
  4001f8:	e7f9      	b.n	4001ee <_read+0x22>
	for (; len > 0; --len) {
  4001fa:	4680      	mov	r8, r0
  4001fc:	e7f7      	b.n	4001ee <_read+0x22>
  4001fe:	bf00      	nop
  400200:	20000aa0 	.word	0x20000aa0
  400204:	20000a98 	.word	0x20000a98

00400208 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400208:	3801      	subs	r0, #1
  40020a:	2802      	cmp	r0, #2
  40020c:	d815      	bhi.n	40023a <_write+0x32>
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460e      	mov	r6, r1
  400214:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400216:	b19a      	cbz	r2, 400240 <_write+0x38>
  400218:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40021a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400254 <_write+0x4c>
  40021e:	4f0c      	ldr	r7, [pc, #48]	; (400250 <_write+0x48>)
  400220:	f8d8 0000 	ldr.w	r0, [r8]
  400224:	f815 1b01 	ldrb.w	r1, [r5], #1
  400228:	683b      	ldr	r3, [r7, #0]
  40022a:	4798      	blx	r3
  40022c:	2800      	cmp	r0, #0
  40022e:	db0a      	blt.n	400246 <_write+0x3e>
  400230:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400232:	3c01      	subs	r4, #1
  400234:	d1f4      	bne.n	400220 <_write+0x18>
  400236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40023a:	f04f 30ff 	mov.w	r0, #4294967295
  40023e:	4770      	bx	lr
	for (; len != 0; --len) {
  400240:	4610      	mov	r0, r2
  400242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400246:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024e:	bf00      	nop
  400250:	20000a9c 	.word	0x20000a9c
  400254:	20000aa0 	.word	0x20000aa0

00400258 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40025a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40025e:	4bc2      	ldr	r3, [pc, #776]	; (400568 <board_init+0x310>)
  400260:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400262:	2009      	movs	r0, #9
  400264:	4cc1      	ldr	r4, [pc, #772]	; (40056c <board_init+0x314>)
  400266:	47a0      	blx	r4
  400268:	200a      	movs	r0, #10
  40026a:	47a0      	blx	r4
  40026c:	200b      	movs	r0, #11
  40026e:	47a0      	blx	r4
  400270:	200c      	movs	r0, #12
  400272:	47a0      	blx	r4
  400274:	200d      	movs	r0, #13
  400276:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400278:	4bbd      	ldr	r3, [pc, #756]	; (400570 <board_init+0x318>)
  40027a:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  40027e:	611f      	str	r7, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400280:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400284:	631f      	str	r7, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400286:	4abb      	ldr	r2, [pc, #748]	; (400574 <board_init+0x31c>)
  400288:	2404      	movs	r4, #4
  40028a:	6154      	str	r4, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40028c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  400290:	6654      	str	r4, [r2, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400292:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400296:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFER = mask;
  400298:	6214      	str	r4, [r2, #32]
		base->PIO_IFSCER = mask;
  40029a:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40029e:	6f11      	ldr	r1, [r2, #112]	; 0x70
  4002a0:	f021 0104 	bic.w	r1, r1, #4
  4002a4:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002a6:	6f51      	ldr	r1, [r2, #116]	; 0x74
  4002a8:	f021 0104 	bic.w	r1, r1, #4
  4002ac:	6751      	str	r1, [r2, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4002ae:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002b2:	f8c2 40d4 	str.w	r4, [r2, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4002b6:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4002ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4002be:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4002c0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002c4:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002c6:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002c8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4002cc:	6f10      	ldr	r0, [r2, #112]	; 0x70
  4002ce:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
  4002d2:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002d4:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4002d6:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
  4002da:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002dc:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  4002de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4002e2:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4002e4:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002e8:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002ea:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002ec:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4002f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002f2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  4002f6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002fa:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  4002fe:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400300:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  400302:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400306:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400308:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40030c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40030e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400310:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400314:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  400316:	f425 2500 	bic.w	r5, r5, #524288	; 0x80000
  40031a:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40031c:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40031e:	f425 2500 	bic.w	r5, r5, #524288	; 0x80000
  400322:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400324:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400326:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  40032a:	f44f 6500 	mov.w	r5, #2048	; 0x800
  40032e:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400330:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400334:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400336:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400338:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40033c:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  40033e:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
  400342:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400344:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  400346:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
  40034a:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40034c:	605d      	str	r5, [r3, #4]
		base->PIO_PUDR = mask;
  40034e:	f44f 7580 	mov.w	r5, #256	; 0x100
  400352:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400354:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400358:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40035a:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40035c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400360:	6f1e      	ldr	r6, [r3, #112]	; 0x70
  400362:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  400366:	671e      	str	r6, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400368:	6f5e      	ldr	r6, [r3, #116]	; 0x74
  40036a:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  40036e:	675e      	str	r6, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400370:	605d      	str	r5, [r3, #4]
		base->PIO_PUDR = mask;
  400372:	2601      	movs	r6, #1
  400374:	661e      	str	r6, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400376:	f8c3 6090 	str.w	r6, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40037a:	655e      	str	r6, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40037c:	625e      	str	r6, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40037e:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400382:	6f1d      	ldr	r5, [r3, #112]	; 0x70
  400384:	f025 0501 	bic.w	r5, r5, #1
  400388:	671d      	str	r5, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40038a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
  40038c:	f025 0501 	bic.w	r5, r5, #1
  400390:	675d      	str	r5, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400392:	605e      	str	r6, [r3, #4]
		base->PIO_PUDR = mask;
  400394:	2502      	movs	r5, #2
  400396:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400398:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40039c:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40039e:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003a0:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003a4:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4003a8:	f02e 0e02 	bic.w	lr, lr, #2
  4003ac:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b0:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4003b4:	f02e 0e02 	bic.w	lr, lr, #2
  4003b8:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003bc:	605d      	str	r5, [r3, #4]
		base->PIO_PUDR = mask;
  4003be:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003c0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003c4:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003c6:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003c8:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003cc:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4003d0:	f02e 0e04 	bic.w	lr, lr, #4
  4003d4:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003d8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4003dc:	f02e 0e04 	bic.w	lr, lr, #4
  4003e0:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003e4:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  4003e6:	2408      	movs	r4, #8
  4003e8:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003ea:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ee:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003f0:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003f2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003f6:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4003fa:	f02e 0e08 	bic.w	lr, lr, #8
  4003fe:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400402:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400406:	f02e 0e08 	bic.w	lr, lr, #8
  40040a:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40040e:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  400410:	2410      	movs	r4, #16
  400412:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400414:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400418:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40041a:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40041c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400420:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  400424:	f02e 0e10 	bic.w	lr, lr, #16
  400428:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40042c:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400430:	f02e 0e10 	bic.w	lr, lr, #16
  400434:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400438:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  40043a:	2420      	movs	r4, #32
  40043c:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40043e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400442:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400444:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400446:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40044a:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  40044e:	f02e 0e20 	bic.w	lr, lr, #32
  400452:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400456:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  40045a:	f02e 0e20 	bic.w	lr, lr, #32
  40045e:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400462:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  400464:	2440      	movs	r4, #64	; 0x40
  400466:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400468:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40046c:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40046e:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400470:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400474:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  400478:	f02e 0e40 	bic.w	lr, lr, #64	; 0x40
  40047c:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400480:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400484:	f02e 0e40 	bic.w	lr, lr, #64	; 0x40
  400488:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40048c:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  40048e:	2480      	movs	r4, #128	; 0x80
  400490:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400492:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400496:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400498:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40049a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40049e:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4004a2:	f02e 0e80 	bic.w	lr, lr, #128	; 0x80
  4004a6:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004aa:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4004ae:	f02e 0e80 	bic.w	lr, lr, #128	; 0x80
  4004b2:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004b6:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  4004b8:	6618      	str	r0, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004ba:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004be:	6558      	str	r0, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004c0:	6258      	str	r0, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004c2:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004c6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4004c8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
  4004cc:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004ce:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4004d0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
  4004d4:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004d6:	6058      	str	r0, [r3, #4]
		base->PIO_PUDR = mask;
  4004d8:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004da:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004de:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e0:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004e6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  4004e8:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
  4004ec:	671c      	str	r4, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004ee:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  4004f0:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
  4004f4:	675c      	str	r4, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4004f8:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  4004fc:	661c      	str	r4, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004fe:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400502:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400504:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400506:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40050a:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  40050e:	f42e 1e80 	bic.w	lr, lr, #1048576	; 0x100000
  400512:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400516:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  40051a:	f42e 1e80 	bic.w	lr, lr, #1048576	; 0x100000
  40051e:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400522:	605c      	str	r4, [r3, #4]
		base->PIO_PUDR = mask;
  400524:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
  400528:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40052c:	f8c3 e090 	str.w	lr, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400530:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400534:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400538:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40053c:	f8d3 c070 	ldr.w	ip, [r3, #112]	; 0x70
  400540:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  400544:	f8c3 c070 	str.w	ip, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400548:	f8d3 c074 	ldr.w	ip, [r3, #116]	; 0x74
  40054c:	f42c 1c00 	bic.w	ip, ip, #2097152	; 0x200000
  400550:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400554:	f8c3 e004 	str.w	lr, [r3, #4]
		base->PIO_PUDR = mask;
  400558:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40055a:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40055e:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400560:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400562:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
  400566:	e007      	b.n	400578 <board_init+0x320>
  400568:	400e1850 	.word	0x400e1850
  40056c:	00400a81 	.word	0x00400a81
  400570:	400e1400 	.word	0x400e1400
  400574:	400e0e00 	.word	0x400e0e00
		base->PIO_ABCDSR[0] &= ~mask;
  400578:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  40057c:	f42e 0e80 	bic.w	lr, lr, #4194304	; 0x400000
  400580:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400584:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400588:	f42e 0e80 	bic.w	lr, lr, #4194304	; 0x400000
  40058c:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400590:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  400592:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  400596:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400598:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40059c:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40059e:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4005a0:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4005a4:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4005a8:	f42e 0e00 	bic.w	lr, lr, #8388608	; 0x800000
  4005ac:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4005b0:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4005b4:	f42e 0e00 	bic.w	lr, lr, #8388608	; 0x800000
  4005b8:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4005bc:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  4005be:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
  4005c2:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4005c4:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4005c8:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4005ca:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4005cc:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4005d0:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4005d4:	f02e 7e80 	bic.w	lr, lr, #16777216	; 0x1000000
  4005d8:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4005dc:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4005e0:	f02e 7e80 	bic.w	lr, lr, #16777216	; 0x1000000
  4005e4:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4005e8:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  4005ea:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
  4005ee:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4005f0:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4005f4:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4005f6:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4005f8:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4005fc:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  400600:	f02e 7e00 	bic.w	lr, lr, #33554432	; 0x2000000
  400604:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400608:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  40060c:	f02e 7e00 	bic.w	lr, lr, #33554432	; 0x2000000
  400610:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400614:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  400616:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  40061a:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40061c:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400620:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400622:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400624:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400628:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  40062c:	f02e 6e80 	bic.w	lr, lr, #67108864	; 0x4000000
  400630:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400634:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400638:	f02e 6e80 	bic.w	lr, lr, #67108864	; 0x4000000
  40063c:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400640:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  400642:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
  400646:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400648:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40064c:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40064e:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400650:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400654:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  400658:	f02e 6e00 	bic.w	lr, lr, #134217728	; 0x8000000
  40065c:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400660:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400664:	f02e 6e00 	bic.w	lr, lr, #134217728	; 0x8000000
  400668:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40066c:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  40066e:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  400672:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400674:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400678:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40067a:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40067c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400680:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  400684:	f02e 5e80 	bic.w	lr, lr, #268435456	; 0x10000000
  400688:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40068c:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400690:	f02e 5e80 	bic.w	lr, lr, #268435456	; 0x10000000
  400694:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400698:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  40069a:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
  40069e:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006a0:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006a4:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006a6:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006a8:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006ac:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4006b0:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  4006b4:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006b8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4006bc:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  4006c0:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006c4:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  4006c6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  4006ca:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006cc:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006d0:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006d2:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006d4:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006d8:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  4006dc:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
  4006e0:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006e4:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  4006e8:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
  4006ec:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4006f0:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  4006f2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  4006f6:	661f      	str	r7, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4006f8:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006fc:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006fe:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400700:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400704:	f8d3 e070 	ldr.w	lr, [r3, #112]	; 0x70
  400708:	f02e 4e00 	bic.w	lr, lr, #2147483648	; 0x80000000
  40070c:	f8c3 e070 	str.w	lr, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400710:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
  400714:	f02e 4e00 	bic.w	lr, lr, #2147483648	; 0x80000000
  400718:	f8c3 e074 	str.w	lr, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40071c:	605f      	str	r7, [r3, #4]
		base->PIO_PUDR = mask;
  40071e:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400720:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400724:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400726:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400728:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40072c:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40072e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  400732:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400734:	6f53      	ldr	r3, [r2, #116]	; 0x74
  400736:	4303      	orrs	r3, r0
  400738:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40073a:	6050      	str	r0, [r2, #4]
		base->PIO_PUDR = mask;
  40073c:	6611      	str	r1, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40073e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400742:	6551      	str	r1, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400744:	6251      	str	r1, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400746:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40074a:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40074c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  400750:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400752:	6f53      	ldr	r3, [r2, #116]	; 0x74
  400754:	430b      	orrs	r3, r1
  400756:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400758:	6051      	str	r1, [r2, #4]
		base->PIO_PUDR = mask;
  40075a:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40075c:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400760:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400762:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400764:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400768:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40076a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40076e:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400770:	6f53      	ldr	r3, [r2, #116]	; 0x74
  400772:	4323      	orrs	r3, r4
  400774:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400776:	6054      	str	r4, [r2, #4]
		base->PIO_PUDR = mask;
  400778:	6616      	str	r6, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40077a:	f8c2 6090 	str.w	r6, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40077e:	6556      	str	r6, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400780:	6256      	str	r6, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400782:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400786:	6f13      	ldr	r3, [r2, #112]	; 0x70
  400788:	f023 0301 	bic.w	r3, r3, #1
  40078c:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40078e:	6f53      	ldr	r3, [r2, #116]	; 0x74
  400790:	4333      	orrs	r3, r6
  400792:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400794:	6056      	str	r6, [r2, #4]
		base->PIO_PUDR = mask;
  400796:	6615      	str	r5, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400798:	f8c2 5090 	str.w	r5, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  40079c:	6555      	str	r5, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  40079e:	6255      	str	r5, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4007a0:	f8c2 5080 	str.w	r5, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4007a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
  4007a6:	f023 0302 	bic.w	r3, r3, #2
  4007aa:	6713      	str	r3, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4007ac:	6f53      	ldr	r3, [r2, #116]	; 0x74
  4007ae:	432b      	orrs	r3, r5
  4007b0:	6753      	str	r3, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4007b2:	6055      	str	r5, [r2, #4]
  4007b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007b6:	bf00      	nop

004007b8 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4007b8:	2301      	movs	r3, #1
  4007ba:	6003      	str	r3, [r0, #0]
  4007bc:	4770      	bx	lr

004007be <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4007be:	b949      	cbnz	r1, 4007d4 <dacc_set_transfer_mode+0x16>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4007c0:	6843      	ldr	r3, [r0, #4]
  4007c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4007c6:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
  4007c8:	6843      	ldr	r3, [r0, #4]
  4007ca:	f023 0310 	bic.w	r3, r3, #16
  4007ce:	6043      	str	r3, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4007d0:	2000      	movs	r0, #0
  4007d2:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_ONE;
  4007d4:	6843      	ldr	r3, [r0, #4]
  4007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4007da:	6043      	str	r3, [r0, #4]
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
  4007dc:	6843      	ldr	r3, [r0, #4]
  4007de:	f043 0310 	orr.w	r3, r3, #16
  4007e2:	6043      	str	r3, [r0, #4]
  4007e4:	e7f4      	b.n	4007d0 <dacc_set_transfer_mode+0x12>

004007e6 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  4007e6:	6201      	str	r1, [r0, #32]
  4007e8:	4770      	bx	lr

004007ea <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4007ea:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4007ec:	2901      	cmp	r1, #1
  4007ee:	d901      	bls.n	4007f4 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
  4007f0:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
  4007f2:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
  4007f4:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4007f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4007fc:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4007fe:	2000      	movs	r0, #0
  400800:	4770      	bx	lr
	...

00400804 <dacc_set_timing>:
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		 uint32_t ul_maxs, uint32_t ul_startup)
{
	uint32_t mr = p_dacc->DACC_MR
  400804:	6843      	ldr	r3, [r0, #4]
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	if (ul_maxs) {
  400806:	b941      	cbnz	r1, 40081a <dacc_set_timing+0x16>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
  400808:	4907      	ldr	r1, [pc, #28]	; (400828 <dacc_set_timing+0x24>)
  40080a:	4019      	ands	r1, r3
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  40080c:	0612      	lsls	r2, r2, #24
  40080e:	f002 527c 	and.w	r2, r2, #1056964608	; 0x3f000000
  400812:	430a      	orrs	r2, r1

	p_dacc->DACC_MR = mr;
  400814:	6042      	str	r2, [r0, #4]
	return DACC_RC_OK;
}
  400816:	2000      	movs	r0, #0
  400818:	4770      	bx	lr
	uint32_t mr = p_dacc->DACC_MR
  40081a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
  40081e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
		mr |= DACC_MR_MAXS;
  400822:	f443 1100 	orr.w	r1, r3, #2097152	; 0x200000
  400826:	e7f1      	b.n	40080c <dacc_set_timing+0x8>
  400828:	c0df00ff 	.word	0xc0df00ff

0040082c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40082c:	2901      	cmp	r1, #1
  40082e:	d901      	bls.n	400834 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400830:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400832:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400834:	2301      	movs	r3, #1
  400836:	fa03 f101 	lsl.w	r1, r3, r1
  40083a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  40083c:	2000      	movs	r0, #0
  40083e:	4770      	bx	lr

00400840 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400840:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400844:	2000      	movs	r0, #0
  400846:	4770      	bx	lr

00400848 <dmac_init>:
		Dmac *p_dmac)
{
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EN &= (~DMAC_EN_ENABLE);
  400848:	6843      	ldr	r3, [r0, #4]
  40084a:	f023 0301 	bic.w	r3, r3, #1
  40084e:	6043      	str	r3, [r0, #4]
  400850:	4770      	bx	lr

00400852 <dmac_set_priority_mode>:
	p_dmac->DMAC_GCFG = (p_dmac->DMAC_GCFG & (~DMAC_GCFG_ARB_CFG)) | mode;
  400852:	6803      	ldr	r3, [r0, #0]
  400854:	f023 0310 	bic.w	r3, r3, #16
  400858:	4319      	orrs	r1, r3
  40085a:	6001      	str	r1, [r0, #0]
  40085c:	4770      	bx	lr

0040085e <dmac_enable>:
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
  40085e:	2301      	movs	r3, #1
  400860:	6043      	str	r3, [r0, #4]
  400862:	4770      	bx	lr

00400864 <dmac_enable_interrupt>:
		uint32_t ul_mask)
{
	/* Validate parameters. */
	Assert(p_dmac);
	
	p_dmac->DMAC_EBCIER = ul_mask;
  400864:	6181      	str	r1, [r0, #24]
  400866:	4770      	bx	lr

00400868 <dmac_get_status>:
		Dmac *p_dmac)
{
	/* Validate parameters. */
	Assert(p_dmac);
	
	return p_dmac->DMAC_EBCISR;
  400868:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
  40086a:	4770      	bx	lr

0040086c <dmac_channel_enable>:
{
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
  40086c:	2301      	movs	r3, #1
  40086e:	fa03 f101 	lsl.w	r1, r3, r1
  400872:	6281      	str	r1, [r0, #40]	; 0x28
  400874:	4770      	bx	lr

00400876 <dmac_channel_set_descriptor_addr>:
{
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
  400876:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40087a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  40087e:	644a      	str	r2, [r1, #68]	; 0x44
  400880:	4770      	bx	lr

00400882 <dmac_channel_set_configuration>:
{
	/* Validate parameters. */
	Assert(p_dmac);
	Assert(ul_num<=3);
	
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
  400882:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  400886:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  40088a:	650a      	str	r2, [r1, #80]	; 0x50
  40088c:	4770      	bx	lr

0040088e <dmac_channel_multi_buf_transfer_init>:
 */
void dmac_channel_multi_buf_transfer_init(
		Dmac *p_dmac,
		uint32_t ul_num,
		dma_transfer_descriptor_t *p_desc)
{
  40088e:	b410      	push	{r4}
	Assert(p_dmac);
	Assert(ul_num<=3);
	Assert(p_desc);
	
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
  400890:	6a43      	ldr	r3, [r0, #36]	; 0x24
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
  400892:	008b      	lsls	r3, r1, #2
  400894:	185c      	adds	r4, r3, r1
  400896:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  40089a:	6462      	str	r2, [r4, #68]	; 0x44
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
  40089c:	2300      	movs	r3, #0
  40089e:	64e3      	str	r3, [r4, #76]	; 0x4c

	dmac_channel_set_descriptor_addr(p_dmac, ul_num, (uint32_t)p_desc);
	dmac_channel_set_ctrlB(p_dmac, ul_num, 0);
}
  4008a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008a4:	4770      	bx	lr

004008a6 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  4008a6:	0109      	lsls	r1, r1, #4
  4008a8:	5042      	str	r2, [r0, r1]
  4008aa:	4770      	bx	lr

004008ac <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  4008ac:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4008b0:	604a      	str	r2, [r1, #4]
  4008b2:	4770      	bx	lr

004008b4 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  4008b4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4008b8:	608a      	str	r2, [r1, #8]
  4008ba:	4770      	bx	lr

004008bc <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  4008bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  4008c0:	60ca      	str	r2, [r1, #12]
  4008c2:	4770      	bx	lr

004008c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4008c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4008c6:	4770      	bx	lr

004008c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4008c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4008ca:	4770      	bx	lr

004008cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008d0:	4681      	mov	r9, r0
  4008d2:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4008d4:	4b12      	ldr	r3, [pc, #72]	; (400920 <pio_handler_process+0x54>)
  4008d6:	4798      	blx	r3
  4008d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4008da:	4648      	mov	r0, r9
  4008dc:	4b11      	ldr	r3, [pc, #68]	; (400924 <pio_handler_process+0x58>)
  4008de:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4008e0:	4005      	ands	r5, r0
  4008e2:	d013      	beq.n	40090c <pio_handler_process+0x40>
  4008e4:	4c10      	ldr	r4, [pc, #64]	; (400928 <pio_handler_process+0x5c>)
  4008e6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4008ea:	e003      	b.n	4008f4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008ec:	42b4      	cmp	r4, r6
  4008ee:	d00d      	beq.n	40090c <pio_handler_process+0x40>
  4008f0:	3410      	adds	r4, #16
		while (status != 0) {
  4008f2:	b15d      	cbz	r5, 40090c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4008f4:	6820      	ldr	r0, [r4, #0]
  4008f6:	42b8      	cmp	r0, r7
  4008f8:	d1f8      	bne.n	4008ec <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4008fa:	6861      	ldr	r1, [r4, #4]
  4008fc:	4229      	tst	r1, r5
  4008fe:	d0f5      	beq.n	4008ec <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400900:	68e3      	ldr	r3, [r4, #12]
  400902:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400904:	6863      	ldr	r3, [r4, #4]
  400906:	ea25 0503 	bic.w	r5, r5, r3
  40090a:	e7ef      	b.n	4008ec <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40090c:	4b07      	ldr	r3, [pc, #28]	; (40092c <pio_handler_process+0x60>)
  40090e:	681b      	ldr	r3, [r3, #0]
  400910:	b123      	cbz	r3, 40091c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400912:	4b07      	ldr	r3, [pc, #28]	; (400930 <pio_handler_process+0x64>)
  400914:	681b      	ldr	r3, [r3, #0]
  400916:	b10b      	cbz	r3, 40091c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400918:	4648      	mov	r0, r9
  40091a:	4798      	blx	r3
  40091c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400920:	004008c5 	.word	0x004008c5
  400924:	004008c9 	.word	0x004008c9
  400928:	200009e0 	.word	0x200009e0
  40092c:	20000aa4 	.word	0x20000aa4
  400930:	20000a50 	.word	0x20000a50

00400934 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400934:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400936:	2109      	movs	r1, #9
  400938:	4801      	ldr	r0, [pc, #4]	; (400940 <PIOA_Handler+0xc>)
  40093a:	4b02      	ldr	r3, [pc, #8]	; (400944 <PIOA_Handler+0x10>)
  40093c:	4798      	blx	r3
  40093e:	bd08      	pop	{r3, pc}
  400940:	400e0e00 	.word	0x400e0e00
  400944:	004008cd 	.word	0x004008cd

00400948 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400948:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40094a:	210a      	movs	r1, #10
  40094c:	4801      	ldr	r0, [pc, #4]	; (400954 <PIOB_Handler+0xc>)
  40094e:	4b02      	ldr	r3, [pc, #8]	; (400958 <PIOB_Handler+0x10>)
  400950:	4798      	blx	r3
  400952:	bd08      	pop	{r3, pc}
  400954:	400e1000 	.word	0x400e1000
  400958:	004008cd 	.word	0x004008cd

0040095c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40095c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40095e:	210b      	movs	r1, #11
  400960:	4801      	ldr	r0, [pc, #4]	; (400968 <PIOC_Handler+0xc>)
  400962:	4b02      	ldr	r3, [pc, #8]	; (40096c <PIOC_Handler+0x10>)
  400964:	4798      	blx	r3
  400966:	bd08      	pop	{r3, pc}
  400968:	400e1200 	.word	0x400e1200
  40096c:	004008cd 	.word	0x004008cd

00400970 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400970:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400972:	210c      	movs	r1, #12
  400974:	4801      	ldr	r0, [pc, #4]	; (40097c <PIOD_Handler+0xc>)
  400976:	4b02      	ldr	r3, [pc, #8]	; (400980 <PIOD_Handler+0x10>)
  400978:	4798      	blx	r3
  40097a:	bd08      	pop	{r3, pc}
  40097c:	400e1400 	.word	0x400e1400
  400980:	004008cd 	.word	0x004008cd

00400984 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400984:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400986:	210d      	movs	r1, #13
  400988:	4801      	ldr	r0, [pc, #4]	; (400990 <PIOE_Handler+0xc>)
  40098a:	4b02      	ldr	r3, [pc, #8]	; (400994 <PIOE_Handler+0x10>)
  40098c:	4798      	blx	r3
  40098e:	bd08      	pop	{r3, pc}
  400990:	400e1600 	.word	0x400e1600
  400994:	004008cd 	.word	0x004008cd

00400998 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400998:	4a17      	ldr	r2, [pc, #92]	; (4009f8 <pmc_switch_mck_to_pllack+0x60>)
  40099a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40099c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4009a0:	4318      	orrs	r0, r3
  4009a2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009a6:	f013 0f08 	tst.w	r3, #8
  4009aa:	d10a      	bne.n	4009c2 <pmc_switch_mck_to_pllack+0x2a>
  4009ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009b0:	4911      	ldr	r1, [pc, #68]	; (4009f8 <pmc_switch_mck_to_pllack+0x60>)
  4009b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009b4:	f012 0f08 	tst.w	r2, #8
  4009b8:	d103      	bne.n	4009c2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009ba:	3b01      	subs	r3, #1
  4009bc:	d1f9      	bne.n	4009b2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4009be:	2001      	movs	r0, #1
  4009c0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4009c2:	4a0d      	ldr	r2, [pc, #52]	; (4009f8 <pmc_switch_mck_to_pllack+0x60>)
  4009c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4009c6:	f023 0303 	bic.w	r3, r3, #3
  4009ca:	f043 0302 	orr.w	r3, r3, #2
  4009ce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009d2:	f013 0f08 	tst.w	r3, #8
  4009d6:	d10a      	bne.n	4009ee <pmc_switch_mck_to_pllack+0x56>
  4009d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009dc:	4906      	ldr	r1, [pc, #24]	; (4009f8 <pmc_switch_mck_to_pllack+0x60>)
  4009de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009e0:	f012 0f08 	tst.w	r2, #8
  4009e4:	d105      	bne.n	4009f2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009e6:	3b01      	subs	r3, #1
  4009e8:	d1f9      	bne.n	4009de <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4009ea:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4009ec:	4770      	bx	lr
	return 0;
  4009ee:	2000      	movs	r0, #0
  4009f0:	4770      	bx	lr
  4009f2:	2000      	movs	r0, #0
  4009f4:	4770      	bx	lr
  4009f6:	bf00      	nop
  4009f8:	400e0400 	.word	0x400e0400

004009fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4009fc:	b9c8      	cbnz	r0, 400a32 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009fe:	4a11      	ldr	r2, [pc, #68]	; (400a44 <pmc_switch_mainck_to_xtal+0x48>)
  400a00:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a02:	0209      	lsls	r1, r1, #8
  400a04:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a06:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a0a:	f023 0303 	bic.w	r3, r3, #3
  400a0e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a12:	f043 0301 	orr.w	r3, r3, #1
  400a16:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a18:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a1a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a1c:	f013 0f01 	tst.w	r3, #1
  400a20:	d0fb      	beq.n	400a1a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a22:	4a08      	ldr	r2, [pc, #32]	; (400a44 <pmc_switch_mainck_to_xtal+0x48>)
  400a24:	6a13      	ldr	r3, [r2, #32]
  400a26:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400a2e:	6213      	str	r3, [r2, #32]
  400a30:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a32:	4904      	ldr	r1, [pc, #16]	; (400a44 <pmc_switch_mainck_to_xtal+0x48>)
  400a34:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a36:	4a04      	ldr	r2, [pc, #16]	; (400a48 <pmc_switch_mainck_to_xtal+0x4c>)
  400a38:	401a      	ands	r2, r3
  400a3a:	4b04      	ldr	r3, [pc, #16]	; (400a4c <pmc_switch_mainck_to_xtal+0x50>)
  400a3c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a3e:	620b      	str	r3, [r1, #32]
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop
  400a44:	400e0400 	.word	0x400e0400
  400a48:	fec8fffc 	.word	0xfec8fffc
  400a4c:	01370002 	.word	0x01370002

00400a50 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a50:	4b02      	ldr	r3, [pc, #8]	; (400a5c <pmc_osc_is_ready_mainck+0xc>)
  400a52:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a54:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a58:	4770      	bx	lr
  400a5a:	bf00      	nop
  400a5c:	400e0400 	.word	0x400e0400

00400a60 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a64:	4b01      	ldr	r3, [pc, #4]	; (400a6c <pmc_disable_pllack+0xc>)
  400a66:	629a      	str	r2, [r3, #40]	; 0x28
  400a68:	4770      	bx	lr
  400a6a:	bf00      	nop
  400a6c:	400e0400 	.word	0x400e0400

00400a70 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a70:	4b02      	ldr	r3, [pc, #8]	; (400a7c <pmc_is_locked_pllack+0xc>)
  400a72:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a74:	f000 0002 	and.w	r0, r0, #2
  400a78:	4770      	bx	lr
  400a7a:	bf00      	nop
  400a7c:	400e0400 	.word	0x400e0400

00400a80 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400a80:	282f      	cmp	r0, #47	; 0x2f
  400a82:	d81e      	bhi.n	400ac2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400a84:	281f      	cmp	r0, #31
  400a86:	d80c      	bhi.n	400aa2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a88:	4b11      	ldr	r3, [pc, #68]	; (400ad0 <pmc_enable_periph_clk+0x50>)
  400a8a:	699a      	ldr	r2, [r3, #24]
  400a8c:	2301      	movs	r3, #1
  400a8e:	4083      	lsls	r3, r0
  400a90:	4393      	bics	r3, r2
  400a92:	d018      	beq.n	400ac6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400a94:	2301      	movs	r3, #1
  400a96:	fa03 f000 	lsl.w	r0, r3, r0
  400a9a:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <pmc_enable_periph_clk+0x50>)
  400a9c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a9e:	2000      	movs	r0, #0
  400aa0:	4770      	bx	lr
		ul_id -= 32;
  400aa2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400aa4:	4b0a      	ldr	r3, [pc, #40]	; (400ad0 <pmc_enable_periph_clk+0x50>)
  400aa6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400aaa:	2301      	movs	r3, #1
  400aac:	4083      	lsls	r3, r0
  400aae:	4393      	bics	r3, r2
  400ab0:	d00b      	beq.n	400aca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400ab2:	2301      	movs	r3, #1
  400ab4:	fa03 f000 	lsl.w	r0, r3, r0
  400ab8:	4b05      	ldr	r3, [pc, #20]	; (400ad0 <pmc_enable_periph_clk+0x50>)
  400aba:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400abe:	2000      	movs	r0, #0
  400ac0:	4770      	bx	lr
		return 1;
  400ac2:	2001      	movs	r0, #1
  400ac4:	4770      	bx	lr
	return 0;
  400ac6:	2000      	movs	r0, #0
  400ac8:	4770      	bx	lr
  400aca:	2000      	movs	r0, #0
}
  400acc:	4770      	bx	lr
  400ace:	bf00      	nop
  400ad0:	400e0400 	.word	0x400e0400

00400ad4 <rstc_enable_user_reset>:
		Rstc *p_rstc)
{
	/* Validate the parameters. */
	Assert(p_rstc);
	
	uint32_t mode = p_rstc->RSTC_MR;
  400ad4:	6883      	ldr	r3, [r0, #8]

	mode &= ~RSTC_MR_KEY_Msk;
  400ad6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	mode |= (RSTC_MR_URSTEN | RSTC_KEY);
  400ada:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400ade:	f043 0301 	orr.w	r3, r3, #1

	p_rstc->RSTC_MR = mode;
  400ae2:	6083      	str	r3, [r0, #8]
  400ae4:	4770      	bx	lr
	...

00400ae8 <rstc_start_software_reset>:
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
#else
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  400ae8:	4b01      	ldr	r3, [pc, #4]	; (400af0 <rstc_start_software_reset+0x8>)
  400aea:	6003      	str	r3, [r0, #0]
  400aec:	4770      	bx	lr
  400aee:	bf00      	nop
  400af0:	a5000005 	.word	0xa5000005

00400af4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400af4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400af6:	23ac      	movs	r3, #172	; 0xac
  400af8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400afa:	680b      	ldr	r3, [r1, #0]
  400afc:	684a      	ldr	r2, [r1, #4]
  400afe:	fbb3 f3f2 	udiv	r3, r3, r2
  400b02:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400b04:	1e5c      	subs	r4, r3, #1
  400b06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400b0a:	4294      	cmp	r4, r2
  400b0c:	d80c      	bhi.n	400b28 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400b0e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400b10:	688b      	ldr	r3, [r1, #8]
  400b12:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400b14:	f240 2302 	movw	r3, #514	; 0x202
  400b18:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400b1c:	2350      	movs	r3, #80	; 0x50
  400b1e:	6003      	str	r3, [r0, #0]

	return 0;
  400b20:	2000      	movs	r0, #0
}
  400b22:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b26:	4770      	bx	lr
		return 1;
  400b28:	2001      	movs	r0, #1
  400b2a:	e7fa      	b.n	400b22 <uart_init+0x2e>

00400b2c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400b2c:	6943      	ldr	r3, [r0, #20]
  400b2e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b32:	bf1a      	itte	ne
  400b34:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b36:	2000      	movne	r0, #0
		return 1;
  400b38:	2001      	moveq	r0, #1
}
  400b3a:	4770      	bx	lr

00400b3c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b3c:	6943      	ldr	r3, [r0, #20]
  400b3e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b42:	bf1d      	ittte	ne
  400b44:	6983      	ldrne	r3, [r0, #24]
  400b46:	700b      	strbne	r3, [r1, #0]
	return 0;
  400b48:	2000      	movne	r0, #0
		return 1;
  400b4a:	2001      	moveq	r0, #1
}
  400b4c:	4770      	bx	lr

00400b4e <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b4e:	6943      	ldr	r3, [r0, #20]
  400b50:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400b54:	bf1d      	ittte	ne
  400b56:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400b5a:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b5c:	2000      	movne	r0, #0
		return 1;
  400b5e:	2001      	moveq	r0, #1
}
  400b60:	4770      	bx	lr

00400b62 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b62:	6943      	ldr	r3, [r0, #20]
  400b64:	f013 0f01 	tst.w	r3, #1
  400b68:	d005      	beq.n	400b76 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b6a:	6983      	ldr	r3, [r0, #24]
  400b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b70:	600b      	str	r3, [r1, #0]

	return 0;
  400b72:	2000      	movs	r0, #0
  400b74:	4770      	bx	lr
		return 1;
  400b76:	2001      	movs	r0, #1
}
  400b78:	4770      	bx	lr

00400b7a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b7a:	e7fe      	b.n	400b7a <Dummy_Handler>

00400b7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400b7c:	b500      	push	{lr}
  400b7e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400b80:	4b25      	ldr	r3, [pc, #148]	; (400c18 <Reset_Handler+0x9c>)
  400b82:	4a26      	ldr	r2, [pc, #152]	; (400c1c <Reset_Handler+0xa0>)
  400b84:	429a      	cmp	r2, r3
  400b86:	d010      	beq.n	400baa <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400b88:	4b25      	ldr	r3, [pc, #148]	; (400c20 <Reset_Handler+0xa4>)
  400b8a:	4a23      	ldr	r2, [pc, #140]	; (400c18 <Reset_Handler+0x9c>)
  400b8c:	429a      	cmp	r2, r3
  400b8e:	d20c      	bcs.n	400baa <Reset_Handler+0x2e>
  400b90:	3b01      	subs	r3, #1
  400b92:	1a9b      	subs	r3, r3, r2
  400b94:	f023 0303 	bic.w	r3, r3, #3
  400b98:	3304      	adds	r3, #4
  400b9a:	4413      	add	r3, r2
  400b9c:	491f      	ldr	r1, [pc, #124]	; (400c1c <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400b9e:	f851 0b04 	ldr.w	r0, [r1], #4
  400ba2:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400ba6:	429a      	cmp	r2, r3
  400ba8:	d1f9      	bne.n	400b9e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400baa:	4b1e      	ldr	r3, [pc, #120]	; (400c24 <Reset_Handler+0xa8>)
  400bac:	4a1e      	ldr	r2, [pc, #120]	; (400c28 <Reset_Handler+0xac>)
  400bae:	429a      	cmp	r2, r3
  400bb0:	d20a      	bcs.n	400bc8 <Reset_Handler+0x4c>
  400bb2:	3b01      	subs	r3, #1
  400bb4:	1a9b      	subs	r3, r3, r2
  400bb6:	f023 0303 	bic.w	r3, r3, #3
  400bba:	3304      	adds	r3, #4
  400bbc:	4413      	add	r3, r2
		*pDest++ = 0;
  400bbe:	2100      	movs	r1, #0
  400bc0:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400bc4:	4293      	cmp	r3, r2
  400bc6:	d1fb      	bne.n	400bc0 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400bc8:	4a18      	ldr	r2, [pc, #96]	; (400c2c <Reset_Handler+0xb0>)
  400bca:	4b19      	ldr	r3, [pc, #100]	; (400c30 <Reset_Handler+0xb4>)
  400bcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400bd0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400bd2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bd6:	fab3 f383 	clz	r3, r3
  400bda:	095b      	lsrs	r3, r3, #5
  400bdc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400bde:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400be0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400be4:	2200      	movs	r2, #0
  400be6:	4b13      	ldr	r3, [pc, #76]	; (400c34 <Reset_Handler+0xb8>)
  400be8:	701a      	strb	r2, [r3, #0]
	return flags;
  400bea:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400bec:	4a12      	ldr	r2, [pc, #72]	; (400c38 <Reset_Handler+0xbc>)
  400bee:	6813      	ldr	r3, [r2, #0]
  400bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400bf4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400bf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bfa:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400bfe:	b129      	cbz	r1, 400c0c <Reset_Handler+0x90>
		cpu_irq_enable();
  400c00:	2201      	movs	r2, #1
  400c02:	4b0c      	ldr	r3, [pc, #48]	; (400c34 <Reset_Handler+0xb8>)
  400c04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400c06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c0a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400c0c:	4b0b      	ldr	r3, [pc, #44]	; (400c3c <Reset_Handler+0xc0>)
  400c0e:	4798      	blx	r3

	/* Branch to main function */
	main();
  400c10:	4b0b      	ldr	r3, [pc, #44]	; (400c40 <Reset_Handler+0xc4>)
  400c12:	4798      	blx	r3
  400c14:	e7fe      	b.n	400c14 <Reset_Handler+0x98>
  400c16:	bf00      	nop
  400c18:	20000000 	.word	0x20000000
  400c1c:	00404970 	.word	0x00404970
  400c20:	200009c4 	.word	0x200009c4
  400c24:	20001510 	.word	0x20001510
  400c28:	200009c4 	.word	0x200009c4
  400c2c:	e000ed00 	.word	0xe000ed00
  400c30:	00400000 	.word	0x00400000
  400c34:	20000000 	.word	0x20000000
  400c38:	e000ed88 	.word	0xe000ed88
  400c3c:	00401881 	.word	0x00401881
  400c40:	00401621 	.word	0x00401621

00400c44 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400c44:	4b3b      	ldr	r3, [pc, #236]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c48:	f003 0303 	and.w	r3, r3, #3
  400c4c:	2b01      	cmp	r3, #1
  400c4e:	d01d      	beq.n	400c8c <SystemCoreClockUpdate+0x48>
  400c50:	b183      	cbz	r3, 400c74 <SystemCoreClockUpdate+0x30>
  400c52:	2b02      	cmp	r3, #2
  400c54:	d036      	beq.n	400cc4 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400c56:	4b37      	ldr	r3, [pc, #220]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c5e:	2b70      	cmp	r3, #112	; 0x70
  400c60:	d05f      	beq.n	400d22 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400c62:	4b34      	ldr	r3, [pc, #208]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c66:	4934      	ldr	r1, [pc, #208]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400c68:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c6c:	680b      	ldr	r3, [r1, #0]
  400c6e:	40d3      	lsrs	r3, r2
  400c70:	600b      	str	r3, [r1, #0]
  400c72:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400c74:	4b31      	ldr	r3, [pc, #196]	; (400d3c <SystemCoreClockUpdate+0xf8>)
  400c76:	695b      	ldr	r3, [r3, #20]
  400c78:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c7c:	bf14      	ite	ne
  400c7e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c82:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c86:	4b2c      	ldr	r3, [pc, #176]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400c88:	601a      	str	r2, [r3, #0]
  400c8a:	e7e4      	b.n	400c56 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c8c:	4b29      	ldr	r3, [pc, #164]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400c8e:	6a1b      	ldr	r3, [r3, #32]
  400c90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c94:	d003      	beq.n	400c9e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c96:	4a2a      	ldr	r2, [pc, #168]	; (400d40 <SystemCoreClockUpdate+0xfc>)
  400c98:	4b27      	ldr	r3, [pc, #156]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400c9a:	601a      	str	r2, [r3, #0]
  400c9c:	e7db      	b.n	400c56 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c9e:	4a29      	ldr	r2, [pc, #164]	; (400d44 <SystemCoreClockUpdate+0x100>)
  400ca0:	4b25      	ldr	r3, [pc, #148]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400ca2:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ca4:	4b23      	ldr	r3, [pc, #140]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400ca6:	6a1b      	ldr	r3, [r3, #32]
  400ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cac:	2b10      	cmp	r3, #16
  400cae:	d005      	beq.n	400cbc <SystemCoreClockUpdate+0x78>
  400cb0:	2b20      	cmp	r3, #32
  400cb2:	d1d0      	bne.n	400c56 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400cb4:	4a22      	ldr	r2, [pc, #136]	; (400d40 <SystemCoreClockUpdate+0xfc>)
  400cb6:	4b20      	ldr	r3, [pc, #128]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400cb8:	601a      	str	r2, [r3, #0]
				break;
  400cba:	e7cc      	b.n	400c56 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400cbc:	4a22      	ldr	r2, [pc, #136]	; (400d48 <SystemCoreClockUpdate+0x104>)
  400cbe:	4b1e      	ldr	r3, [pc, #120]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400cc0:	601a      	str	r2, [r3, #0]
				break;
  400cc2:	e7c8      	b.n	400c56 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400cc4:	4b1b      	ldr	r3, [pc, #108]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400cc6:	6a1b      	ldr	r3, [r3, #32]
  400cc8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ccc:	d016      	beq.n	400cfc <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400cce:	4a1c      	ldr	r2, [pc, #112]	; (400d40 <SystemCoreClockUpdate+0xfc>)
  400cd0:	4b19      	ldr	r3, [pc, #100]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400cd2:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400cd4:	4b17      	ldr	r3, [pc, #92]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cd8:	f003 0303 	and.w	r3, r3, #3
  400cdc:	2b02      	cmp	r3, #2
  400cde:	d1ba      	bne.n	400c56 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ce0:	4a14      	ldr	r2, [pc, #80]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400ce2:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ce4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400ce6:	4814      	ldr	r0, [pc, #80]	; (400d38 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ce8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400cec:	6803      	ldr	r3, [r0, #0]
  400cee:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cf2:	b2d2      	uxtb	r2, r2
  400cf4:	fbb3 f3f2 	udiv	r3, r3, r2
  400cf8:	6003      	str	r3, [r0, #0]
  400cfa:	e7ac      	b.n	400c56 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cfc:	4a11      	ldr	r2, [pc, #68]	; (400d44 <SystemCoreClockUpdate+0x100>)
  400cfe:	4b0e      	ldr	r3, [pc, #56]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400d00:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400d02:	4b0c      	ldr	r3, [pc, #48]	; (400d34 <SystemCoreClockUpdate+0xf0>)
  400d04:	6a1b      	ldr	r3, [r3, #32]
  400d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d0a:	2b10      	cmp	r3, #16
  400d0c:	d005      	beq.n	400d1a <SystemCoreClockUpdate+0xd6>
  400d0e:	2b20      	cmp	r3, #32
  400d10:	d1e0      	bne.n	400cd4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400d12:	4a0b      	ldr	r2, [pc, #44]	; (400d40 <SystemCoreClockUpdate+0xfc>)
  400d14:	4b08      	ldr	r3, [pc, #32]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400d16:	601a      	str	r2, [r3, #0]
				break;
  400d18:	e7dc      	b.n	400cd4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400d1a:	4a0b      	ldr	r2, [pc, #44]	; (400d48 <SystemCoreClockUpdate+0x104>)
  400d1c:	4b06      	ldr	r3, [pc, #24]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400d1e:	601a      	str	r2, [r3, #0]
				break;
  400d20:	e7d8      	b.n	400cd4 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400d22:	4a05      	ldr	r2, [pc, #20]	; (400d38 <SystemCoreClockUpdate+0xf4>)
  400d24:	6813      	ldr	r3, [r2, #0]
  400d26:	4909      	ldr	r1, [pc, #36]	; (400d4c <SystemCoreClockUpdate+0x108>)
  400d28:	fba1 1303 	umull	r1, r3, r1, r3
  400d2c:	085b      	lsrs	r3, r3, #1
  400d2e:	6013      	str	r3, [r2, #0]
  400d30:	4770      	bx	lr
  400d32:	bf00      	nop
  400d34:	400e0400 	.word	0x400e0400
  400d38:	20000004 	.word	0x20000004
  400d3c:	400e1810 	.word	0x400e1810
  400d40:	00b71b00 	.word	0x00b71b00
  400d44:	003d0900 	.word	0x003d0900
  400d48:	007a1200 	.word	0x007a1200
  400d4c:	aaaaaaab 	.word	0xaaaaaaab

00400d50 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400d50:	4b12      	ldr	r3, [pc, #72]	; (400d9c <system_init_flash+0x4c>)
  400d52:	4298      	cmp	r0, r3
  400d54:	d911      	bls.n	400d7a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400d56:	4b12      	ldr	r3, [pc, #72]	; (400da0 <system_init_flash+0x50>)
  400d58:	4298      	cmp	r0, r3
  400d5a:	d913      	bls.n	400d84 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400d5c:	4b11      	ldr	r3, [pc, #68]	; (400da4 <system_init_flash+0x54>)
  400d5e:	4298      	cmp	r0, r3
  400d60:	d914      	bls.n	400d8c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d62:	4b11      	ldr	r3, [pc, #68]	; (400da8 <system_init_flash+0x58>)
  400d64:	4298      	cmp	r0, r3
  400d66:	d915      	bls.n	400d94 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d68:	4b10      	ldr	r3, [pc, #64]	; (400dac <system_init_flash+0x5c>)
  400d6a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d6c:	bf94      	ite	ls
  400d6e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d72:	4a0f      	ldrhi	r2, [pc, #60]	; (400db0 <system_init_flash+0x60>)
  400d74:	4b0f      	ldr	r3, [pc, #60]	; (400db4 <system_init_flash+0x64>)
  400d76:	601a      	str	r2, [r3, #0]
  400d78:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d7e:	4b0d      	ldr	r3, [pc, #52]	; (400db4 <system_init_flash+0x64>)
  400d80:	601a      	str	r2, [r3, #0]
  400d82:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d84:	4a0c      	ldr	r2, [pc, #48]	; (400db8 <system_init_flash+0x68>)
  400d86:	4b0b      	ldr	r3, [pc, #44]	; (400db4 <system_init_flash+0x64>)
  400d88:	601a      	str	r2, [r3, #0]
  400d8a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d8c:	4a0b      	ldr	r2, [pc, #44]	; (400dbc <system_init_flash+0x6c>)
  400d8e:	4b09      	ldr	r3, [pc, #36]	; (400db4 <system_init_flash+0x64>)
  400d90:	601a      	str	r2, [r3, #0]
  400d92:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d94:	4a0a      	ldr	r2, [pc, #40]	; (400dc0 <system_init_flash+0x70>)
  400d96:	4b07      	ldr	r3, [pc, #28]	; (400db4 <system_init_flash+0x64>)
  400d98:	601a      	str	r2, [r3, #0]
  400d9a:	4770      	bx	lr
  400d9c:	01312cff 	.word	0x01312cff
  400da0:	026259ff 	.word	0x026259ff
  400da4:	039386ff 	.word	0x039386ff
  400da8:	04c4b3ff 	.word	0x04c4b3ff
  400dac:	05f5e0ff 	.word	0x05f5e0ff
  400db0:	04000500 	.word	0x04000500
  400db4:	400e0a00 	.word	0x400e0a00
  400db8:	04000100 	.word	0x04000100
  400dbc:	04000200 	.word	0x04000200
  400dc0:	04000300 	.word	0x04000300

00400dc4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400dc4:	4b0a      	ldr	r3, [pc, #40]	; (400df0 <_sbrk+0x2c>)
  400dc6:	681b      	ldr	r3, [r3, #0]
  400dc8:	b153      	cbz	r3, 400de0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400dca:	4b09      	ldr	r3, [pc, #36]	; (400df0 <_sbrk+0x2c>)
  400dcc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400dce:	181a      	adds	r2, r3, r0
  400dd0:	4908      	ldr	r1, [pc, #32]	; (400df4 <_sbrk+0x30>)
  400dd2:	4291      	cmp	r1, r2
  400dd4:	db08      	blt.n	400de8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400dd6:	4610      	mov	r0, r2
  400dd8:	4a05      	ldr	r2, [pc, #20]	; (400df0 <_sbrk+0x2c>)
  400dda:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400ddc:	4618      	mov	r0, r3
  400dde:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400de0:	4a05      	ldr	r2, [pc, #20]	; (400df8 <_sbrk+0x34>)
  400de2:	4b03      	ldr	r3, [pc, #12]	; (400df0 <_sbrk+0x2c>)
  400de4:	601a      	str	r2, [r3, #0]
  400de6:	e7f0      	b.n	400dca <_sbrk+0x6>
		return (caddr_t) -1;	
  400de8:	f04f 30ff 	mov.w	r0, #4294967295
}
  400dec:	4770      	bx	lr
  400dee:	bf00      	nop
  400df0:	20000a54 	.word	0x20000a54
  400df4:	2001fffc 	.word	0x2001fffc
  400df8:	20004510 	.word	0x20004510

00400dfc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400dfc:	f04f 30ff 	mov.w	r0, #4294967295
  400e00:	4770      	bx	lr

00400e02 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e06:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e08:	2000      	movs	r0, #0
  400e0a:	4770      	bx	lr

00400e0c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400e0c:	2001      	movs	r0, #1
  400e0e:	4770      	bx	lr

00400e10 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e10:	2000      	movs	r0, #0
  400e12:	4770      	bx	lr

00400e14 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400e14:	b570      	push	{r4, r5, r6, lr}
  400e16:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400e18:	4b18      	ldr	r3, [pc, #96]	; (400e7c <usart_serial_putchar+0x68>)
  400e1a:	4298      	cmp	r0, r3
  400e1c:	d00a      	beq.n	400e34 <usart_serial_putchar+0x20>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400e1e:	4b18      	ldr	r3, [pc, #96]	; (400e80 <usart_serial_putchar+0x6c>)
  400e20:	4298      	cmp	r0, r3
  400e22:	d010      	beq.n	400e46 <usart_serial_putchar+0x32>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400e24:	4b17      	ldr	r3, [pc, #92]	; (400e84 <usart_serial_putchar+0x70>)
  400e26:	4298      	cmp	r0, r3
  400e28:	d016      	beq.n	400e58 <usart_serial_putchar+0x44>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400e2a:	4b17      	ldr	r3, [pc, #92]	; (400e88 <usart_serial_putchar+0x74>)
  400e2c:	4298      	cmp	r0, r3
  400e2e:	d01c      	beq.n	400e6a <usart_serial_putchar+0x56>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400e30:	2000      	movs	r0, #0
}
  400e32:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e34:	461e      	mov	r6, r3
  400e36:	4d15      	ldr	r5, [pc, #84]	; (400e8c <usart_serial_putchar+0x78>)
  400e38:	4621      	mov	r1, r4
  400e3a:	4630      	mov	r0, r6
  400e3c:	47a8      	blx	r5
  400e3e:	2800      	cmp	r0, #0
  400e40:	d1fa      	bne.n	400e38 <usart_serial_putchar+0x24>
		return 1;
  400e42:	2001      	movs	r0, #1
  400e44:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400e46:	461e      	mov	r6, r3
  400e48:	4d10      	ldr	r5, [pc, #64]	; (400e8c <usart_serial_putchar+0x78>)
  400e4a:	4621      	mov	r1, r4
  400e4c:	4630      	mov	r0, r6
  400e4e:	47a8      	blx	r5
  400e50:	2800      	cmp	r0, #0
  400e52:	d1fa      	bne.n	400e4a <usart_serial_putchar+0x36>
		return 1;
  400e54:	2001      	movs	r0, #1
  400e56:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e58:	461e      	mov	r6, r3
  400e5a:	4d0d      	ldr	r5, [pc, #52]	; (400e90 <usart_serial_putchar+0x7c>)
  400e5c:	4621      	mov	r1, r4
  400e5e:	4630      	mov	r0, r6
  400e60:	47a8      	blx	r5
  400e62:	2800      	cmp	r0, #0
  400e64:	d1fa      	bne.n	400e5c <usart_serial_putchar+0x48>
		return 1;
  400e66:	2001      	movs	r0, #1
  400e68:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400e6a:	461e      	mov	r6, r3
  400e6c:	4d08      	ldr	r5, [pc, #32]	; (400e90 <usart_serial_putchar+0x7c>)
  400e6e:	4621      	mov	r1, r4
  400e70:	4630      	mov	r0, r6
  400e72:	47a8      	blx	r5
  400e74:	2800      	cmp	r0, #0
  400e76:	d1fa      	bne.n	400e6e <usart_serial_putchar+0x5a>
		return 1;
  400e78:	2001      	movs	r0, #1
  400e7a:	bd70      	pop	{r4, r5, r6, pc}
  400e7c:	400e0600 	.word	0x400e0600
  400e80:	40060600 	.word	0x40060600
  400e84:	400a0000 	.word	0x400a0000
  400e88:	400a4000 	.word	0x400a4000
  400e8c:	00400b2d 	.word	0x00400b2d
  400e90:	00400b4f 	.word	0x00400b4f

00400e94 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e96:	b083      	sub	sp, #12
  400e98:	4605      	mov	r5, r0
  400e9a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400e9c:	2300      	movs	r3, #0
  400e9e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400ea0:	4b18      	ldr	r3, [pc, #96]	; (400f04 <usart_serial_getchar+0x70>)
  400ea2:	4298      	cmp	r0, r3
  400ea4:	d00a      	beq.n	400ebc <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400ea6:	4b18      	ldr	r3, [pc, #96]	; (400f08 <usart_serial_getchar+0x74>)
  400ea8:	4298      	cmp	r0, r3
  400eaa:	d00f      	beq.n	400ecc <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400eac:	4b17      	ldr	r3, [pc, #92]	; (400f0c <usart_serial_getchar+0x78>)
  400eae:	4298      	cmp	r0, r3
  400eb0:	d014      	beq.n	400edc <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400eb2:	4b17      	ldr	r3, [pc, #92]	; (400f10 <usart_serial_getchar+0x7c>)
  400eb4:	429d      	cmp	r5, r3
  400eb6:	d01b      	beq.n	400ef0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400eb8:	b003      	add	sp, #12
  400eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400ebc:	461f      	mov	r7, r3
  400ebe:	4e15      	ldr	r6, [pc, #84]	; (400f14 <usart_serial_getchar+0x80>)
  400ec0:	4621      	mov	r1, r4
  400ec2:	4638      	mov	r0, r7
  400ec4:	47b0      	blx	r6
  400ec6:	2800      	cmp	r0, #0
  400ec8:	d1fa      	bne.n	400ec0 <usart_serial_getchar+0x2c>
  400eca:	e7f2      	b.n	400eb2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400ecc:	461e      	mov	r6, r3
  400ece:	4d11      	ldr	r5, [pc, #68]	; (400f14 <usart_serial_getchar+0x80>)
  400ed0:	4621      	mov	r1, r4
  400ed2:	4630      	mov	r0, r6
  400ed4:	47a8      	blx	r5
  400ed6:	2800      	cmp	r0, #0
  400ed8:	d1fa      	bne.n	400ed0 <usart_serial_getchar+0x3c>
  400eda:	e7ed      	b.n	400eb8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400edc:	461e      	mov	r6, r3
  400ede:	4d0e      	ldr	r5, [pc, #56]	; (400f18 <usart_serial_getchar+0x84>)
  400ee0:	a901      	add	r1, sp, #4
  400ee2:	4630      	mov	r0, r6
  400ee4:	47a8      	blx	r5
  400ee6:	2800      	cmp	r0, #0
  400ee8:	d1fa      	bne.n	400ee0 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400eea:	9b01      	ldr	r3, [sp, #4]
  400eec:	7023      	strb	r3, [r4, #0]
  400eee:	e7e3      	b.n	400eb8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400ef0:	461e      	mov	r6, r3
  400ef2:	4d09      	ldr	r5, [pc, #36]	; (400f18 <usart_serial_getchar+0x84>)
  400ef4:	a901      	add	r1, sp, #4
  400ef6:	4630      	mov	r0, r6
  400ef8:	47a8      	blx	r5
  400efa:	2800      	cmp	r0, #0
  400efc:	d1fa      	bne.n	400ef4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  400efe:	9b01      	ldr	r3, [sp, #4]
  400f00:	7023      	strb	r3, [r4, #0]
}
  400f02:	e7d9      	b.n	400eb8 <usart_serial_getchar+0x24>
  400f04:	400e0600 	.word	0x400e0600
  400f08:	40060600 	.word	0x40060600
  400f0c:	400a0000 	.word	0x400a0000
  400f10:	400a4000 	.word	0x400a4000
  400f14:	00400b3d 	.word	0x00400b3d
  400f18:	00400b63 	.word	0x00400b63

00400f1c <configure_sram>:
	ioport_set_pin_mode(PIO_PA29_IDX, IOPORT_MODE_PULLDOWN);
}


static void configure_sram(uint32_t cs)
{
  400f1c:	b538      	push	{r3, r4, r5, lr}
  400f1e:	4605      	mov	r5, r0
	smc_set_setup_timing(SMC, cs, SMC_SETUP_NWE_SETUP(1)
  400f20:	4c0c      	ldr	r4, [pc, #48]	; (400f54 <configure_sram+0x38>)
  400f22:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
  400f26:	4601      	mov	r1, r0
  400f28:	4620      	mov	r0, r4
  400f2a:	4b0b      	ldr	r3, [pc, #44]	; (400f58 <configure_sram+0x3c>)
  400f2c:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, cs, SMC_PULSE_NWE_PULSE(6)
  400f2e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
  400f32:	4629      	mov	r1, r5
  400f34:	4620      	mov	r0, r4
  400f36:	4b09      	ldr	r3, [pc, #36]	; (400f5c <configure_sram+0x40>)
  400f38:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(6)
	| SMC_PULSE_NRD_PULSE(6)
	| SMC_PULSE_NCS_RD_PULSE(6));
	smc_set_cycle_timing(SMC, cs, SMC_CYCLE_NWE_CYCLE(7)
  400f3a:	f04f 1207 	mov.w	r2, #458759	; 0x70007
  400f3e:	4629      	mov	r1, r5
  400f40:	4620      	mov	r0, r4
  400f42:	4b07      	ldr	r3, [pc, #28]	; (400f60 <configure_sram+0x44>)
  400f44:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(7));
	smc_set_mode(SMC, cs, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE);
  400f46:	2203      	movs	r2, #3
  400f48:	4629      	mov	r1, r5
  400f4a:	4620      	mov	r0, r4
  400f4c:	4b05      	ldr	r3, [pc, #20]	; (400f64 <configure_sram+0x48>)
  400f4e:	4798      	blx	r3
  400f50:	bd38      	pop	{r3, r4, r5, pc}
  400f52:	bf00      	nop
  400f54:	40060000 	.word	0x40060000
  400f58:	004008a7 	.word	0x004008a7
  400f5c:	004008ad 	.word	0x004008ad
  400f60:	004008b5 	.word	0x004008b5
  400f64:	004008bd 	.word	0x004008bd

00400f68 <start_sampling>:
void start_sampling(){
  400f68:	b570      	push	{r4, r5, r6, lr}
	pmc_enable_periph_clk(ID_DMAC);
  400f6a:	2014      	movs	r0, #20
  400f6c:	4b30      	ldr	r3, [pc, #192]	; (401030 <start_sampling+0xc8>)
  400f6e:	4798      	blx	r3
	dmac_init(DMAC);
  400f70:	4c30      	ldr	r4, [pc, #192]	; (401034 <start_sampling+0xcc>)
  400f72:	4620      	mov	r0, r4
  400f74:	4b30      	ldr	r3, [pc, #192]	; (401038 <start_sampling+0xd0>)
  400f76:	4798      	blx	r3
	dmac_set_priority_mode(DMAC, DMAC_PRIORITY_ROUND_ROBIN);
  400f78:	2110      	movs	r1, #16
  400f7a:	4620      	mov	r0, r4
  400f7c:	4b2f      	ldr	r3, [pc, #188]	; (40103c <start_sampling+0xd4>)
  400f7e:	4798      	blx	r3
	dmac_enable(DMAC);
  400f80:	4620      	mov	r0, r4
  400f82:	4b2f      	ldr	r3, [pc, #188]	; (401040 <start_sampling+0xd8>)
  400f84:	4798      	blx	r3
	dmac_channel_set_configuration(DMAC, DMA_CH, cfg);
  400f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400f8a:	2100      	movs	r1, #0
  400f8c:	4620      	mov	r0, r4
  400f8e:	4b2d      	ldr	r3, [pc, #180]	; (401044 <start_sampling+0xdc>)
  400f90:	4798      	blx	r3
	uint32_t ul_ctrlA = DMAC_CTRLA_BTSIZE(num_samples_to_sample) |
  400f92:	4b2d      	ldr	r3, [pc, #180]	; (401048 <start_sampling+0xe0>)
  400f94:	6818      	ldr	r0, [r3, #0]
  400f96:	b281      	uxth	r1, r0
  400f98:	f041 5108 	orr.w	r1, r1, #570425344	; 0x22000000
	desc1.ul_source_addr = (uint32_t) 0x400E0E00 + 0x003C;
  400f9c:	4a2b      	ldr	r2, [pc, #172]	; (40104c <start_sampling+0xe4>)
  400f9e:	4e2c      	ldr	r6, [pc, #176]	; (401050 <start_sampling+0xe8>)
  400fa0:	6016      	str	r6, [r2, #0]
	desc1.ul_destination_addr = (uint32_t) waiting_buffers[0];
  400fa2:	4d2c      	ldr	r5, [pc, #176]	; (401054 <start_sampling+0xec>)
  400fa4:	682b      	ldr	r3, [r5, #0]
  400fa6:	6053      	str	r3, [r2, #4]
	desc1.ul_ctrlA = ul_ctrlA;
  400fa8:	6091      	str	r1, [r2, #8]
	desc1.ul_ctrlB = ul_ctrlB;
  400faa:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
  400fae:	60d4      	str	r4, [r2, #12]
	desc1.ul_descriptor_addr = &desc2;
  400fb0:	4b29      	ldr	r3, [pc, #164]	; (401058 <start_sampling+0xf0>)
  400fb2:	6113      	str	r3, [r2, #16]
	desc2.ul_source_addr = (uint32_t) 0x400E0E00 + 0x003C;
  400fb4:	601e      	str	r6, [r3, #0]
	desc2.ul_destination_addr = (uint32_t) waiting_buffers[1];
  400fb6:	686d      	ldr	r5, [r5, #4]
  400fb8:	605d      	str	r5, [r3, #4]
	desc2.ul_ctrlA = ul_ctrlA;
  400fba:	6099      	str	r1, [r3, #8]
	desc2.ul_ctrlB = ul_ctrlB;
  400fbc:	60dc      	str	r4, [r3, #12]
	desc2.ul_descriptor_addr = &desc1;
  400fbe:	611a      	str	r2, [r3, #16]
  400fc0:	0086      	lsls	r6, r0, #2
  400fc2:	4b26      	ldr	r3, [pc, #152]	; (40105c <start_sampling+0xf4>)
  400fc4:	681a      	ldr	r2, [r3, #0]
  400fc6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  400fca:	4b25      	ldr	r3, [pc, #148]	; (401060 <start_sampling+0xf8>)
  400fcc:	f603 15d8 	addw	r5, r3, #2520	; 0x9d8
		descriptor_pointers[i].ul_source_addr = (uint32_t) 0x400E0E00 + 0x003C;
  400fd0:	481f      	ldr	r0, [pc, #124]	; (401050 <start_sampling+0xe8>)
		descriptor_pointers[i].ul_ctrlA = ul_ctrlA;
  400fd2:	f843 1c0c 	str.w	r1, [r3, #-12]
		descriptor_pointers[i].ul_ctrlB = ul_ctrlB;
  400fd6:	f843 4c08 	str.w	r4, [r3, #-8]
		descriptor_pointers[i].ul_source_addr = (uint32_t) 0x400E0E00 + 0x003C;
  400fda:	f843 0c14 	str.w	r0, [r3, #-20]
		descriptor_pointers[i].ul_destination_addr = (uint32_t) (g_dma_buf + i * num_samples_to_sample);
  400fde:	f843 2c10 	str.w	r2, [r3, #-16]
		descriptor_pointers[i].ul_descriptor_addr = descriptor_pointers + i + 1;
  400fe2:	f843 3c04 	str.w	r3, [r3, #-4]
  400fe6:	4432      	add	r2, r6
  400fe8:	3314      	adds	r3, #20
	for(i = 2; i < 128; i++){
  400fea:	42ab      	cmp	r3, r5
  400fec:	d1f1      	bne.n	400fd2 <start_sampling+0x6a>
	descriptor_pointers[127].ul_descriptor_addr = 0;
  400fee:	2400      	movs	r4, #0
  400ff0:	4b1c      	ldr	r3, [pc, #112]	; (401064 <start_sampling+0xfc>)
  400ff2:	f8c3 49fc 	str.w	r4, [r3, #2556]	; 0x9fc
	dmac_channel_multi_buf_transfer_init(DMAC, DMA_CH, &desc1);
  400ff6:	4d0f      	ldr	r5, [pc, #60]	; (401034 <start_sampling+0xcc>)
  400ff8:	4a14      	ldr	r2, [pc, #80]	; (40104c <start_sampling+0xe4>)
  400ffa:	4621      	mov	r1, r4
  400ffc:	4628      	mov	r0, r5
  400ffe:	4b1a      	ldr	r3, [pc, #104]	; (401068 <start_sampling+0x100>)
  401000:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401002:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401006:	4b19      	ldr	r3, [pc, #100]	; (40106c <start_sampling+0x104>)
  401008:	601a      	str	r2, [r3, #0]
	dmac_enable_interrupt(DMAC, (DMAC_EBCIER_CBTC0 << DMA_CH | DMAC_EBCIDR_BTC0  << DMA_CH));
  40100a:	f240 1101 	movw	r1, #257	; 0x101
  40100e:	4628      	mov	r0, r5
  401010:	4b17      	ldr	r3, [pc, #92]	; (401070 <start_sampling+0x108>)
  401012:	4798      	blx	r3
	g_xfer_done = 0;
  401014:	4b17      	ldr	r3, [pc, #92]	; (401074 <start_sampling+0x10c>)
  401016:	601c      	str	r4, [r3, #0]
	dmac_channel_enable(DMAC, DMA_CH);
  401018:	4621      	mov	r1, r4
  40101a:	4628      	mov	r0, r5
  40101c:	4b16      	ldr	r3, [pc, #88]	; (401078 <start_sampling+0x110>)
  40101e:	4798      	blx	r3
	while (!g_xfer_done) {
  401020:	4a14      	ldr	r2, [pc, #80]	; (401074 <start_sampling+0x10c>)
  401022:	6813      	ldr	r3, [r2, #0]
  401024:	2b00      	cmp	r3, #0
  401026:	d0fc      	beq.n	401022 <start_sampling+0xba>
	state = 1;
  401028:	2201      	movs	r2, #1
  40102a:	4b14      	ldr	r3, [pc, #80]	; (40107c <start_sampling+0x114>)
  40102c:	601a      	str	r2, [r3, #0]
  40102e:	bd70      	pop	{r4, r5, r6, pc}
  401030:	00400a81 	.word	0x00400a81
  401034:	400c0000 	.word	0x400c0000
  401038:	00400849 	.word	0x00400849
  40103c:	00400853 	.word	0x00400853
  401040:	0040085f 	.word	0x0040085f
  401044:	00400883 	.word	0x00400883
  401048:	20000010 	.word	0x20000010
  40104c:	20000aac 	.word	0x20000aac
  401050:	400e0e3c 	.word	0x400e0e3c
  401054:	20000af8 	.word	0x20000af8
  401058:	20000ac0 	.word	0x20000ac0
  40105c:	20000008 	.word	0x20000008
  401060:	20000b3c 	.word	0x20000b3c
  401064:	20000b00 	.word	0x20000b00
  401068:	0040088f 	.word	0x0040088f
  40106c:	e000e100 	.word	0xe000e100
  401070:	00400865 	.word	0x00400865
  401074:	20000a5c 	.word	0x20000a5c
  401078:	0040086d 	.word	0x0040086d
  40107c:	20000a60 	.word	0x20000a60

00401080 <check_trigger_behavior>:
int8_t check_trigger_behavior(uint16_t first_pins, uint16_t last_pins){
  401080:	b470      	push	{r4, r5, r6}
	for(i = 0; i < 16; i++){
  401082:	2300      	movs	r3, #0
		if(trigger_values[i] != 2){
  401084:	4d0f      	ldr	r5, [pc, #60]	; (4010c4 <check_trigger_behavior+0x44>)
  401086:	e002      	b.n	40108e <check_trigger_behavior+0xe>
	for(i = 0; i < 16; i++){
  401088:	3301      	adds	r3, #1
  40108a:	2b10      	cmp	r3, #16
  40108c:	d015      	beq.n	4010ba <check_trigger_behavior+0x3a>
		if(trigger_values[i] != 2){
  40108e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  401092:	b292      	uxth	r2, r2
  401094:	2a02      	cmp	r2, #2
  401096:	d0f7      	beq.n	401088 <check_trigger_behavior+0x8>
			if(((last_pins>>i) & 1) != trigger_values[i] || ((last_pins>>i) & 1) == ((first_pins>>i) & 1)){
  401098:	fa41 f403 	asr.w	r4, r1, r3
  40109c:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  4010a0:	b292      	uxth	r2, r2
  4010a2:	f004 0601 	and.w	r6, r4, #1
  4010a6:	4296      	cmp	r6, r2
  4010a8:	d10a      	bne.n	4010c0 <check_trigger_behavior+0x40>
  4010aa:	fa40 f203 	asr.w	r2, r0, r3
  4010ae:	4062      	eors	r2, r4
  4010b0:	f012 0f01 	tst.w	r2, #1
  4010b4:	d1e8      	bne.n	401088 <check_trigger_behavior+0x8>
				return 0;
  4010b6:	2000      	movs	r0, #0
  4010b8:	e000      	b.n	4010bc <check_trigger_behavior+0x3c>
	return 1;
  4010ba:	2001      	movs	r0, #1
}
  4010bc:	bc70      	pop	{r4, r5, r6}
  4010be:	4770      	bx	lr
				return 0;
  4010c0:	2000      	movs	r0, #0
  4010c2:	e7fb      	b.n	4010bc <check_trigger_behavior+0x3c>
  4010c4:	20000ad8 	.word	0x20000ad8

004010c8 <DMAC_Handler>:
{
  4010c8:	b510      	push	{r4, lr}
	if(!swapped){
  4010ca:	4b29      	ldr	r3, [pc, #164]	; (401170 <DMAC_Handler+0xa8>)
  4010cc:	681b      	ldr	r3, [r3, #0]
  4010ce:	2b00      	cmp	r3, #0
  4010d0:	d13b      	bne.n	40114a <DMAC_Handler+0x82>
		buffer_number = !buffer_number;
  4010d2:	4a28      	ldr	r2, [pc, #160]	; (401174 <DMAC_Handler+0xac>)
  4010d4:	6813      	ldr	r3, [r2, #0]
  4010d6:	fab3 f383 	clz	r3, r3
  4010da:	095b      	lsrs	r3, r3, #5
  4010dc:	6013      	str	r3, [r2, #0]
	if(swapped == 0 && check_trigger_behavior(get_16_pin_inputs(waiting_buffers[buffer_number][0]),get_16_pin_inputs(waiting_buffers[buffer_number][num_samples_to_sample-1]))){
  4010de:	6813      	ldr	r3, [r2, #0]
  4010e0:	4925      	ldr	r1, [pc, #148]	; (401178 <DMAC_Handler+0xb0>)
  4010e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	6810      	ldr	r0, [r2, #0]
  4010ea:	4a24      	ldr	r2, [pc, #144]	; (40117c <DMAC_Handler+0xb4>)
  4010ec:	6812      	ldr	r2, [r2, #0]
  4010ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  4010f2:	3a01      	subs	r2, #1
  4010f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4010f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	uint16_t first4 = 0b1111 & (sampled_int >> 3);
  4010fc:	f3c2 01c3 	ubfx	r1, r2, #3, #4
	uint16_t second7 = 0b11111110000 & (sampled_int >> 7);
  401100:	09d0      	lsrs	r0, r2, #7
  401102:	f400 60fe 	and.w	r0, r0, #2032	; 0x7f0
	return first4|second7|third2|fourth2|last;
  401106:	4301      	orrs	r1, r0
	uint16_t third2 = 0b1100000000000 & (sampled_int >> 10);
  401108:	0a90      	lsrs	r0, r2, #10
  40110a:	f400 50c0 	and.w	r0, r0, #6144	; 0x1800
	return first4|second7|third2|fourth2|last;
  40110e:	4301      	orrs	r1, r0
	uint16_t fourth2 = 0b110000000000000 & (sampled_int >> 11);
  401110:	0ad0      	lsrs	r0, r2, #11
  401112:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
	return first4|second7|third2|fourth2|last;
  401116:	4301      	orrs	r1, r0
	uint16_t last = 0b1000000000000000 & (sampled_int >> 14);
  401118:	0b92      	lsrs	r2, r2, #14
	return first4|second7|third2|fourth2|last;
  40111a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
	uint16_t first4 = 0b1111 & (sampled_int >> 3);
  40111e:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	uint16_t second7 = 0b11111110000 & (sampled_int >> 7);
  401122:	09dc      	lsrs	r4, r3, #7
  401124:	f404 64fe 	and.w	r4, r4, #2032	; 0x7f0
	return first4|second7|third2|fourth2|last;
  401128:	4320      	orrs	r0, r4
	uint16_t third2 = 0b1100000000000 & (sampled_int >> 10);
  40112a:	0a9c      	lsrs	r4, r3, #10
  40112c:	f404 54c0 	and.w	r4, r4, #6144	; 0x1800
	return first4|second7|third2|fourth2|last;
  401130:	4320      	orrs	r0, r4
	uint16_t fourth2 = 0b110000000000000 & (sampled_int >> 11);
  401132:	0adc      	lsrs	r4, r3, #11
  401134:	f404 44c0 	and.w	r4, r4, #24576	; 0x6000
	return first4|second7|third2|fourth2|last;
  401138:	4320      	orrs	r0, r4
	uint16_t last = 0b1000000000000000 & (sampled_int >> 14);
  40113a:	0b9b      	lsrs	r3, r3, #14
	return first4|second7|third2|fourth2|last;
  40113c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
	if(swapped == 0 && check_trigger_behavior(get_16_pin_inputs(waiting_buffers[buffer_number][0]),get_16_pin_inputs(waiting_buffers[buffer_number][num_samples_to_sample-1]))){
  401140:	4311      	orrs	r1, r2
  401142:	4318      	orrs	r0, r3
  401144:	4b0e      	ldr	r3, [pc, #56]	; (401180 <DMAC_Handler+0xb8>)
  401146:	4798      	blx	r3
  401148:	b948      	cbnz	r0, 40115e <DMAC_Handler+0x96>
	dma_status = dmac_get_status(DMAC);
  40114a:	480e      	ldr	r0, [pc, #56]	; (401184 <DMAC_Handler+0xbc>)
  40114c:	4b0e      	ldr	r3, [pc, #56]	; (401188 <DMAC_Handler+0xc0>)
  40114e:	4798      	blx	r3
	if (dma_status & (DMAC_EBCIER_CBTC0 << DMA_CH)) {
  401150:	f410 7f80 	tst.w	r0, #256	; 0x100
  401154:	d002      	beq.n	40115c <DMAC_Handler+0x94>
		g_xfer_done = 1;
  401156:	2201      	movs	r2, #1
  401158:	4b0c      	ldr	r3, [pc, #48]	; (40118c <DMAC_Handler+0xc4>)
  40115a:	601a      	str	r2, [r3, #0]
  40115c:	bd10      	pop	{r4, pc}
		dmac_channel_set_descriptor_addr(DMAC,DMA_CH,descriptor_pointers+2);
  40115e:	4a0c      	ldr	r2, [pc, #48]	; (401190 <DMAC_Handler+0xc8>)
  401160:	2100      	movs	r1, #0
  401162:	4808      	ldr	r0, [pc, #32]	; (401184 <DMAC_Handler+0xbc>)
  401164:	4b0b      	ldr	r3, [pc, #44]	; (401194 <DMAC_Handler+0xcc>)
  401166:	4798      	blx	r3
		swapped = 1;
  401168:	2201      	movs	r2, #1
  40116a:	4b01      	ldr	r3, [pc, #4]	; (401170 <DMAC_Handler+0xa8>)
  40116c:	601a      	str	r2, [r3, #0]
  40116e:	e7ec      	b.n	40114a <DMAC_Handler+0x82>
  401170:	20000ad4 	.word	0x20000ad4
  401174:	20001500 	.word	0x20001500
  401178:	20000af8 	.word	0x20000af8
  40117c:	20000010 	.word	0x20000010
  401180:	00401081 	.word	0x00401081
  401184:	400c0000 	.word	0x400c0000
  401188:	00400869 	.word	0x00400869
  40118c:	20000a5c 	.word	0x20000a5c
  401190:	20000b28 	.word	0x20000b28
  401194:	00400877 	.word	0x00400877

00401198 <SysTick_Handler>:
	g_ul_ms_ticks++;
  401198:	4a02      	ldr	r2, [pc, #8]	; (4011a4 <SysTick_Handler+0xc>)
  40119a:	6813      	ldr	r3, [r2, #0]
  40119c:	3301      	adds	r3, #1
  40119e:	6013      	str	r3, [r2, #0]
  4011a0:	4770      	bx	lr
  4011a2:	bf00      	nop
  4011a4:	20000a58 	.word	0x20000a58

004011a8 <embedded_controller>:
void embedded_controller(){
  4011a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011ac:	b082      	sub	sp, #8
	state = 0;
  4011ae:	2500      	movs	r5, #0
  4011b0:	4b68      	ldr	r3, [pc, #416]	; (401354 <embedded_controller+0x1ac>)
  4011b2:	601d      	str	r5, [r3, #0]
		switch(state){
  4011b4:	4698      	mov	r8, r3
				for(i = 0; i < num_samples_to_sample * 128;i++){
  4011b6:	4c68      	ldr	r4, [pc, #416]	; (401358 <embedded_controller+0x1b0>)
					transitionData[i] = 0;
  4011b8:	4e68      	ldr	r6, [pc, #416]	; (40135c <embedded_controller+0x1b4>)
  4011ba:	e07f      	b.n	4012bc <embedded_controller+0x114>
  4011bc:	2400      	movs	r4, #0
				while(!check_trigger_behavior(g_sampledpins_buf[0],g_sampledpins_buf[start])){
  4011be:	4f68      	ldr	r7, [pc, #416]	; (401360 <embedded_controller+0x1b8>)
  4011c0:	4e68      	ldr	r6, [pc, #416]	; (401364 <embedded_controller+0x1bc>)
  4011c2:	e086      	b.n	4012d2 <embedded_controller+0x12a>
				for(i = 0; i < num_samples_to_sample * 128;i++){
  4011c4:	6822      	ldr	r2, [r4, #0]
  4011c6:	01d2      	lsls	r2, r2, #7
  4011c8:	2a00      	cmp	r2, #0
  4011ca:	dd0a      	ble.n	4011e2 <embedded_controller+0x3a>
  4011cc:	461a      	mov	r2, r3
					g_dma_buf[i] = 0;
  4011ce:	4966      	ldr	r1, [pc, #408]	; (401368 <embedded_controller+0x1c0>)
  4011d0:	2000      	movs	r0, #0
  4011d2:	680f      	ldr	r7, [r1, #0]
  4011d4:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
				for(i = 0; i < num_samples_to_sample * 128;i++){
  4011d8:	3201      	adds	r2, #1
  4011da:	6827      	ldr	r7, [r4, #0]
  4011dc:	ebb2 1fc7 	cmp.w	r2, r7, lsl #7
  4011e0:	dbf7      	blt.n	4011d2 <embedded_controller+0x2a>
				for(i = 0; i < num_samples_to_sample * 128 * 4;i++){
  4011e2:	6822      	ldr	r2, [r4, #0]
  4011e4:	0251      	lsls	r1, r2, #9
  4011e6:	2900      	cmp	r1, #0
  4011e8:	dd07      	ble.n	4011fa <embedded_controller+0x52>
					transitionData[i] = 0;
  4011ea:	2100      	movs	r1, #0
  4011ec:	6832      	ldr	r2, [r6, #0]
  4011ee:	54d1      	strb	r1, [r2, r3]
				for(i = 0; i < num_samples_to_sample * 128 * 4;i++){
  4011f0:	3301      	adds	r3, #1
  4011f2:	6822      	ldr	r2, [r4, #0]
  4011f4:	ebb3 2f42 	cmp.w	r3, r2, lsl #9
  4011f8:	dbf8      	blt.n	4011ec <embedded_controller+0x44>
				buffer_number = 1;
  4011fa:	2101      	movs	r1, #1
  4011fc:	4b5b      	ldr	r3, [pc, #364]	; (40136c <embedded_controller+0x1c4>)
  4011fe:	6019      	str	r1, [r3, #0]
				transition_index = 0;
  401200:	2300      	movs	r3, #0
  401202:	495b      	ldr	r1, [pc, #364]	; (401370 <embedded_controller+0x1c8>)
  401204:	600b      	str	r3, [r1, #0]
				num_times_in_handler = -1;
  401206:	f04f 30ff 	mov.w	r0, #4294967295
  40120a:	495a      	ldr	r1, [pc, #360]	; (401374 <embedded_controller+0x1cc>)
  40120c:	6008      	str	r0, [r1, #0]
				swapped = 0;
  40120e:	495a      	ldr	r1, [pc, #360]	; (401378 <embedded_controller+0x1d0>)
  401210:	600b      	str	r3, [r1, #0]
				waiting_buffers[0] = g_dma_buf;
  401212:	4b55      	ldr	r3, [pc, #340]	; (401368 <embedded_controller+0x1c0>)
  401214:	681b      	ldr	r3, [r3, #0]
  401216:	4959      	ldr	r1, [pc, #356]	; (40137c <embedded_controller+0x1d4>)
  401218:	600b      	str	r3, [r1, #0]
				waiting_buffers[1] = g_dma_buf + num_samples_to_sample;
  40121a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  40121e:	604a      	str	r2, [r1, #4]
				start_sampling();
  401220:	4b57      	ldr	r3, [pc, #348]	; (401380 <embedded_controller+0x1d8>)
  401222:	4798      	blx	r3
				if(buffer_number){
  401224:	4b51      	ldr	r3, [pc, #324]	; (40136c <embedded_controller+0x1c4>)
  401226:	681b      	ldr	r3, [r3, #0]
  401228:	b1cb      	cbz	r3, 40125e <embedded_controller+0xb6>
					for(i = 0; i < num_samples_to_sample; i++){
  40122a:	6823      	ldr	r3, [r4, #0]
  40122c:	2b00      	cmp	r3, #0
  40122e:	dd16      	ble.n	40125e <embedded_controller+0xb6>
  401230:	2300      	movs	r3, #0
						uint32_t temp = waiting_buffers[buffer_number][i];
  401232:	f8df c138 	ldr.w	ip, [pc, #312]	; 40136c <embedded_controller+0x1c4>
  401236:	4a51      	ldr	r2, [pc, #324]	; (40137c <embedded_controller+0x1d4>)
  401238:	f8dc 1000 	ldr.w	r1, [ip]
  40123c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
  401240:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
						waiting_buffers[1][i] = waiting_buffers[0][i];
  401244:	6810      	ldr	r0, [r2, #0]
  401246:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  40124a:	6857      	ldr	r7, [r2, #4]
  40124c:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
						waiting_buffers[0][i] = temp;
  401250:	6810      	ldr	r0, [r2, #0]
  401252:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					for(i = 0; i < num_samples_to_sample; i++){
  401256:	3301      	adds	r3, #1
  401258:	6821      	ldr	r1, [r4, #0]
  40125a:	4299      	cmp	r1, r3
  40125c:	dcec      	bgt.n	401238 <embedded_controller+0x90>
				for(i = 0; i < num_samples_to_sample*128; i++){
  40125e:	6823      	ldr	r3, [r4, #0]
  401260:	01db      	lsls	r3, r3, #7
  401262:	2b00      	cmp	r3, #0
  401264:	dd27      	ble.n	4012b6 <embedded_controller+0x10e>
  401266:	2100      	movs	r1, #0
					g_sampledpins_buf[i] = get_16_pin_inputs(g_dma_buf[i]);
  401268:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 401368 <embedded_controller+0x1c0>
  40126c:	483c      	ldr	r0, [pc, #240]	; (401360 <embedded_controller+0x1b8>)
  40126e:	f8de 3000 	ldr.w	r3, [lr]
  401272:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	uint16_t first4 = 0b1111 & (sampled_int >> 3);
  401276:	f3c2 03c3 	ubfx	r3, r2, #3, #4
	uint16_t second7 = 0b11111110000 & (sampled_int >> 7);
  40127a:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  40127e:	f40c 6cfe 	and.w	ip, ip, #2032	; 0x7f0
	return first4|second7|third2|fourth2|last;
  401282:	ea43 030c 	orr.w	r3, r3, ip
	uint16_t third2 = 0b1100000000000 & (sampled_int >> 10);
  401286:	ea4f 2c92 	mov.w	ip, r2, lsr #10
  40128a:	f40c 5cc0 	and.w	ip, ip, #6144	; 0x1800
	return first4|second7|third2|fourth2|last;
  40128e:	ea43 030c 	orr.w	r3, r3, ip
	uint16_t fourth2 = 0b110000000000000 & (sampled_int >> 11);
  401292:	ea4f 2cd2 	mov.w	ip, r2, lsr #11
  401296:	f40c 4cc0 	and.w	ip, ip, #24576	; 0x6000
	return first4|second7|third2|fourth2|last;
  40129a:	ea43 030c 	orr.w	r3, r3, ip
	uint16_t last = 0b1000000000000000 & (sampled_int >> 14);
  40129e:	0b92      	lsrs	r2, r2, #14
  4012a0:	f402 3260 	and.w	r2, r2, #229376	; 0x38000
	return first4|second7|third2|fourth2|last;
  4012a4:	4313      	orrs	r3, r2
					g_sampledpins_buf[i] = get_16_pin_inputs(g_dma_buf[i]);
  4012a6:	6802      	ldr	r2, [r0, #0]
  4012a8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
				for(i = 0; i < num_samples_to_sample*128; i++){
  4012ac:	3101      	adds	r1, #1
  4012ae:	6823      	ldr	r3, [r4, #0]
  4012b0:	ebb1 1fc3 	cmp.w	r1, r3, lsl #7
  4012b4:	dbdb      	blt.n	40126e <embedded_controller+0xc6>
				state = 2;
  4012b6:	2302      	movs	r3, #2
  4012b8:	f8c8 3000 	str.w	r3, [r8]
		switch(state){
  4012bc:	f8d8 3000 	ldr.w	r3, [r8]
  4012c0:	2b01      	cmp	r3, #1
  4012c2:	d0af      	beq.n	401224 <embedded_controller+0x7c>
  4012c4:	2b02      	cmp	r3, #2
  4012c6:	f43f af79 	beq.w	4011bc <embedded_controller+0x14>
  4012ca:	2b00      	cmp	r3, #0
  4012cc:	d1f8      	bne.n	4012c0 <embedded_controller+0x118>
  4012ce:	e779      	b.n	4011c4 <embedded_controller+0x1c>
					start += 1;
  4012d0:	3501      	adds	r5, #1
				while(!check_trigger_behavior(g_sampledpins_buf[0],g_sampledpins_buf[start])){
  4012d2:	683b      	ldr	r3, [r7, #0]
  4012d4:	5b19      	ldrh	r1, [r3, r4]
  4012d6:	8818      	ldrh	r0, [r3, #0]
  4012d8:	47b0      	blx	r6
  4012da:	3402      	adds	r4, #2
  4012dc:	2800      	cmp	r0, #0
  4012de:	d0f7      	beq.n	4012d0 <embedded_controller+0x128>
				for(i = start; i < num_samples_to_sample*128; i+= 16){
  4012e0:	4b1d      	ldr	r3, [pc, #116]	; (401358 <embedded_controller+0x1b0>)
  4012e2:	681b      	ldr	r3, [r3, #0]
  4012e4:	ebb5 1fc3 	cmp.w	r5, r3, lsl #7
  4012e8:	da15      	bge.n	401316 <embedded_controller+0x16e>
  4012ea:	006c      	lsls	r4, r5, #1
					char a = ~((char)g_sampledpins_buf[i]);
  4012ec:	f8df 8070 	ldr.w	r8, [pc, #112]	; 401360 <embedded_controller+0x1b8>
					printf("%c%c",b,a);
  4012f0:	4f24      	ldr	r7, [pc, #144]	; (401384 <embedded_controller+0x1dc>)
  4012f2:	4e25      	ldr	r6, [pc, #148]	; (401388 <embedded_controller+0x1e0>)
					char a = ~((char)g_sampledpins_buf[i]);
  4012f4:	f8d8 3000 	ldr.w	r3, [r8]
  4012f8:	5b19      	ldrh	r1, [r3, r4]
  4012fa:	43ca      	mvns	r2, r1
					char b = ~((char)(g_sampledpins_buf[i]>>8));
  4012fc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
					printf("%c%c",b,a);
  401300:	b2d2      	uxtb	r2, r2
  401302:	b2c9      	uxtb	r1, r1
  401304:	4638      	mov	r0, r7
  401306:	47b0      	blx	r6
				for(i = start; i < num_samples_to_sample*128; i+= 16){
  401308:	3510      	adds	r5, #16
  40130a:	3420      	adds	r4, #32
  40130c:	4b12      	ldr	r3, [pc, #72]	; (401358 <embedded_controller+0x1b0>)
  40130e:	681b      	ldr	r3, [r3, #0]
  401310:	ebb5 1fc3 	cmp.w	r5, r3, lsl #7
  401314:	dbee      	blt.n	4012f4 <embedded_controller+0x14c>
				printf("no more data || no more data || no more data");
  401316:	481d      	ldr	r0, [pc, #116]	; (40138c <embedded_controller+0x1e4>)
  401318:	4b1b      	ldr	r3, [pc, #108]	; (401388 <embedded_controller+0x1e0>)
  40131a:	4798      	blx	r3
  40131c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401320:	f24e 03fc 	movw	r3, #57596	; 0xe0fc
  401324:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  401326:	4b1a      	ldr	r3, [pc, #104]	; (401390 <embedded_controller+0x1e8>)
  401328:	4a1a      	ldr	r2, [pc, #104]	; (401394 <embedded_controller+0x1ec>)
  40132a:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40132c:	21f0      	movs	r1, #240	; 0xf0
  40132e:	4a1a      	ldr	r2, [pc, #104]	; (401398 <embedded_controller+0x1f0>)
  401330:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  401334:	2200      	movs	r2, #0
  401336:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  401338:	2107      	movs	r1, #7
  40133a:	6019      	str	r1, [r3, #0]
				volatile int error = SysTick_Config(sysclk_get_cpu_hz()/1000);
  40133c:	9201      	str	r2, [sp, #4]
	ul_cur_ticks = g_ul_ms_ticks;
  40133e:	4b17      	ldr	r3, [pc, #92]	; (40139c <embedded_controller+0x1f4>)
  401340:	6819      	ldr	r1, [r3, #0]
	- ul_cur_ticks) < ul_dly_ticks);
  401342:	461a      	mov	r2, r3
  401344:	6813      	ldr	r3, [r2, #0]
  401346:	1a5b      	subs	r3, r3, r1
	while ((g_ul_ms_ticks
  401348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40134c:	d3fa      	bcc.n	401344 <embedded_controller+0x19c>
}
  40134e:	b002      	add	sp, #8
  401350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401354:	20000a60 	.word	0x20000a60
  401358:	20000010 	.word	0x20000010
  40135c:	20000014 	.word	0x20000014
  401360:	2000000c 	.word	0x2000000c
  401364:	00401081 	.word	0x00401081
  401368:	20000008 	.word	0x20000008
  40136c:	20001500 	.word	0x20001500
  401370:	20001508 	.word	0x20001508
  401374:	20000aa8 	.word	0x20000aa8
  401378:	20000ad4 	.word	0x20000ad4
  40137c:	20000af8 	.word	0x20000af8
  401380:	00400f69 	.word	0x00400f69
  401384:	004047a4 	.word	0x004047a4
  401388:	004018d1 	.word	0x004018d1
  40138c:	004047ac 	.word	0x004047ac
  401390:	e000e010 	.word	0xe000e010
  401394:	000176ff 	.word	0x000176ff
  401398:	e000ed00 	.word	0xe000ed00
  40139c:	20000a58 	.word	0x20000a58

004013a0 <initialize_pins>:
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4013a0:	4b9e      	ldr	r3, [pc, #632]	; (40161c <initialize_pins+0x27c>)
  4013a2:	2208      	movs	r2, #8
  4013a4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4013aa:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4013ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  4013b0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013b2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4013ba:	f022 0208 	bic.w	r2, r2, #8
  4013be:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4013c2:	f022 0208 	bic.w	r2, r2, #8
  4013c6:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4013c8:	2210      	movs	r2, #16
  4013ca:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4013d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4013d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  4013d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4013e0:	f022 0210 	bic.w	r2, r2, #16
  4013e4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013e6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4013e8:	f022 0210 	bic.w	r2, r2, #16
  4013ec:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4013ee:	2220      	movs	r2, #32
  4013f0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4013f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4013f6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4013f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  4013fc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013fe:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401406:	f022 0220 	bic.w	r2, r2, #32
  40140a:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40140c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40140e:	f022 0220 	bic.w	r2, r2, #32
  401412:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401414:	2240      	movs	r2, #64	; 0x40
  401416:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401418:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40141c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  40141e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  401422:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401424:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40142a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40142c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  401430:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401432:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  401438:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40143a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40143e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401440:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  401444:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  401446:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  40144a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40144c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40144e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  401458:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40145a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40145c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  401460:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401466:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401468:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40146c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  40146e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  401472:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401474:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40147a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40147c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401480:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401482:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401484:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401488:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40148e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401490:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  401494:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  401496:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  40149a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40149c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40149e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4014a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4014a8:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4014aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4014b0:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4014b6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4014bc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4014be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  4014c2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4014c4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4014c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4014ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4014d0:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4014d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  4014d8:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4014da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4014de:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4014e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4014e4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4014e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  4014ea:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4014ec:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4014ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4014f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  4014f8:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4014fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  401500:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401506:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401508:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40150c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  40150e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  401512:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401514:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40151a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40151c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  401520:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401522:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401524:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  401528:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40152a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40152e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401530:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  401534:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  401536:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  40153a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40153c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40153e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401544:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  401548:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40154a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40154c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  401550:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401556:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  40155c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  40155e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  401562:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401564:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40156a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40156c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401570:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401572:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401574:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  401578:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40157a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40157e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401580:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  401584:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  401586:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  40158a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40158c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40158e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401594:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  401598:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40159a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40159c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4015a0:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4015a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4015a6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4015a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4015ac:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4015ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  4015b2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4015b4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4015b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4015ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4015bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4015c0:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4015c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4015c4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4015c8:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4015ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4015ce:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4015d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4015d4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4015d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  4015da:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4015dc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4015de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4015e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4015e4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  4015e8:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4015ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4015ec:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
  4015f0:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4015f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015f6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4015f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4015fc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDER = mask;
  4015fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		base->PIO_MDDR = mask;
  401602:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401604:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40160a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40160c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  401610:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401612:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401614:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  401618:	675a      	str	r2, [r3, #116]	; 0x74
  40161a:	4770      	bx	lr
  40161c:	400e0e00 	.word	0x400e0e00

00401620 <main>:

/**
 * \brief Main application
 */
int main(void)
{
  401620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401624:	b0b6      	sub	sp, #216	; 0xd8
	/* Initialize the SAM system */
	sysclk_init();
  401626:	4b74      	ldr	r3, [pc, #464]	; (4017f8 <main+0x1d8>)
  401628:	4798      	blx	r3

	/* Initialize the board */
	board_init();
  40162a:	4b74      	ldr	r3, [pc, #464]	; (4017fc <main+0x1dc>)
  40162c:	4798      	blx	r3
  40162e:	2007      	movs	r0, #7
  401630:	4d73      	ldr	r5, [pc, #460]	; (401800 <main+0x1e0>)
  401632:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401634:	4c73      	ldr	r4, [pc, #460]	; (401804 <main+0x1e4>)
  401636:	4b74      	ldr	r3, [pc, #464]	; (401808 <main+0x1e8>)
  401638:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40163a:	4a74      	ldr	r2, [pc, #464]	; (40180c <main+0x1ec>)
  40163c:	4b74      	ldr	r3, [pc, #464]	; (401810 <main+0x1f0>)
  40163e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401640:	4a74      	ldr	r2, [pc, #464]	; (401814 <main+0x1f4>)
  401642:	4b75      	ldr	r3, [pc, #468]	; (401818 <main+0x1f8>)
  401644:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  401646:	4b75      	ldr	r3, [pc, #468]	; (40181c <main+0x1fc>)
  401648:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  40164a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40164e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  401650:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401654:	9302      	str	r3, [sp, #8]
  401656:	2007      	movs	r0, #7
  401658:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  40165a:	4669      	mov	r1, sp
  40165c:	4620      	mov	r0, r4
  40165e:	4b70      	ldr	r3, [pc, #448]	; (401820 <main+0x200>)
  401660:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401662:	4d70      	ldr	r5, [pc, #448]	; (401824 <main+0x204>)
  401664:	682b      	ldr	r3, [r5, #0]
  401666:	2100      	movs	r1, #0
  401668:	6898      	ldr	r0, [r3, #8]
  40166a:	4c6f      	ldr	r4, [pc, #444]	; (401828 <main+0x208>)
  40166c:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40166e:	682b      	ldr	r3, [r5, #0]
  401670:	2100      	movs	r1, #0
  401672:	6858      	ldr	r0, [r3, #4]
  401674:	47a0      	blx	r4
	configure_console();
	
	char uc_key[200];
	
	
	initialize_pins();
  401676:	4b6d      	ldr	r3, [pc, #436]	; (40182c <main+0x20c>)
  401678:	4798      	blx	r3
	int prevValue = 0;
	
	int i;
	for(i = 0; i < 16; i++){
  40167a:	2300      	movs	r3, #0
		trigger_values[i] = 2;
  40167c:	496c      	ldr	r1, [pc, #432]	; (401830 <main+0x210>)
  40167e:	2202      	movs	r2, #2
  401680:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(i = 0; i < 16; i++){
  401684:	3301      	adds	r3, #1
  401686:	2b10      	cmp	r3, #16
  401688:	d1fa      	bne.n	401680 <main+0x60>
  40168a:	f10d 030f 	add.w	r3, sp, #15
  40168e:	f10d 01d7 	add.w	r1, sp, #215	; 0xd7
	}
	for(i = 0; i < 200;i++){
		uc_key[i] = 0;
  401692:	2200      	movs	r2, #0
  401694:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i = 0; i < 200;i++){
  401698:	4299      	cmp	r1, r3
  40169a:	d1fb      	bne.n	401694 <main+0x74>
	}
	volatile int numchars = 0;
  40169c:	2300      	movs	r3, #0
  40169e:	9303      	str	r3, [sp, #12]
	uc_key[0] = '0';
  4016a0:	2330      	movs	r3, #48	; 0x30
  4016a2:	f88d 3010 	strb.w	r3, [sp, #16]
		while (uart_read((Uart*)p_usart, data));
  4016a6:	4e63      	ldr	r6, [pc, #396]	; (401834 <main+0x214>)
  4016a8:	4d56      	ldr	r5, [pc, #344]	; (401804 <main+0x1e4>)
	while(numchars == 0 || uc_key[numchars-1] != ';'){
  4016aa:	e00d      	b.n	4016c8 <main+0xa8>
		usart_serial_getchar((Usart *)CONSOLE_UART, uc_key + numchars);
  4016ac:	9c03      	ldr	r4, [sp, #12]
  4016ae:	ab04      	add	r3, sp, #16
  4016b0:	441c      	add	r4, r3
  4016b2:	4621      	mov	r1, r4
  4016b4:	4628      	mov	r0, r5
  4016b6:	47b0      	blx	r6
  4016b8:	2800      	cmp	r0, #0
  4016ba:	d1fa      	bne.n	4016b2 <main+0x92>
		//printf("%c",uc_key[numchars]);
		if(uc_key[numchars] != 0){
  4016bc:	9b03      	ldr	r3, [sp, #12]
  4016be:	aa36      	add	r2, sp, #216	; 0xd8
  4016c0:	4413      	add	r3, r2
  4016c2:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
  4016c6:	bb23      	cbnz	r3, 401712 <main+0xf2>
	while(numchars == 0 || uc_key[numchars-1] != ';'){
  4016c8:	9b03      	ldr	r3, [sp, #12]
  4016ca:	2b00      	cmp	r3, #0
  4016cc:	d0ee      	beq.n	4016ac <main+0x8c>
  4016ce:	9b03      	ldr	r3, [sp, #12]
  4016d0:	aa36      	add	r2, sp, #216	; 0xd8
  4016d2:	4413      	add	r3, r2
  4016d4:	f813 3cc9 	ldrb.w	r3, [r3, #-201]
  4016d8:	2b3b      	cmp	r3, #59	; 0x3b
  4016da:	d1e7      	bne.n	4016ac <main+0x8c>
			numchars ++;
		}
	}
	uc_key[numchars] = '\0';
  4016dc:	9b03      	ldr	r3, [sp, #12]
  4016de:	4413      	add	r3, r2
  4016e0:	2200      	movs	r2, #0
  4016e2:	f803 2cc8 	strb.w	r2, [r3, #-200]
	
	i = 0;
	output_voltage = atoi(uc_key);
  4016e6:	a804      	add	r0, sp, #16
  4016e8:	4b53      	ldr	r3, [pc, #332]	; (401838 <main+0x218>)
  4016ea:	4798      	blx	r3
  4016ec:	4b53      	ldr	r3, [pc, #332]	; (40183c <main+0x21c>)
  4016ee:	6018      	str	r0, [r3, #0]
	while(uc_key[i] != '\n'){
  4016f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4016f4:	2b0a      	cmp	r3, #10
  4016f6:	d010      	beq.n	40171a <main+0xfa>
  4016f8:	ab04      	add	r3, sp, #16
  4016fa:	2400      	movs	r4, #0
		i++;
  4016fc:	3401      	adds	r4, #1
	while(uc_key[i] != '\n'){
  4016fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  401702:	2a0a      	cmp	r2, #10
  401704:	d1fa      	bne.n	4016fc <main+0xdc>
	}
	i++;
  401706:	3401      	adds	r4, #1
	int j;
	for(j = 0; j < 16; j++){
  401708:	2600      	movs	r6, #0
		trigger_values[j] = atoi(uc_key+i);
  40170a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 401838 <main+0x218>
  40170e:	4f48      	ldr	r7, [pc, #288]	; (401830 <main+0x210>)
  401710:	e009      	b.n	401726 <main+0x106>
			numchars ++;
  401712:	9b03      	ldr	r3, [sp, #12]
  401714:	3301      	adds	r3, #1
  401716:	9303      	str	r3, [sp, #12]
  401718:	e7d6      	b.n	4016c8 <main+0xa8>
	i = 0;
  40171a:	2400      	movs	r4, #0
  40171c:	e7f3      	b.n	401706 <main+0xe6>
		while(uc_key[i] != ',' && uc_key[i] != ';'){
			i++;
		}
		i++;
  40171e:	3401      	adds	r4, #1
	for(j = 0; j < 16; j++){
  401720:	3601      	adds	r6, #1
  401722:	2e10      	cmp	r6, #16
  401724:	d017      	beq.n	401756 <main+0x136>
		trigger_values[j] = atoi(uc_key+i);
  401726:	ab04      	add	r3, sp, #16
  401728:	1918      	adds	r0, r3, r4
  40172a:	47c0      	blx	r8
  40172c:	b280      	uxth	r0, r0
  40172e:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
		while(uc_key[i] != ',' && uc_key[i] != ';'){
  401732:	ab36      	add	r3, sp, #216	; 0xd8
  401734:	4423      	add	r3, r4
  401736:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
  40173a:	2b2c      	cmp	r3, #44	; 0x2c
  40173c:	d0ef      	beq.n	40171e <main+0xfe>
  40173e:	2b3b      	cmp	r3, #59	; 0x3b
  401740:	d0ed      	beq.n	40171e <main+0xfe>
  401742:	ab04      	add	r3, sp, #16
  401744:	191a      	adds	r2, r3, r4
			i++;
  401746:	3401      	adds	r4, #1
		while(uc_key[i] != ',' && uc_key[i] != ';'){
  401748:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40174c:	2b2c      	cmp	r3, #44	; 0x2c
  40174e:	d0e6      	beq.n	40171e <main+0xfe>
  401750:	2b3b      	cmp	r3, #59	; 0x3b
  401752:	d1f8      	bne.n	401746 <main+0x126>
  401754:	e7e3      	b.n	40171e <main+0xfe>
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401756:	4b3a      	ldr	r3, [pc, #232]	; (401840 <main+0x220>)
  401758:	2204      	movs	r2, #4
  40175a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40175c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401760:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401766:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401768:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40176a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40176e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401770:	f022 0204 	bic.w	r2, r2, #4
  401774:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401776:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401778:	f022 0204 	bic.w	r2, r2, #4
  40177c:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40177e:	4d31      	ldr	r5, [pc, #196]	; (401844 <main+0x224>)
  401780:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  401784:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401786:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);

	/* Enable PMC clock for SMC */
	pmc_enable_periph_clk(ID_SMC);
  40178a:	2008      	movs	r0, #8
  40178c:	4c1c      	ldr	r4, [pc, #112]	; (401800 <main+0x1e0>)
  40178e:	47a0      	blx	r4

	/* SMC configuration between SRAM and SMC waveforms. */
	configure_sram(SRAM_CHIP_SELECT);
  401790:	2001      	movs	r0, #1
  401792:	4f2d      	ldr	r7, [pc, #180]	; (401848 <main+0x228>)
  401794:	47b8      	blx	r7
	configure_sram(SRAM_CHIP_SELECT_2ND);
  401796:	2003      	movs	r0, #3
  401798:	47b8      	blx	r7
  40179a:	2020      	movs	r0, #32
  40179c:	47a0      	blx	r4
	
	// DAC stuff
		/* Enable clock for DACC */
	sysclk_enable_peripheral_clock(DACC_ID);
	/* Reset DACC registers */
	dacc_reset(DACC_BASE);
  40179e:	4c2b      	ldr	r4, [pc, #172]	; (40184c <main+0x22c>)
  4017a0:	4620      	mov	r0, r4
  4017a2:	4b2b      	ldr	r3, [pc, #172]	; (401850 <main+0x230>)
  4017a4:	4798      	blx	r3
	/* Half word transfer mode */
	dacc_set_transfer_mode(DACC_BASE, 0);
  4017a6:	2100      	movs	r1, #0
  4017a8:	4620      	mov	r0, r4
  4017aa:	4b2a      	ldr	r3, [pc, #168]	; (401854 <main+0x234>)
  4017ac:	4798      	blx	r3
	dacc_set_timing(DACC_BASE,0, 0x10);
  4017ae:	2210      	movs	r2, #16
  4017b0:	2100      	movs	r1, #0
  4017b2:	4620      	mov	r0, r4
  4017b4:	4b28      	ldr	r3, [pc, #160]	; (401858 <main+0x238>)
  4017b6:	4798      	blx	r3
	/* Disable TAG and select output channel DACC_CHANNEL */
	dacc_set_channel_selection(DACC_BASE, DACC_CHANNEL);
  4017b8:	2101      	movs	r1, #1
  4017ba:	4620      	mov	r0, r4
  4017bc:	4b27      	ldr	r3, [pc, #156]	; (40185c <main+0x23c>)
  4017be:	4798      	blx	r3
	/* Enable output channel DACC_CHANNEL */
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  4017c0:	2101      	movs	r1, #1
  4017c2:	4620      	mov	r0, r4
  4017c4:	4b26      	ldr	r3, [pc, #152]	; (401860 <main+0x240>)
  4017c6:	4798      	blx	r3

	/* Set up analog current */
	dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  4017c8:	f44f 7185 	mov.w	r1, #266	; 0x10a
  4017cc:	4620      	mov	r0, r4
  4017ce:	4b25      	ldr	r3, [pc, #148]	; (401864 <main+0x244>)
  4017d0:	4798      	blx	r3
	
	
	
	// max val is DACC_MAX_DATA
	// set the 3.3 here to change output voltage
	dacc_write_conversion_data(DACC_BASE, (uint32_t)(DACC_MAX_DATA * 1.9 / 3.3));
  4017d2:	f640 1135 	movw	r1, #2357	; 0x935
  4017d6:	4620      	mov	r0, r4
  4017d8:	4b23      	ldr	r3, [pc, #140]	; (401868 <main+0x248>)
  4017da:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4017dc:	636e      	str	r6, [r5, #52]	; 0x34
	//printf("%s",uc_key);
	//printf("no more data || no more data || no more data");
	//while(1);
	ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
		
	embedded_controller();
  4017de:	4b23      	ldr	r3, [pc, #140]	; (40186c <main+0x24c>)
  4017e0:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4017e2:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
		
	rstc_enable_user_reset((RSTC));
  4017e4:	f504 3426 	add.w	r4, r4, #169984	; 0x29800
  4017e8:	4620      	mov	r0, r4
  4017ea:	4b21      	ldr	r3, [pc, #132]	; (401870 <main+0x250>)
  4017ec:	4798      	blx	r3
	rstc_start_software_reset(RSTC);
  4017ee:	4620      	mov	r0, r4
  4017f0:	4b20      	ldr	r3, [pc, #128]	; (401874 <main+0x254>)
  4017f2:	4798      	blx	r3
  4017f4:	e7fe      	b.n	4017f4 <main+0x1d4>
  4017f6:	bf00      	nop
  4017f8:	00400165 	.word	0x00400165
  4017fc:	00400259 	.word	0x00400259
  401800:	00400a81 	.word	0x00400a81
  401804:	400e0600 	.word	0x400e0600
  401808:	20000aa0 	.word	0x20000aa0
  40180c:	00400e15 	.word	0x00400e15
  401810:	20000a9c 	.word	0x20000a9c
  401814:	00400e95 	.word	0x00400e95
  401818:	20000a98 	.word	0x20000a98
  40181c:	05b8d800 	.word	0x05b8d800
  401820:	00400af5 	.word	0x00400af5
  401824:	20000018 	.word	0x20000018
  401828:	00401995 	.word	0x00401995
  40182c:	004013a1 	.word	0x004013a1
  401830:	20000ad8 	.word	0x20000ad8
  401834:	00400b3d 	.word	0x00400b3d
  401838:	00401879 	.word	0x00401879
  40183c:	20001504 	.word	0x20001504
  401840:	400e0e00 	.word	0x400e0e00
  401844:	400e1400 	.word	0x400e1400
  401848:	00400f1d 	.word	0x00400f1d
  40184c:	400b8000 	.word	0x400b8000
  401850:	004007b9 	.word	0x004007b9
  401854:	004007bf 	.word	0x004007bf
  401858:	00400805 	.word	0x00400805
  40185c:	004007eb 	.word	0x004007eb
  401860:	0040082d 	.word	0x0040082d
  401864:	00400841 	.word	0x00400841
  401868:	004007e7 	.word	0x004007e7
  40186c:	004011a9 	.word	0x004011a9
  401870:	00400ad5 	.word	0x00400ad5
  401874:	00400ae9 	.word	0x00400ae9

00401878 <atoi>:
  401878:	220a      	movs	r2, #10
  40187a:	2100      	movs	r1, #0
  40187c:	f000 b9cc 	b.w	401c18 <strtol>

00401880 <__libc_init_array>:
  401880:	b570      	push	{r4, r5, r6, lr}
  401882:	4e0f      	ldr	r6, [pc, #60]	; (4018c0 <__libc_init_array+0x40>)
  401884:	4d0f      	ldr	r5, [pc, #60]	; (4018c4 <__libc_init_array+0x44>)
  401886:	1b76      	subs	r6, r6, r5
  401888:	10b6      	asrs	r6, r6, #2
  40188a:	bf18      	it	ne
  40188c:	2400      	movne	r4, #0
  40188e:	d005      	beq.n	40189c <__libc_init_array+0x1c>
  401890:	3401      	adds	r4, #1
  401892:	f855 3b04 	ldr.w	r3, [r5], #4
  401896:	4798      	blx	r3
  401898:	42a6      	cmp	r6, r4
  40189a:	d1f9      	bne.n	401890 <__libc_init_array+0x10>
  40189c:	4e0a      	ldr	r6, [pc, #40]	; (4018c8 <__libc_init_array+0x48>)
  40189e:	4d0b      	ldr	r5, [pc, #44]	; (4018cc <__libc_init_array+0x4c>)
  4018a0:	1b76      	subs	r6, r6, r5
  4018a2:	f003 f84f 	bl	404944 <_init>
  4018a6:	10b6      	asrs	r6, r6, #2
  4018a8:	bf18      	it	ne
  4018aa:	2400      	movne	r4, #0
  4018ac:	d006      	beq.n	4018bc <__libc_init_array+0x3c>
  4018ae:	3401      	adds	r4, #1
  4018b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4018b4:	4798      	blx	r3
  4018b6:	42a6      	cmp	r6, r4
  4018b8:	d1f9      	bne.n	4018ae <__libc_init_array+0x2e>
  4018ba:	bd70      	pop	{r4, r5, r6, pc}
  4018bc:	bd70      	pop	{r4, r5, r6, pc}
  4018be:	bf00      	nop
  4018c0:	00404950 	.word	0x00404950
  4018c4:	00404950 	.word	0x00404950
  4018c8:	00404958 	.word	0x00404958
  4018cc:	00404950 	.word	0x00404950

004018d0 <iprintf>:
  4018d0:	b40f      	push	{r0, r1, r2, r3}
  4018d2:	b500      	push	{lr}
  4018d4:	4907      	ldr	r1, [pc, #28]	; (4018f4 <iprintf+0x24>)
  4018d6:	b083      	sub	sp, #12
  4018d8:	ab04      	add	r3, sp, #16
  4018da:	6808      	ldr	r0, [r1, #0]
  4018dc:	f853 2b04 	ldr.w	r2, [r3], #4
  4018e0:	6881      	ldr	r1, [r0, #8]
  4018e2:	9301      	str	r3, [sp, #4]
  4018e4:	f000 f9ee 	bl	401cc4 <_vfiprintf_r>
  4018e8:	b003      	add	sp, #12
  4018ea:	f85d eb04 	ldr.w	lr, [sp], #4
  4018ee:	b004      	add	sp, #16
  4018f0:	4770      	bx	lr
  4018f2:	bf00      	nop
  4018f4:	20000018 	.word	0x20000018

004018f8 <memset>:
  4018f8:	b470      	push	{r4, r5, r6}
  4018fa:	0786      	lsls	r6, r0, #30
  4018fc:	d046      	beq.n	40198c <memset+0x94>
  4018fe:	1e54      	subs	r4, r2, #1
  401900:	2a00      	cmp	r2, #0
  401902:	d041      	beq.n	401988 <memset+0x90>
  401904:	b2ca      	uxtb	r2, r1
  401906:	4603      	mov	r3, r0
  401908:	e002      	b.n	401910 <memset+0x18>
  40190a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40190e:	d33b      	bcc.n	401988 <memset+0x90>
  401910:	f803 2b01 	strb.w	r2, [r3], #1
  401914:	079d      	lsls	r5, r3, #30
  401916:	d1f8      	bne.n	40190a <memset+0x12>
  401918:	2c03      	cmp	r4, #3
  40191a:	d92e      	bls.n	40197a <memset+0x82>
  40191c:	b2cd      	uxtb	r5, r1
  40191e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401922:	2c0f      	cmp	r4, #15
  401924:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401928:	d919      	bls.n	40195e <memset+0x66>
  40192a:	f103 0210 	add.w	r2, r3, #16
  40192e:	4626      	mov	r6, r4
  401930:	3e10      	subs	r6, #16
  401932:	2e0f      	cmp	r6, #15
  401934:	f842 5c10 	str.w	r5, [r2, #-16]
  401938:	f842 5c0c 	str.w	r5, [r2, #-12]
  40193c:	f842 5c08 	str.w	r5, [r2, #-8]
  401940:	f842 5c04 	str.w	r5, [r2, #-4]
  401944:	f102 0210 	add.w	r2, r2, #16
  401948:	d8f2      	bhi.n	401930 <memset+0x38>
  40194a:	f1a4 0210 	sub.w	r2, r4, #16
  40194e:	f022 020f 	bic.w	r2, r2, #15
  401952:	f004 040f 	and.w	r4, r4, #15
  401956:	3210      	adds	r2, #16
  401958:	2c03      	cmp	r4, #3
  40195a:	4413      	add	r3, r2
  40195c:	d90d      	bls.n	40197a <memset+0x82>
  40195e:	461e      	mov	r6, r3
  401960:	4622      	mov	r2, r4
  401962:	3a04      	subs	r2, #4
  401964:	2a03      	cmp	r2, #3
  401966:	f846 5b04 	str.w	r5, [r6], #4
  40196a:	d8fa      	bhi.n	401962 <memset+0x6a>
  40196c:	1f22      	subs	r2, r4, #4
  40196e:	f022 0203 	bic.w	r2, r2, #3
  401972:	3204      	adds	r2, #4
  401974:	4413      	add	r3, r2
  401976:	f004 0403 	and.w	r4, r4, #3
  40197a:	b12c      	cbz	r4, 401988 <memset+0x90>
  40197c:	b2c9      	uxtb	r1, r1
  40197e:	441c      	add	r4, r3
  401980:	f803 1b01 	strb.w	r1, [r3], #1
  401984:	429c      	cmp	r4, r3
  401986:	d1fb      	bne.n	401980 <memset+0x88>
  401988:	bc70      	pop	{r4, r5, r6}
  40198a:	4770      	bx	lr
  40198c:	4614      	mov	r4, r2
  40198e:	4603      	mov	r3, r0
  401990:	e7c2      	b.n	401918 <memset+0x20>
  401992:	bf00      	nop

00401994 <setbuf>:
  401994:	2900      	cmp	r1, #0
  401996:	bf0c      	ite	eq
  401998:	2202      	moveq	r2, #2
  40199a:	2200      	movne	r2, #0
  40199c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4019a0:	f000 b800 	b.w	4019a4 <setvbuf>

004019a4 <setvbuf>:
  4019a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4019a8:	4c50      	ldr	r4, [pc, #320]	; (401aec <setvbuf+0x148>)
  4019aa:	6825      	ldr	r5, [r4, #0]
  4019ac:	b083      	sub	sp, #12
  4019ae:	4604      	mov	r4, r0
  4019b0:	460f      	mov	r7, r1
  4019b2:	4690      	mov	r8, r2
  4019b4:	461e      	mov	r6, r3
  4019b6:	b115      	cbz	r5, 4019be <setvbuf+0x1a>
  4019b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	d077      	beq.n	401aae <setvbuf+0x10a>
  4019be:	f1b8 0f02 	cmp.w	r8, #2
  4019c2:	d004      	beq.n	4019ce <setvbuf+0x2a>
  4019c4:	f1b8 0f01 	cmp.w	r8, #1
  4019c8:	d87d      	bhi.n	401ac6 <setvbuf+0x122>
  4019ca:	2e00      	cmp	r6, #0
  4019cc:	db7b      	blt.n	401ac6 <setvbuf+0x122>
  4019ce:	4621      	mov	r1, r4
  4019d0:	4628      	mov	r0, r5
  4019d2:	f001 f8c1 	bl	402b58 <_fflush_r>
  4019d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4019d8:	b141      	cbz	r1, 4019ec <setvbuf+0x48>
  4019da:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4019de:	4299      	cmp	r1, r3
  4019e0:	d002      	beq.n	4019e8 <setvbuf+0x44>
  4019e2:	4628      	mov	r0, r5
  4019e4:	f001 fa22 	bl	402e2c <_free_r>
  4019e8:	2300      	movs	r3, #0
  4019ea:	6323      	str	r3, [r4, #48]	; 0x30
  4019ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4019f0:	2200      	movs	r2, #0
  4019f2:	61a2      	str	r2, [r4, #24]
  4019f4:	6062      	str	r2, [r4, #4]
  4019f6:	061a      	lsls	r2, r3, #24
  4019f8:	d452      	bmi.n	401aa0 <setvbuf+0xfc>
  4019fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4019fe:	f023 0303 	bic.w	r3, r3, #3
  401a02:	f1b8 0f02 	cmp.w	r8, #2
  401a06:	81a3      	strh	r3, [r4, #12]
  401a08:	d037      	beq.n	401a7a <setvbuf+0xd6>
  401a0a:	ab01      	add	r3, sp, #4
  401a0c:	466a      	mov	r2, sp
  401a0e:	4621      	mov	r1, r4
  401a10:	4628      	mov	r0, r5
  401a12:	f001 fca5 	bl	403360 <__swhatbuf_r>
  401a16:	89a3      	ldrh	r3, [r4, #12]
  401a18:	4318      	orrs	r0, r3
  401a1a:	81a0      	strh	r0, [r4, #12]
  401a1c:	b316      	cbz	r6, 401a64 <setvbuf+0xc0>
  401a1e:	b317      	cbz	r7, 401a66 <setvbuf+0xc2>
  401a20:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401a22:	2b00      	cmp	r3, #0
  401a24:	d04b      	beq.n	401abe <setvbuf+0x11a>
  401a26:	9b00      	ldr	r3, [sp, #0]
  401a28:	6027      	str	r7, [r4, #0]
  401a2a:	429e      	cmp	r6, r3
  401a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a30:	6127      	str	r7, [r4, #16]
  401a32:	bf1c      	itt	ne
  401a34:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
  401a38:	81a3      	strhne	r3, [r4, #12]
  401a3a:	f1b8 0f01 	cmp.w	r8, #1
  401a3e:	bf04      	itt	eq
  401a40:	f043 0301 	orreq.w	r3, r3, #1
  401a44:	81a3      	strheq	r3, [r4, #12]
  401a46:	b29b      	uxth	r3, r3
  401a48:	f013 0008 	ands.w	r0, r3, #8
  401a4c:	6166      	str	r6, [r4, #20]
  401a4e:	d023      	beq.n	401a98 <setvbuf+0xf4>
  401a50:	f013 0001 	ands.w	r0, r3, #1
  401a54:	d02f      	beq.n	401ab6 <setvbuf+0x112>
  401a56:	2000      	movs	r0, #0
  401a58:	4276      	negs	r6, r6
  401a5a:	61a6      	str	r6, [r4, #24]
  401a5c:	60a0      	str	r0, [r4, #8]
  401a5e:	b003      	add	sp, #12
  401a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a64:	9e00      	ldr	r6, [sp, #0]
  401a66:	4630      	mov	r0, r6
  401a68:	f001 fcec 	bl	403444 <malloc>
  401a6c:	4607      	mov	r7, r0
  401a6e:	b368      	cbz	r0, 401acc <setvbuf+0x128>
  401a70:	89a3      	ldrh	r3, [r4, #12]
  401a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a76:	81a3      	strh	r3, [r4, #12]
  401a78:	e7d2      	b.n	401a20 <setvbuf+0x7c>
  401a7a:	2000      	movs	r0, #0
  401a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a80:	f043 0302 	orr.w	r3, r3, #2
  401a84:	2500      	movs	r5, #0
  401a86:	2101      	movs	r1, #1
  401a88:	81a3      	strh	r3, [r4, #12]
  401a8a:	60a5      	str	r5, [r4, #8]
  401a8c:	6022      	str	r2, [r4, #0]
  401a8e:	6122      	str	r2, [r4, #16]
  401a90:	6161      	str	r1, [r4, #20]
  401a92:	b003      	add	sp, #12
  401a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401a98:	60a0      	str	r0, [r4, #8]
  401a9a:	b003      	add	sp, #12
  401a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401aa0:	6921      	ldr	r1, [r4, #16]
  401aa2:	4628      	mov	r0, r5
  401aa4:	f001 f9c2 	bl	402e2c <_free_r>
  401aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401aac:	e7a5      	b.n	4019fa <setvbuf+0x56>
  401aae:	4628      	mov	r0, r5
  401ab0:	f001 f8e6 	bl	402c80 <__sinit>
  401ab4:	e783      	b.n	4019be <setvbuf+0x1a>
  401ab6:	60a6      	str	r6, [r4, #8]
  401ab8:	b003      	add	sp, #12
  401aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401abe:	4628      	mov	r0, r5
  401ac0:	f001 f8de 	bl	402c80 <__sinit>
  401ac4:	e7af      	b.n	401a26 <setvbuf+0x82>
  401ac6:	f04f 30ff 	mov.w	r0, #4294967295
  401aca:	e7e2      	b.n	401a92 <setvbuf+0xee>
  401acc:	f8dd 9000 	ldr.w	r9, [sp]
  401ad0:	45b1      	cmp	r9, r6
  401ad2:	d006      	beq.n	401ae2 <setvbuf+0x13e>
  401ad4:	4648      	mov	r0, r9
  401ad6:	f001 fcb5 	bl	403444 <malloc>
  401ada:	4607      	mov	r7, r0
  401adc:	b108      	cbz	r0, 401ae2 <setvbuf+0x13e>
  401ade:	464e      	mov	r6, r9
  401ae0:	e7c6      	b.n	401a70 <setvbuf+0xcc>
  401ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ae6:	f04f 30ff 	mov.w	r0, #4294967295
  401aea:	e7c7      	b.n	401a7c <setvbuf+0xd8>
  401aec:	20000018 	.word	0x20000018

00401af0 <_strtol_l.isra.0>:
  401af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401af4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  401af8:	460f      	mov	r7, r1
  401afa:	4680      	mov	r8, r0
  401afc:	4616      	mov	r6, r2
  401afe:	461d      	mov	r5, r3
  401b00:	468a      	mov	sl, r1
  401b02:	e000      	b.n	401b06 <_strtol_l.isra.0+0x16>
  401b04:	46a2      	mov	sl, r4
  401b06:	4654      	mov	r4, sl
  401b08:	4648      	mov	r0, r9
  401b0a:	f814 bb01 	ldrb.w	fp, [r4], #1
  401b0e:	f001 fc23 	bl	403358 <__locale_ctype_ptr_l>
  401b12:	4458      	add	r0, fp
  401b14:	7842      	ldrb	r2, [r0, #1]
  401b16:	f012 0208 	ands.w	r2, r2, #8
  401b1a:	d1f3      	bne.n	401b04 <_strtol_l.isra.0+0x14>
  401b1c:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
  401b20:	d04f      	beq.n	401bc2 <_strtol_l.isra.0+0xd2>
  401b22:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
  401b26:	bf04      	itt	eq
  401b28:	f894 b000 	ldrbeq.w	fp, [r4]
  401b2c:	f10a 0402 	addeq.w	r4, sl, #2
  401b30:	b11d      	cbz	r5, 401b3a <_strtol_l.isra.0+0x4a>
  401b32:	2d10      	cmp	r5, #16
  401b34:	d056      	beq.n	401be4 <_strtol_l.isra.0+0xf4>
  401b36:	46ac      	mov	ip, r5
  401b38:	e004      	b.n	401b44 <_strtol_l.isra.0+0x54>
  401b3a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  401b3e:	d060      	beq.n	401c02 <_strtol_l.isra.0+0x112>
  401b40:	250a      	movs	r5, #10
  401b42:	46ac      	mov	ip, r5
  401b44:	2a00      	cmp	r2, #0
  401b46:	bf0c      	ite	eq
  401b48:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
  401b4c:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
  401b50:	2100      	movs	r1, #0
  401b52:	fbb9 fefc 	udiv	lr, r9, ip
  401b56:	4608      	mov	r0, r1
  401b58:	fb0c 9a1e 	mls	sl, ip, lr, r9
  401b5c:	e005      	b.n	401b6a <_strtol_l.isra.0+0x7a>
  401b5e:	d029      	beq.n	401bb4 <_strtol_l.isra.0+0xc4>
  401b60:	fb0c 3000 	mla	r0, ip, r0, r3
  401b64:	2101      	movs	r1, #1
  401b66:	f814 bb01 	ldrb.w	fp, [r4], #1
  401b6a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
  401b6e:	2b09      	cmp	r3, #9
  401b70:	d905      	bls.n	401b7e <_strtol_l.isra.0+0x8e>
  401b72:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
  401b76:	2b19      	cmp	r3, #25
  401b78:	d80b      	bhi.n	401b92 <_strtol_l.isra.0+0xa2>
  401b7a:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
  401b7e:	429d      	cmp	r5, r3
  401b80:	dd0f      	ble.n	401ba2 <_strtol_l.isra.0+0xb2>
  401b82:	f1b1 3fff 	cmp.w	r1, #4294967295
  401b86:	d0ee      	beq.n	401b66 <_strtol_l.isra.0+0x76>
  401b88:	4586      	cmp	lr, r0
  401b8a:	d2e8      	bcs.n	401b5e <_strtol_l.isra.0+0x6e>
  401b8c:	f04f 31ff 	mov.w	r1, #4294967295
  401b90:	e7e9      	b.n	401b66 <_strtol_l.isra.0+0x76>
  401b92:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
  401b96:	2b19      	cmp	r3, #25
  401b98:	d803      	bhi.n	401ba2 <_strtol_l.isra.0+0xb2>
  401b9a:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
  401b9e:	429d      	cmp	r5, r3
  401ba0:	dcef      	bgt.n	401b82 <_strtol_l.isra.0+0x92>
  401ba2:	1c4b      	adds	r3, r1, #1
  401ba4:	d013      	beq.n	401bce <_strtol_l.isra.0+0xde>
  401ba6:	b102      	cbz	r2, 401baa <_strtol_l.isra.0+0xba>
  401ba8:	4240      	negs	r0, r0
  401baa:	b146      	cbz	r6, 401bbe <_strtol_l.isra.0+0xce>
  401bac:	b9c1      	cbnz	r1, 401be0 <_strtol_l.isra.0+0xf0>
  401bae:	6037      	str	r7, [r6, #0]
  401bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bb4:	459a      	cmp	sl, r3
  401bb6:	dad3      	bge.n	401b60 <_strtol_l.isra.0+0x70>
  401bb8:	f04f 31ff 	mov.w	r1, #4294967295
  401bbc:	e7d3      	b.n	401b66 <_strtol_l.isra.0+0x76>
  401bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bc2:	f894 b000 	ldrb.w	fp, [r4]
  401bc6:	2201      	movs	r2, #1
  401bc8:	f10a 0402 	add.w	r4, sl, #2
  401bcc:	e7b0      	b.n	401b30 <_strtol_l.isra.0+0x40>
  401bce:	2322      	movs	r3, #34	; 0x22
  401bd0:	f8c8 3000 	str.w	r3, [r8]
  401bd4:	b1ee      	cbz	r6, 401c12 <_strtol_l.isra.0+0x122>
  401bd6:	1e67      	subs	r7, r4, #1
  401bd8:	4648      	mov	r0, r9
  401bda:	6037      	str	r7, [r6, #0]
  401bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401be0:	4681      	mov	r9, r0
  401be2:	e7f8      	b.n	401bd6 <_strtol_l.isra.0+0xe6>
  401be4:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
  401be8:	d1a5      	bne.n	401b36 <_strtol_l.isra.0+0x46>
  401bea:	7823      	ldrb	r3, [r4, #0]
  401bec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  401bf0:	2b58      	cmp	r3, #88	; 0x58
  401bf2:	d1a0      	bne.n	401b36 <_strtol_l.isra.0+0x46>
  401bf4:	f04f 0c10 	mov.w	ip, #16
  401bf8:	f894 b001 	ldrb.w	fp, [r4, #1]
  401bfc:	4665      	mov	r5, ip
  401bfe:	3402      	adds	r4, #2
  401c00:	e7a0      	b.n	401b44 <_strtol_l.isra.0+0x54>
  401c02:	7823      	ldrb	r3, [r4, #0]
  401c04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  401c08:	2b58      	cmp	r3, #88	; 0x58
  401c0a:	d0f3      	beq.n	401bf4 <_strtol_l.isra.0+0x104>
  401c0c:	2508      	movs	r5, #8
  401c0e:	46ac      	mov	ip, r5
  401c10:	e798      	b.n	401b44 <_strtol_l.isra.0+0x54>
  401c12:	4648      	mov	r0, r9
  401c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00401c18 <strtol>:
  401c18:	b530      	push	{r4, r5, lr}
  401c1a:	4c08      	ldr	r4, [pc, #32]	; (401c3c <strtol+0x24>)
  401c1c:	4b08      	ldr	r3, [pc, #32]	; (401c40 <strtol+0x28>)
  401c1e:	6825      	ldr	r5, [r4, #0]
  401c20:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  401c22:	b083      	sub	sp, #12
  401c24:	2c00      	cmp	r4, #0
  401c26:	bf08      	it	eq
  401c28:	461c      	moveq	r4, r3
  401c2a:	9400      	str	r4, [sp, #0]
  401c2c:	4613      	mov	r3, r2
  401c2e:	460a      	mov	r2, r1
  401c30:	4601      	mov	r1, r0
  401c32:	4628      	mov	r0, r5
  401c34:	f7ff ff5c 	bl	401af0 <_strtol_l.isra.0>
  401c38:	b003      	add	sp, #12
  401c3a:	bd30      	pop	{r4, r5, pc}
  401c3c:	20000018 	.word	0x20000018
  401c40:	20000448 	.word	0x20000448

00401c44 <__sprint_r.part.0>:
  401c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c48:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  401c4a:	049c      	lsls	r4, r3, #18
  401c4c:	4693      	mov	fp, r2
  401c4e:	d52f      	bpl.n	401cb0 <__sprint_r.part.0+0x6c>
  401c50:	6893      	ldr	r3, [r2, #8]
  401c52:	6812      	ldr	r2, [r2, #0]
  401c54:	b353      	cbz	r3, 401cac <__sprint_r.part.0+0x68>
  401c56:	460e      	mov	r6, r1
  401c58:	4607      	mov	r7, r0
  401c5a:	f102 0908 	add.w	r9, r2, #8
  401c5e:	e919 0420 	ldmdb	r9, {r5, sl}
  401c62:	ea5f 089a 	movs.w	r8, sl, lsr #2
  401c66:	d017      	beq.n	401c98 <__sprint_r.part.0+0x54>
  401c68:	3d04      	subs	r5, #4
  401c6a:	2400      	movs	r4, #0
  401c6c:	e001      	b.n	401c72 <__sprint_r.part.0+0x2e>
  401c6e:	45a0      	cmp	r8, r4
  401c70:	d010      	beq.n	401c94 <__sprint_r.part.0+0x50>
  401c72:	4632      	mov	r2, r6
  401c74:	f855 1f04 	ldr.w	r1, [r5, #4]!
  401c78:	4638      	mov	r0, r7
  401c7a:	f001 f875 	bl	402d68 <_fputwc_r>
  401c7e:	1c43      	adds	r3, r0, #1
  401c80:	f104 0401 	add.w	r4, r4, #1
  401c84:	d1f3      	bne.n	401c6e <__sprint_r.part.0+0x2a>
  401c86:	2300      	movs	r3, #0
  401c88:	f8cb 3008 	str.w	r3, [fp, #8]
  401c8c:	f8cb 3004 	str.w	r3, [fp, #4]
  401c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c94:	f8db 3008 	ldr.w	r3, [fp, #8]
  401c98:	f02a 0a03 	bic.w	sl, sl, #3
  401c9c:	eba3 030a 	sub.w	r3, r3, sl
  401ca0:	f8cb 3008 	str.w	r3, [fp, #8]
  401ca4:	f109 0908 	add.w	r9, r9, #8
  401ca8:	2b00      	cmp	r3, #0
  401caa:	d1d8      	bne.n	401c5e <__sprint_r.part.0+0x1a>
  401cac:	2000      	movs	r0, #0
  401cae:	e7ea      	b.n	401c86 <__sprint_r.part.0+0x42>
  401cb0:	f001 f9a2 	bl	402ff8 <__sfvwrite_r>
  401cb4:	2300      	movs	r3, #0
  401cb6:	f8cb 3008 	str.w	r3, [fp, #8]
  401cba:	f8cb 3004 	str.w	r3, [fp, #4]
  401cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cc2:	bf00      	nop

00401cc4 <_vfiprintf_r>:
  401cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cc8:	b0ad      	sub	sp, #180	; 0xb4
  401cca:	461d      	mov	r5, r3
  401ccc:	9101      	str	r1, [sp, #4]
  401cce:	4691      	mov	r9, r2
  401cd0:	9308      	str	r3, [sp, #32]
  401cd2:	9006      	str	r0, [sp, #24]
  401cd4:	b118      	cbz	r0, 401cde <_vfiprintf_r+0x1a>
  401cd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401cd8:	2b00      	cmp	r3, #0
  401cda:	f000 80e0 	beq.w	401e9e <_vfiprintf_r+0x1da>
  401cde:	9c01      	ldr	r4, [sp, #4]
  401ce0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  401ce4:	b281      	uxth	r1, r0
  401ce6:	048b      	lsls	r3, r1, #18
  401ce8:	d407      	bmi.n	401cfa <_vfiprintf_r+0x36>
  401cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401cec:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401cf4:	81a1      	strh	r1, [r4, #12]
  401cf6:	6663      	str	r3, [r4, #100]	; 0x64
  401cf8:	b289      	uxth	r1, r1
  401cfa:	070f      	lsls	r7, r1, #28
  401cfc:	f140 80b1 	bpl.w	401e62 <_vfiprintf_r+0x19e>
  401d00:	9b01      	ldr	r3, [sp, #4]
  401d02:	691b      	ldr	r3, [r3, #16]
  401d04:	2b00      	cmp	r3, #0
  401d06:	f000 80ac 	beq.w	401e62 <_vfiprintf_r+0x19e>
  401d0a:	f001 011a 	and.w	r1, r1, #26
  401d0e:	290a      	cmp	r1, #10
  401d10:	f000 80b5 	beq.w	401e7e <_vfiprintf_r+0x1ba>
  401d14:	2300      	movs	r3, #0
  401d16:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  401d1a:	930b      	str	r3, [sp, #44]	; 0x2c
  401d1c:	9311      	str	r3, [sp, #68]	; 0x44
  401d1e:	9310      	str	r3, [sp, #64]	; 0x40
  401d20:	9304      	str	r3, [sp, #16]
  401d22:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  401d26:	46da      	mov	sl, fp
  401d28:	f899 3000 	ldrb.w	r3, [r9]
  401d2c:	464c      	mov	r4, r9
  401d2e:	b1fb      	cbz	r3, 401d70 <_vfiprintf_r+0xac>
  401d30:	2b25      	cmp	r3, #37	; 0x25
  401d32:	d102      	bne.n	401d3a <_vfiprintf_r+0x76>
  401d34:	e01c      	b.n	401d70 <_vfiprintf_r+0xac>
  401d36:	2b25      	cmp	r3, #37	; 0x25
  401d38:	d003      	beq.n	401d42 <_vfiprintf_r+0x7e>
  401d3a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401d3e:	2b00      	cmp	r3, #0
  401d40:	d1f9      	bne.n	401d36 <_vfiprintf_r+0x72>
  401d42:	eba4 0509 	sub.w	r5, r4, r9
  401d46:	b19d      	cbz	r5, 401d70 <_vfiprintf_r+0xac>
  401d48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401d4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d4c:	f8ca 9000 	str.w	r9, [sl]
  401d50:	3301      	adds	r3, #1
  401d52:	442a      	add	r2, r5
  401d54:	2b07      	cmp	r3, #7
  401d56:	f8ca 5004 	str.w	r5, [sl, #4]
  401d5a:	9211      	str	r2, [sp, #68]	; 0x44
  401d5c:	9310      	str	r3, [sp, #64]	; 0x40
  401d5e:	dd7a      	ble.n	401e56 <_vfiprintf_r+0x192>
  401d60:	2a00      	cmp	r2, #0
  401d62:	f040 848f 	bne.w	402684 <_vfiprintf_r+0x9c0>
  401d66:	9b04      	ldr	r3, [sp, #16]
  401d68:	9210      	str	r2, [sp, #64]	; 0x40
  401d6a:	442b      	add	r3, r5
  401d6c:	46da      	mov	sl, fp
  401d6e:	9304      	str	r3, [sp, #16]
  401d70:	7823      	ldrb	r3, [r4, #0]
  401d72:	2b00      	cmp	r3, #0
  401d74:	f000 83b1 	beq.w	4024da <_vfiprintf_r+0x816>
  401d78:	2000      	movs	r0, #0
  401d7a:	f04f 0300 	mov.w	r3, #0
  401d7e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  401d82:	f104 0901 	add.w	r9, r4, #1
  401d86:	7862      	ldrb	r2, [r4, #1]
  401d88:	4605      	mov	r5, r0
  401d8a:	4606      	mov	r6, r0
  401d8c:	4603      	mov	r3, r0
  401d8e:	f04f 34ff 	mov.w	r4, #4294967295
  401d92:	f109 0901 	add.w	r9, r9, #1
  401d96:	f1a2 0120 	sub.w	r1, r2, #32
  401d9a:	2958      	cmp	r1, #88	; 0x58
  401d9c:	f200 830e 	bhi.w	4023bc <_vfiprintf_r+0x6f8>
  401da0:	e8df f011 	tbh	[pc, r1, lsl #1]
  401da4:	030c0237 	.word	0x030c0237
  401da8:	02eb030c 	.word	0x02eb030c
  401dac:	030c030c 	.word	0x030c030c
  401db0:	030c030c 	.word	0x030c030c
  401db4:	030c030c 	.word	0x030c030c
  401db8:	02f0029e 	.word	0x02f0029e
  401dbc:	0082030c 	.word	0x0082030c
  401dc0:	030c0277 	.word	0x030c0277
  401dc4:	01d401cf 	.word	0x01d401cf
  401dc8:	01d401d4 	.word	0x01d401d4
  401dcc:	01d401d4 	.word	0x01d401d4
  401dd0:	01d401d4 	.word	0x01d401d4
  401dd4:	01d401d4 	.word	0x01d401d4
  401dd8:	030c030c 	.word	0x030c030c
  401ddc:	030c030c 	.word	0x030c030c
  401de0:	030c030c 	.word	0x030c030c
  401de4:	030c030c 	.word	0x030c030c
  401de8:	030c030c 	.word	0x030c030c
  401dec:	030c023f 	.word	0x030c023f
  401df0:	030c030c 	.word	0x030c030c
  401df4:	030c030c 	.word	0x030c030c
  401df8:	030c030c 	.word	0x030c030c
  401dfc:	030c030c 	.word	0x030c030c
  401e00:	0246030c 	.word	0x0246030c
  401e04:	030c030c 	.word	0x030c030c
  401e08:	030c030c 	.word	0x030c030c
  401e0c:	024a030c 	.word	0x024a030c
  401e10:	030c030c 	.word	0x030c030c
  401e14:	030c0252 	.word	0x030c0252
  401e18:	030c030c 	.word	0x030c030c
  401e1c:	030c030c 	.word	0x030c030c
  401e20:	030c030c 	.word	0x030c030c
  401e24:	030c030c 	.word	0x030c030c
  401e28:	01e2030c 	.word	0x01e2030c
  401e2c:	030c01f6 	.word	0x030c01f6
  401e30:	030c030c 	.word	0x030c030c
  401e34:	01f60307 	.word	0x01f60307
  401e38:	030c030c 	.word	0x030c030c
  401e3c:	030c0291 	.word	0x030c0291
  401e40:	008702f5 	.word	0x008702f5
  401e44:	02c302b1 	.word	0x02c302b1
  401e48:	02c8030c 	.word	0x02c8030c
  401e4c:	01bd030c 	.word	0x01bd030c
  401e50:	030c030c 	.word	0x030c030c
  401e54:	02aa      	.short	0x02aa
  401e56:	f10a 0a08 	add.w	sl, sl, #8
  401e5a:	9b04      	ldr	r3, [sp, #16]
  401e5c:	442b      	add	r3, r5
  401e5e:	9304      	str	r3, [sp, #16]
  401e60:	e786      	b.n	401d70 <_vfiprintf_r+0xac>
  401e62:	9c01      	ldr	r4, [sp, #4]
  401e64:	9806      	ldr	r0, [sp, #24]
  401e66:	4621      	mov	r1, r4
  401e68:	f000 fd62 	bl	402930 <__swsetup_r>
  401e6c:	2800      	cmp	r0, #0
  401e6e:	f040 8340 	bne.w	4024f2 <_vfiprintf_r+0x82e>
  401e72:	89a1      	ldrh	r1, [r4, #12]
  401e74:	f001 011a 	and.w	r1, r1, #26
  401e78:	290a      	cmp	r1, #10
  401e7a:	f47f af4b 	bne.w	401d14 <_vfiprintf_r+0x50>
  401e7e:	9901      	ldr	r1, [sp, #4]
  401e80:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  401e84:	2b00      	cmp	r3, #0
  401e86:	f6ff af45 	blt.w	401d14 <_vfiprintf_r+0x50>
  401e8a:	462b      	mov	r3, r5
  401e8c:	464a      	mov	r2, r9
  401e8e:	9806      	ldr	r0, [sp, #24]
  401e90:	f000 fd18 	bl	4028c4 <__sbprintf>
  401e94:	9004      	str	r0, [sp, #16]
  401e96:	9804      	ldr	r0, [sp, #16]
  401e98:	b02d      	add	sp, #180	; 0xb4
  401e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e9e:	f000 feef 	bl	402c80 <__sinit>
  401ea2:	e71c      	b.n	401cde <_vfiprintf_r+0x1a>
  401ea4:	4276      	negs	r6, r6
  401ea6:	9208      	str	r2, [sp, #32]
  401ea8:	f043 0304 	orr.w	r3, r3, #4
  401eac:	f899 2000 	ldrb.w	r2, [r9]
  401eb0:	e76f      	b.n	401d92 <_vfiprintf_r+0xce>
  401eb2:	9607      	str	r6, [sp, #28]
  401eb4:	f013 0220 	ands.w	r2, r3, #32
  401eb8:	f040 845a 	bne.w	402770 <_vfiprintf_r+0xaac>
  401ebc:	f013 0110 	ands.w	r1, r3, #16
  401ec0:	f040 83f1 	bne.w	4026a6 <_vfiprintf_r+0x9e2>
  401ec4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  401ec8:	f000 83ed 	beq.w	4026a6 <_vfiprintf_r+0x9e2>
  401ecc:	9808      	ldr	r0, [sp, #32]
  401ece:	460a      	mov	r2, r1
  401ed0:	4601      	mov	r1, r0
  401ed2:	3104      	adds	r1, #4
  401ed4:	8806      	ldrh	r6, [r0, #0]
  401ed6:	9108      	str	r1, [sp, #32]
  401ed8:	2700      	movs	r7, #0
  401eda:	f04f 0100 	mov.w	r1, #0
  401ede:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  401ee2:	2500      	movs	r5, #0
  401ee4:	1c61      	adds	r1, r4, #1
  401ee6:	f000 8175 	beq.w	4021d4 <_vfiprintf_r+0x510>
  401eea:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401eee:	9103      	str	r1, [sp, #12]
  401ef0:	ea56 0107 	orrs.w	r1, r6, r7
  401ef4:	f040 8173 	bne.w	4021de <_vfiprintf_r+0x51a>
  401ef8:	2c00      	cmp	r4, #0
  401efa:	f040 8356 	bne.w	4025aa <_vfiprintf_r+0x8e6>
  401efe:	2a00      	cmp	r2, #0
  401f00:	f040 83b2 	bne.w	402668 <_vfiprintf_r+0x9a4>
  401f04:	f013 0301 	ands.w	r3, r3, #1
  401f08:	9305      	str	r3, [sp, #20]
  401f0a:	f000 8447 	beq.w	40279c <_vfiprintf_r+0xad8>
  401f0e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  401f12:	2330      	movs	r3, #48	; 0x30
  401f14:	f808 3d41 	strb.w	r3, [r8, #-65]!
  401f18:	9b05      	ldr	r3, [sp, #20]
  401f1a:	42a3      	cmp	r3, r4
  401f1c:	bfb8      	it	lt
  401f1e:	4623      	movlt	r3, r4
  401f20:	9302      	str	r3, [sp, #8]
  401f22:	b10d      	cbz	r5, 401f28 <_vfiprintf_r+0x264>
  401f24:	3301      	adds	r3, #1
  401f26:	9302      	str	r3, [sp, #8]
  401f28:	9b03      	ldr	r3, [sp, #12]
  401f2a:	f013 0302 	ands.w	r3, r3, #2
  401f2e:	9309      	str	r3, [sp, #36]	; 0x24
  401f30:	d002      	beq.n	401f38 <_vfiprintf_r+0x274>
  401f32:	9b02      	ldr	r3, [sp, #8]
  401f34:	3302      	adds	r3, #2
  401f36:	9302      	str	r3, [sp, #8]
  401f38:	9b03      	ldr	r3, [sp, #12]
  401f3a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  401f3e:	930a      	str	r3, [sp, #40]	; 0x28
  401f40:	f040 8263 	bne.w	40240a <_vfiprintf_r+0x746>
  401f44:	9b07      	ldr	r3, [sp, #28]
  401f46:	9a02      	ldr	r2, [sp, #8]
  401f48:	1a9d      	subs	r5, r3, r2
  401f4a:	2d00      	cmp	r5, #0
  401f4c:	f340 825d 	ble.w	40240a <_vfiprintf_r+0x746>
  401f50:	2d10      	cmp	r5, #16
  401f52:	f340 8477 	ble.w	402844 <_vfiprintf_r+0xb80>
  401f56:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401f58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f5a:	4eb9      	ldr	r6, [pc, #740]	; (402240 <_vfiprintf_r+0x57c>)
  401f5c:	46d6      	mov	lr, sl
  401f5e:	2710      	movs	r7, #16
  401f60:	46a2      	mov	sl, r4
  401f62:	4619      	mov	r1, r3
  401f64:	9c06      	ldr	r4, [sp, #24]
  401f66:	e007      	b.n	401f78 <_vfiprintf_r+0x2b4>
  401f68:	f101 0c02 	add.w	ip, r1, #2
  401f6c:	f10e 0e08 	add.w	lr, lr, #8
  401f70:	4601      	mov	r1, r0
  401f72:	3d10      	subs	r5, #16
  401f74:	2d10      	cmp	r5, #16
  401f76:	dd11      	ble.n	401f9c <_vfiprintf_r+0x2d8>
  401f78:	1c48      	adds	r0, r1, #1
  401f7a:	3210      	adds	r2, #16
  401f7c:	2807      	cmp	r0, #7
  401f7e:	9211      	str	r2, [sp, #68]	; 0x44
  401f80:	e88e 00c0 	stmia.w	lr, {r6, r7}
  401f84:	9010      	str	r0, [sp, #64]	; 0x40
  401f86:	ddef      	ble.n	401f68 <_vfiprintf_r+0x2a4>
  401f88:	2a00      	cmp	r2, #0
  401f8a:	f040 8231 	bne.w	4023f0 <_vfiprintf_r+0x72c>
  401f8e:	3d10      	subs	r5, #16
  401f90:	2d10      	cmp	r5, #16
  401f92:	4611      	mov	r1, r2
  401f94:	f04f 0c01 	mov.w	ip, #1
  401f98:	46de      	mov	lr, fp
  401f9a:	dced      	bgt.n	401f78 <_vfiprintf_r+0x2b4>
  401f9c:	4654      	mov	r4, sl
  401f9e:	4661      	mov	r1, ip
  401fa0:	46f2      	mov	sl, lr
  401fa2:	442a      	add	r2, r5
  401fa4:	2907      	cmp	r1, #7
  401fa6:	9211      	str	r2, [sp, #68]	; 0x44
  401fa8:	f8ca 6000 	str.w	r6, [sl]
  401fac:	f8ca 5004 	str.w	r5, [sl, #4]
  401fb0:	9110      	str	r1, [sp, #64]	; 0x40
  401fb2:	f300 82e6 	bgt.w	402582 <_vfiprintf_r+0x8be>
  401fb6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401fba:	f10a 0a08 	add.w	sl, sl, #8
  401fbe:	1c48      	adds	r0, r1, #1
  401fc0:	2d00      	cmp	r5, #0
  401fc2:	f040 822a 	bne.w	40241a <_vfiprintf_r+0x756>
  401fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401fc8:	2b00      	cmp	r3, #0
  401fca:	f000 8244 	beq.w	402456 <_vfiprintf_r+0x792>
  401fce:	3202      	adds	r2, #2
  401fd0:	a90e      	add	r1, sp, #56	; 0x38
  401fd2:	2302      	movs	r3, #2
  401fd4:	2807      	cmp	r0, #7
  401fd6:	9211      	str	r2, [sp, #68]	; 0x44
  401fd8:	9010      	str	r0, [sp, #64]	; 0x40
  401fda:	e88a 000a 	stmia.w	sl, {r1, r3}
  401fde:	f340 8236 	ble.w	40244e <_vfiprintf_r+0x78a>
  401fe2:	2a00      	cmp	r2, #0
  401fe4:	f040 838b 	bne.w	4026fe <_vfiprintf_r+0xa3a>
  401fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401fea:	2b80      	cmp	r3, #128	; 0x80
  401fec:	f04f 0001 	mov.w	r0, #1
  401ff0:	4611      	mov	r1, r2
  401ff2:	46da      	mov	sl, fp
  401ff4:	f040 8233 	bne.w	40245e <_vfiprintf_r+0x79a>
  401ff8:	9b07      	ldr	r3, [sp, #28]
  401ffa:	9d02      	ldr	r5, [sp, #8]
  401ffc:	1b5e      	subs	r6, r3, r5
  401ffe:	2e00      	cmp	r6, #0
  402000:	f340 822d 	ble.w	40245e <_vfiprintf_r+0x79a>
  402004:	2e10      	cmp	r6, #16
  402006:	4d8f      	ldr	r5, [pc, #572]	; (402244 <_vfiprintf_r+0x580>)
  402008:	f340 842f 	ble.w	40286a <_vfiprintf_r+0xba6>
  40200c:	46d4      	mov	ip, sl
  40200e:	2710      	movs	r7, #16
  402010:	46a2      	mov	sl, r4
  402012:	9c06      	ldr	r4, [sp, #24]
  402014:	e007      	b.n	402026 <_vfiprintf_r+0x362>
  402016:	f101 0e02 	add.w	lr, r1, #2
  40201a:	f10c 0c08 	add.w	ip, ip, #8
  40201e:	4601      	mov	r1, r0
  402020:	3e10      	subs	r6, #16
  402022:	2e10      	cmp	r6, #16
  402024:	dd11      	ble.n	40204a <_vfiprintf_r+0x386>
  402026:	1c48      	adds	r0, r1, #1
  402028:	3210      	adds	r2, #16
  40202a:	2807      	cmp	r0, #7
  40202c:	9211      	str	r2, [sp, #68]	; 0x44
  40202e:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402032:	9010      	str	r0, [sp, #64]	; 0x40
  402034:	ddef      	ble.n	402016 <_vfiprintf_r+0x352>
  402036:	2a00      	cmp	r2, #0
  402038:	f040 8296 	bne.w	402568 <_vfiprintf_r+0x8a4>
  40203c:	3e10      	subs	r6, #16
  40203e:	2e10      	cmp	r6, #16
  402040:	f04f 0e01 	mov.w	lr, #1
  402044:	4611      	mov	r1, r2
  402046:	46dc      	mov	ip, fp
  402048:	dced      	bgt.n	402026 <_vfiprintf_r+0x362>
  40204a:	4654      	mov	r4, sl
  40204c:	46e2      	mov	sl, ip
  40204e:	4432      	add	r2, r6
  402050:	f1be 0f07 	cmp.w	lr, #7
  402054:	9211      	str	r2, [sp, #68]	; 0x44
  402056:	e88a 0060 	stmia.w	sl, {r5, r6}
  40205a:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40205e:	f300 835b 	bgt.w	402718 <_vfiprintf_r+0xa54>
  402062:	9b05      	ldr	r3, [sp, #20]
  402064:	1ae4      	subs	r4, r4, r3
  402066:	2c00      	cmp	r4, #0
  402068:	f10a 0a08 	add.w	sl, sl, #8
  40206c:	f10e 0001 	add.w	r0, lr, #1
  402070:	4671      	mov	r1, lr
  402072:	f300 81f9 	bgt.w	402468 <_vfiprintf_r+0x7a4>
  402076:	9905      	ldr	r1, [sp, #20]
  402078:	f8ca 8000 	str.w	r8, [sl]
  40207c:	440a      	add	r2, r1
  40207e:	2807      	cmp	r0, #7
  402080:	9211      	str	r2, [sp, #68]	; 0x44
  402082:	f8ca 1004 	str.w	r1, [sl, #4]
  402086:	9010      	str	r0, [sp, #64]	; 0x40
  402088:	f340 8255 	ble.w	402536 <_vfiprintf_r+0x872>
  40208c:	2a00      	cmp	r2, #0
  40208e:	f040 82ee 	bne.w	40266e <_vfiprintf_r+0x9aa>
  402092:	9b03      	ldr	r3, [sp, #12]
  402094:	9210      	str	r2, [sp, #64]	; 0x40
  402096:	0758      	lsls	r0, r3, #29
  402098:	d538      	bpl.n	40210c <_vfiprintf_r+0x448>
  40209a:	9b07      	ldr	r3, [sp, #28]
  40209c:	9902      	ldr	r1, [sp, #8]
  40209e:	1a5c      	subs	r4, r3, r1
  4020a0:	2c00      	cmp	r4, #0
  4020a2:	f340 82ba 	ble.w	40261a <_vfiprintf_r+0x956>
  4020a6:	46da      	mov	sl, fp
  4020a8:	2c10      	cmp	r4, #16
  4020aa:	f340 83da 	ble.w	402862 <_vfiprintf_r+0xb9e>
  4020ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4020b0:	4e63      	ldr	r6, [pc, #396]	; (402240 <_vfiprintf_r+0x57c>)
  4020b2:	9f06      	ldr	r7, [sp, #24]
  4020b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
  4020b8:	2510      	movs	r5, #16
  4020ba:	e006      	b.n	4020ca <_vfiprintf_r+0x406>
  4020bc:	1c88      	adds	r0, r1, #2
  4020be:	f10a 0a08 	add.w	sl, sl, #8
  4020c2:	4619      	mov	r1, r3
  4020c4:	3c10      	subs	r4, #16
  4020c6:	2c10      	cmp	r4, #16
  4020c8:	dd13      	ble.n	4020f2 <_vfiprintf_r+0x42e>
  4020ca:	1c4b      	adds	r3, r1, #1
  4020cc:	3210      	adds	r2, #16
  4020ce:	2b07      	cmp	r3, #7
  4020d0:	9211      	str	r2, [sp, #68]	; 0x44
  4020d2:	f8ca 6000 	str.w	r6, [sl]
  4020d6:	f8ca 5004 	str.w	r5, [sl, #4]
  4020da:	9310      	str	r3, [sp, #64]	; 0x40
  4020dc:	ddee      	ble.n	4020bc <_vfiprintf_r+0x3f8>
  4020de:	2a00      	cmp	r2, #0
  4020e0:	f040 820b 	bne.w	4024fa <_vfiprintf_r+0x836>
  4020e4:	3c10      	subs	r4, #16
  4020e6:	2c10      	cmp	r4, #16
  4020e8:	f04f 0001 	mov.w	r0, #1
  4020ec:	4611      	mov	r1, r2
  4020ee:	46da      	mov	sl, fp
  4020f0:	dceb      	bgt.n	4020ca <_vfiprintf_r+0x406>
  4020f2:	4422      	add	r2, r4
  4020f4:	2807      	cmp	r0, #7
  4020f6:	9211      	str	r2, [sp, #68]	; 0x44
  4020f8:	f8ca 6000 	str.w	r6, [sl]
  4020fc:	f8ca 4004 	str.w	r4, [sl, #4]
  402100:	9010      	str	r0, [sp, #64]	; 0x40
  402102:	f340 8223 	ble.w	40254c <_vfiprintf_r+0x888>
  402106:	2a00      	cmp	r2, #0
  402108:	f040 8367 	bne.w	4027da <_vfiprintf_r+0xb16>
  40210c:	9b04      	ldr	r3, [sp, #16]
  40210e:	9a07      	ldr	r2, [sp, #28]
  402110:	9902      	ldr	r1, [sp, #8]
  402112:	428a      	cmp	r2, r1
  402114:	bfac      	ite	ge
  402116:	189b      	addge	r3, r3, r2
  402118:	185b      	addlt	r3, r3, r1
  40211a:	9304      	str	r3, [sp, #16]
  40211c:	e21f      	b.n	40255e <_vfiprintf_r+0x89a>
  40211e:	9607      	str	r6, [sp, #28]
  402120:	069e      	lsls	r6, r3, #26
  402122:	f100 8319 	bmi.w	402758 <_vfiprintf_r+0xa94>
  402126:	9908      	ldr	r1, [sp, #32]
  402128:	06dd      	lsls	r5, r3, #27
  40212a:	460a      	mov	r2, r1
  40212c:	f100 82b5 	bmi.w	40269a <_vfiprintf_r+0x9d6>
  402130:	0658      	lsls	r0, r3, #25
  402132:	f140 82b2 	bpl.w	40269a <_vfiprintf_r+0x9d6>
  402136:	880e      	ldrh	r6, [r1, #0]
  402138:	3104      	adds	r1, #4
  40213a:	2700      	movs	r7, #0
  40213c:	2201      	movs	r2, #1
  40213e:	9108      	str	r1, [sp, #32]
  402140:	e6cb      	b.n	401eda <_vfiprintf_r+0x216>
  402142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402146:	f899 2000 	ldrb.w	r2, [r9]
  40214a:	e622      	b.n	401d92 <_vfiprintf_r+0xce>
  40214c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402150:	2600      	movs	r6, #0
  402152:	f819 2b01 	ldrb.w	r2, [r9], #1
  402156:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40215a:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40215e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402162:	2909      	cmp	r1, #9
  402164:	d9f5      	bls.n	402152 <_vfiprintf_r+0x48e>
  402166:	e616      	b.n	401d96 <_vfiprintf_r+0xd2>
  402168:	9908      	ldr	r1, [sp, #32]
  40216a:	9607      	str	r6, [sp, #28]
  40216c:	680a      	ldr	r2, [r1, #0]
  40216e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  402172:	f04f 0000 	mov.w	r0, #0
  402176:	460a      	mov	r2, r1
  402178:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40217c:	3204      	adds	r2, #4
  40217e:	2001      	movs	r0, #1
  402180:	9002      	str	r0, [sp, #8]
  402182:	9208      	str	r2, [sp, #32]
  402184:	9005      	str	r0, [sp, #20]
  402186:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  40218a:	9303      	str	r3, [sp, #12]
  40218c:	2400      	movs	r4, #0
  40218e:	e6cb      	b.n	401f28 <_vfiprintf_r+0x264>
  402190:	9607      	str	r6, [sp, #28]
  402192:	2800      	cmp	r0, #0
  402194:	f040 8382 	bne.w	40289c <_vfiprintf_r+0xbd8>
  402198:	069e      	lsls	r6, r3, #26
  40219a:	f100 82d1 	bmi.w	402740 <_vfiprintf_r+0xa7c>
  40219e:	06dd      	lsls	r5, r3, #27
  4021a0:	f100 828d 	bmi.w	4026be <_vfiprintf_r+0x9fa>
  4021a4:	0658      	lsls	r0, r3, #25
  4021a6:	f140 828a 	bpl.w	4026be <_vfiprintf_r+0x9fa>
  4021aa:	9d08      	ldr	r5, [sp, #32]
  4021ac:	f9b5 6000 	ldrsh.w	r6, [r5]
  4021b0:	462a      	mov	r2, r5
  4021b2:	17f7      	asrs	r7, r6, #31
  4021b4:	3204      	adds	r2, #4
  4021b6:	4630      	mov	r0, r6
  4021b8:	4639      	mov	r1, r7
  4021ba:	9208      	str	r2, [sp, #32]
  4021bc:	2800      	cmp	r0, #0
  4021be:	f171 0200 	sbcs.w	r2, r1, #0
  4021c2:	f2c0 82ee 	blt.w	4027a2 <_vfiprintf_r+0xade>
  4021c6:	1c61      	adds	r1, r4, #1
  4021c8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4021cc:	f04f 0201 	mov.w	r2, #1
  4021d0:	f47f ae8b 	bne.w	401eea <_vfiprintf_r+0x226>
  4021d4:	ea56 0107 	orrs.w	r1, r6, r7
  4021d8:	f000 81e8 	beq.w	4025ac <_vfiprintf_r+0x8e8>
  4021dc:	9303      	str	r3, [sp, #12]
  4021de:	2a01      	cmp	r2, #1
  4021e0:	f000 8225 	beq.w	40262e <_vfiprintf_r+0x96a>
  4021e4:	2a02      	cmp	r2, #2
  4021e6:	f040 81f5 	bne.w	4025d4 <_vfiprintf_r+0x910>
  4021ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4021ec:	46d8      	mov	r8, fp
  4021ee:	0933      	lsrs	r3, r6, #4
  4021f0:	f006 010f 	and.w	r1, r6, #15
  4021f4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4021f8:	093a      	lsrs	r2, r7, #4
  4021fa:	461e      	mov	r6, r3
  4021fc:	4617      	mov	r7, r2
  4021fe:	5c43      	ldrb	r3, [r0, r1]
  402200:	f808 3d01 	strb.w	r3, [r8, #-1]!
  402204:	ea56 0307 	orrs.w	r3, r6, r7
  402208:	d1f1      	bne.n	4021ee <_vfiprintf_r+0x52a>
  40220a:	ebab 0308 	sub.w	r3, fp, r8
  40220e:	9305      	str	r3, [sp, #20]
  402210:	e682      	b.n	401f18 <_vfiprintf_r+0x254>
  402212:	f899 2000 	ldrb.w	r2, [r9]
  402216:	2d00      	cmp	r5, #0
  402218:	f47f adbb 	bne.w	401d92 <_vfiprintf_r+0xce>
  40221c:	2001      	movs	r0, #1
  40221e:	2520      	movs	r5, #32
  402220:	e5b7      	b.n	401d92 <_vfiprintf_r+0xce>
  402222:	9607      	str	r6, [sp, #28]
  402224:	2800      	cmp	r0, #0
  402226:	f040 8336 	bne.w	402896 <_vfiprintf_r+0xbd2>
  40222a:	f043 0310 	orr.w	r3, r3, #16
  40222e:	e7b3      	b.n	402198 <_vfiprintf_r+0x4d4>
  402230:	9607      	str	r6, [sp, #28]
  402232:	f043 0310 	orr.w	r3, r3, #16
  402236:	e63d      	b.n	401eb4 <_vfiprintf_r+0x1f0>
  402238:	9607      	str	r6, [sp, #28]
  40223a:	f043 0310 	orr.w	r3, r3, #16
  40223e:	e76f      	b.n	402120 <_vfiprintf_r+0x45c>
  402240:	00404810 	.word	0x00404810
  402244:	00404820 	.word	0x00404820
  402248:	9607      	str	r6, [sp, #28]
  40224a:	2800      	cmp	r0, #0
  40224c:	f040 832c 	bne.w	4028a8 <_vfiprintf_r+0xbe4>
  402250:	49b0      	ldr	r1, [pc, #704]	; (402514 <_vfiprintf_r+0x850>)
  402252:	910b      	str	r1, [sp, #44]	; 0x2c
  402254:	069f      	lsls	r7, r3, #26
  402256:	f100 8297 	bmi.w	402788 <_vfiprintf_r+0xac4>
  40225a:	9808      	ldr	r0, [sp, #32]
  40225c:	06de      	lsls	r6, r3, #27
  40225e:	4601      	mov	r1, r0
  402260:	f100 8228 	bmi.w	4026b4 <_vfiprintf_r+0x9f0>
  402264:	065d      	lsls	r5, r3, #25
  402266:	f140 8225 	bpl.w	4026b4 <_vfiprintf_r+0x9f0>
  40226a:	3104      	adds	r1, #4
  40226c:	8806      	ldrh	r6, [r0, #0]
  40226e:	9108      	str	r1, [sp, #32]
  402270:	2700      	movs	r7, #0
  402272:	07d8      	lsls	r0, r3, #31
  402274:	f140 81d9 	bpl.w	40262a <_vfiprintf_r+0x966>
  402278:	ea56 0107 	orrs.w	r1, r6, r7
  40227c:	f000 81d5 	beq.w	40262a <_vfiprintf_r+0x966>
  402280:	2130      	movs	r1, #48	; 0x30
  402282:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402286:	f043 0302 	orr.w	r3, r3, #2
  40228a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40228e:	2202      	movs	r2, #2
  402290:	e623      	b.n	401eda <_vfiprintf_r+0x216>
  402292:	f899 2000 	ldrb.w	r2, [r9]
  402296:	2a2a      	cmp	r2, #42	; 0x2a
  402298:	f109 0701 	add.w	r7, r9, #1
  40229c:	f000 82f0 	beq.w	402880 <_vfiprintf_r+0xbbc>
  4022a0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4022a4:	2909      	cmp	r1, #9
  4022a6:	46b9      	mov	r9, r7
  4022a8:	f04f 0400 	mov.w	r4, #0
  4022ac:	f63f ad73 	bhi.w	401d96 <_vfiprintf_r+0xd2>
  4022b0:	f819 2b01 	ldrb.w	r2, [r9], #1
  4022b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4022b8:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4022bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4022c0:	2909      	cmp	r1, #9
  4022c2:	d9f5      	bls.n	4022b0 <_vfiprintf_r+0x5ec>
  4022c4:	e567      	b.n	401d96 <_vfiprintf_r+0xd2>
  4022c6:	f899 2000 	ldrb.w	r2, [r9]
  4022ca:	2a6c      	cmp	r2, #108	; 0x6c
  4022cc:	bf03      	ittte	eq
  4022ce:	f899 2001 	ldrbeq.w	r2, [r9, #1]
  4022d2:	f043 0320 	orreq.w	r3, r3, #32
  4022d6:	f109 0901 	addeq.w	r9, r9, #1
  4022da:	f043 0310 	orrne.w	r3, r3, #16
  4022de:	e558      	b.n	401d92 <_vfiprintf_r+0xce>
  4022e0:	9908      	ldr	r1, [sp, #32]
  4022e2:	680e      	ldr	r6, [r1, #0]
  4022e4:	460a      	mov	r2, r1
  4022e6:	2e00      	cmp	r6, #0
  4022e8:	f102 0204 	add.w	r2, r2, #4
  4022ec:	f6ff adda 	blt.w	401ea4 <_vfiprintf_r+0x1e0>
  4022f0:	9208      	str	r2, [sp, #32]
  4022f2:	f899 2000 	ldrb.w	r2, [r9]
  4022f6:	e54c      	b.n	401d92 <_vfiprintf_r+0xce>
  4022f8:	9607      	str	r6, [sp, #28]
  4022fa:	2800      	cmp	r0, #0
  4022fc:	f040 82da 	bne.w	4028b4 <_vfiprintf_r+0xbf0>
  402300:	4985      	ldr	r1, [pc, #532]	; (402518 <_vfiprintf_r+0x854>)
  402302:	910b      	str	r1, [sp, #44]	; 0x2c
  402304:	e7a6      	b.n	402254 <_vfiprintf_r+0x590>
  402306:	9808      	ldr	r0, [sp, #32]
  402308:	4a83      	ldr	r2, [pc, #524]	; (402518 <_vfiprintf_r+0x854>)
  40230a:	9607      	str	r6, [sp, #28]
  40230c:	920b      	str	r2, [sp, #44]	; 0x2c
  40230e:	6806      	ldr	r6, [r0, #0]
  402310:	2278      	movs	r2, #120	; 0x78
  402312:	2130      	movs	r1, #48	; 0x30
  402314:	3004      	adds	r0, #4
  402316:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40231a:	f043 0302 	orr.w	r3, r3, #2
  40231e:	9008      	str	r0, [sp, #32]
  402320:	2700      	movs	r7, #0
  402322:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402326:	2202      	movs	r2, #2
  402328:	e5d7      	b.n	401eda <_vfiprintf_r+0x216>
  40232a:	f043 0320 	orr.w	r3, r3, #32
  40232e:	f899 2000 	ldrb.w	r2, [r9]
  402332:	e52e      	b.n	401d92 <_vfiprintf_r+0xce>
  402334:	9908      	ldr	r1, [sp, #32]
  402336:	9607      	str	r6, [sp, #28]
  402338:	f8d1 8000 	ldr.w	r8, [r1]
  40233c:	f04f 0200 	mov.w	r2, #0
  402340:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  402344:	1d0e      	adds	r6, r1, #4
  402346:	f1b8 0f00 	cmp.w	r8, #0
  40234a:	f000 8281 	beq.w	402850 <_vfiprintf_r+0xb8c>
  40234e:	1c67      	adds	r7, r4, #1
  402350:	f000 8260 	beq.w	402814 <_vfiprintf_r+0xb50>
  402354:	4622      	mov	r2, r4
  402356:	2100      	movs	r1, #0
  402358:	4640      	mov	r0, r8
  40235a:	9302      	str	r3, [sp, #8]
  40235c:	f001 fb40 	bl	4039e0 <memchr>
  402360:	9b02      	ldr	r3, [sp, #8]
  402362:	2800      	cmp	r0, #0
  402364:	f000 8284 	beq.w	402870 <_vfiprintf_r+0xbac>
  402368:	eba0 0208 	sub.w	r2, r0, r8
  40236c:	9205      	str	r2, [sp, #20]
  40236e:	9608      	str	r6, [sp, #32]
  402370:	9303      	str	r3, [sp, #12]
  402372:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402376:	2400      	movs	r4, #0
  402378:	e5ce      	b.n	401f18 <_vfiprintf_r+0x254>
  40237a:	f043 0301 	orr.w	r3, r3, #1
  40237e:	f899 2000 	ldrb.w	r2, [r9]
  402382:	e506      	b.n	401d92 <_vfiprintf_r+0xce>
  402384:	f899 2000 	ldrb.w	r2, [r9]
  402388:	2001      	movs	r0, #1
  40238a:	252b      	movs	r5, #43	; 0x2b
  40238c:	e501      	b.n	401d92 <_vfiprintf_r+0xce>
  40238e:	2800      	cmp	r0, #0
  402390:	f040 8287 	bne.w	4028a2 <_vfiprintf_r+0xbde>
  402394:	0699      	lsls	r1, r3, #26
  402396:	f100 8231 	bmi.w	4027fc <_vfiprintf_r+0xb38>
  40239a:	06da      	lsls	r2, r3, #27
  40239c:	d421      	bmi.n	4023e2 <_vfiprintf_r+0x71e>
  40239e:	065b      	lsls	r3, r3, #25
  4023a0:	d51f      	bpl.n	4023e2 <_vfiprintf_r+0x71e>
  4023a2:	9a08      	ldr	r2, [sp, #32]
  4023a4:	6813      	ldr	r3, [r2, #0]
  4023a6:	3204      	adds	r2, #4
  4023a8:	9208      	str	r2, [sp, #32]
  4023aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4023ae:	801a      	strh	r2, [r3, #0]
  4023b0:	e4ba      	b.n	401d28 <_vfiprintf_r+0x64>
  4023b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4023b6:	f899 2000 	ldrb.w	r2, [r9]
  4023ba:	e4ea      	b.n	401d92 <_vfiprintf_r+0xce>
  4023bc:	9607      	str	r6, [sp, #28]
  4023be:	2800      	cmp	r0, #0
  4023c0:	f040 8275 	bne.w	4028ae <_vfiprintf_r+0xbea>
  4023c4:	2a00      	cmp	r2, #0
  4023c6:	f000 8088 	beq.w	4024da <_vfiprintf_r+0x816>
  4023ca:	2101      	movs	r1, #1
  4023cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4023d0:	f04f 0200 	mov.w	r2, #0
  4023d4:	9102      	str	r1, [sp, #8]
  4023d6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4023da:	9105      	str	r1, [sp, #20]
  4023dc:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  4023e0:	e6d3      	b.n	40218a <_vfiprintf_r+0x4c6>
  4023e2:	9a08      	ldr	r2, [sp, #32]
  4023e4:	6813      	ldr	r3, [r2, #0]
  4023e6:	3204      	adds	r2, #4
  4023e8:	9208      	str	r2, [sp, #32]
  4023ea:	9a04      	ldr	r2, [sp, #16]
  4023ec:	601a      	str	r2, [r3, #0]
  4023ee:	e49b      	b.n	401d28 <_vfiprintf_r+0x64>
  4023f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4023f2:	9901      	ldr	r1, [sp, #4]
  4023f4:	4620      	mov	r0, r4
  4023f6:	f7ff fc25 	bl	401c44 <__sprint_r.part.0>
  4023fa:	2800      	cmp	r0, #0
  4023fc:	d174      	bne.n	4024e8 <_vfiprintf_r+0x824>
  4023fe:	9910      	ldr	r1, [sp, #64]	; 0x40
  402400:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402402:	f101 0c01 	add.w	ip, r1, #1
  402406:	46de      	mov	lr, fp
  402408:	e5b3      	b.n	401f72 <_vfiprintf_r+0x2ae>
  40240a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40240c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40240e:	1c48      	adds	r0, r1, #1
  402410:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402414:	2d00      	cmp	r5, #0
  402416:	f43f add6 	beq.w	401fc6 <_vfiprintf_r+0x302>
  40241a:	3201      	adds	r2, #1
  40241c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  402420:	2101      	movs	r1, #1
  402422:	2807      	cmp	r0, #7
  402424:	9211      	str	r2, [sp, #68]	; 0x44
  402426:	9010      	str	r0, [sp, #64]	; 0x40
  402428:	f8ca 5000 	str.w	r5, [sl]
  40242c:	f8ca 1004 	str.w	r1, [sl, #4]
  402430:	f340 80b6 	ble.w	4025a0 <_vfiprintf_r+0x8dc>
  402434:	2a00      	cmp	r2, #0
  402436:	f040 8155 	bne.w	4026e4 <_vfiprintf_r+0xa20>
  40243a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40243c:	2b00      	cmp	r3, #0
  40243e:	f43f add3 	beq.w	401fe8 <_vfiprintf_r+0x324>
  402442:	ab0e      	add	r3, sp, #56	; 0x38
  402444:	2202      	movs	r2, #2
  402446:	4608      	mov	r0, r1
  402448:	931c      	str	r3, [sp, #112]	; 0x70
  40244a:	921d      	str	r2, [sp, #116]	; 0x74
  40244c:	46da      	mov	sl, fp
  40244e:	4601      	mov	r1, r0
  402450:	f10a 0a08 	add.w	sl, sl, #8
  402454:	3001      	adds	r0, #1
  402456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402458:	2b80      	cmp	r3, #128	; 0x80
  40245a:	f43f adcd 	beq.w	401ff8 <_vfiprintf_r+0x334>
  40245e:	9b05      	ldr	r3, [sp, #20]
  402460:	1ae4      	subs	r4, r4, r3
  402462:	2c00      	cmp	r4, #0
  402464:	f77f ae07 	ble.w	402076 <_vfiprintf_r+0x3b2>
  402468:	2c10      	cmp	r4, #16
  40246a:	4d2c      	ldr	r5, [pc, #176]	; (40251c <_vfiprintf_r+0x858>)
  40246c:	dd1d      	ble.n	4024aa <_vfiprintf_r+0x7e6>
  40246e:	46d6      	mov	lr, sl
  402470:	2610      	movs	r6, #16
  402472:	9f06      	ldr	r7, [sp, #24]
  402474:	f8dd a004 	ldr.w	sl, [sp, #4]
  402478:	e006      	b.n	402488 <_vfiprintf_r+0x7c4>
  40247a:	1c88      	adds	r0, r1, #2
  40247c:	f10e 0e08 	add.w	lr, lr, #8
  402480:	4619      	mov	r1, r3
  402482:	3c10      	subs	r4, #16
  402484:	2c10      	cmp	r4, #16
  402486:	dd0f      	ble.n	4024a8 <_vfiprintf_r+0x7e4>
  402488:	1c4b      	adds	r3, r1, #1
  40248a:	3210      	adds	r2, #16
  40248c:	2b07      	cmp	r3, #7
  40248e:	9211      	str	r2, [sp, #68]	; 0x44
  402490:	e88e 0060 	stmia.w	lr, {r5, r6}
  402494:	9310      	str	r3, [sp, #64]	; 0x40
  402496:	ddf0      	ble.n	40247a <_vfiprintf_r+0x7b6>
  402498:	b9a2      	cbnz	r2, 4024c4 <_vfiprintf_r+0x800>
  40249a:	3c10      	subs	r4, #16
  40249c:	2c10      	cmp	r4, #16
  40249e:	f04f 0001 	mov.w	r0, #1
  4024a2:	4611      	mov	r1, r2
  4024a4:	46de      	mov	lr, fp
  4024a6:	dcef      	bgt.n	402488 <_vfiprintf_r+0x7c4>
  4024a8:	46f2      	mov	sl, lr
  4024aa:	4422      	add	r2, r4
  4024ac:	2807      	cmp	r0, #7
  4024ae:	9211      	str	r2, [sp, #68]	; 0x44
  4024b0:	f8ca 5000 	str.w	r5, [sl]
  4024b4:	f8ca 4004 	str.w	r4, [sl, #4]
  4024b8:	9010      	str	r0, [sp, #64]	; 0x40
  4024ba:	dc31      	bgt.n	402520 <_vfiprintf_r+0x85c>
  4024bc:	f10a 0a08 	add.w	sl, sl, #8
  4024c0:	3001      	adds	r0, #1
  4024c2:	e5d8      	b.n	402076 <_vfiprintf_r+0x3b2>
  4024c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4024c6:	4651      	mov	r1, sl
  4024c8:	4638      	mov	r0, r7
  4024ca:	f7ff fbbb 	bl	401c44 <__sprint_r.part.0>
  4024ce:	b958      	cbnz	r0, 4024e8 <_vfiprintf_r+0x824>
  4024d0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4024d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4024d4:	1c48      	adds	r0, r1, #1
  4024d6:	46de      	mov	lr, fp
  4024d8:	e7d3      	b.n	402482 <_vfiprintf_r+0x7be>
  4024da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4024dc:	b123      	cbz	r3, 4024e8 <_vfiprintf_r+0x824>
  4024de:	9806      	ldr	r0, [sp, #24]
  4024e0:	9901      	ldr	r1, [sp, #4]
  4024e2:	aa0f      	add	r2, sp, #60	; 0x3c
  4024e4:	f7ff fbae 	bl	401c44 <__sprint_r.part.0>
  4024e8:	9b01      	ldr	r3, [sp, #4]
  4024ea:	899b      	ldrh	r3, [r3, #12]
  4024ec:	065b      	lsls	r3, r3, #25
  4024ee:	f57f acd2 	bpl.w	401e96 <_vfiprintf_r+0x1d2>
  4024f2:	f04f 33ff 	mov.w	r3, #4294967295
  4024f6:	9304      	str	r3, [sp, #16]
  4024f8:	e4cd      	b.n	401e96 <_vfiprintf_r+0x1d2>
  4024fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4024fc:	4641      	mov	r1, r8
  4024fe:	4638      	mov	r0, r7
  402500:	f7ff fba0 	bl	401c44 <__sprint_r.part.0>
  402504:	2800      	cmp	r0, #0
  402506:	d1ef      	bne.n	4024e8 <_vfiprintf_r+0x824>
  402508:	9910      	ldr	r1, [sp, #64]	; 0x40
  40250a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40250c:	1c48      	adds	r0, r1, #1
  40250e:	46da      	mov	sl, fp
  402510:	e5d8      	b.n	4020c4 <_vfiprintf_r+0x400>
  402512:	bf00      	nop
  402514:	004047e0 	.word	0x004047e0
  402518:	004047f4 	.word	0x004047f4
  40251c:	00404820 	.word	0x00404820
  402520:	2a00      	cmp	r2, #0
  402522:	f040 8100 	bne.w	402726 <_vfiprintf_r+0xa62>
  402526:	9a05      	ldr	r2, [sp, #20]
  402528:	921d      	str	r2, [sp, #116]	; 0x74
  40252a:	2301      	movs	r3, #1
  40252c:	9211      	str	r2, [sp, #68]	; 0x44
  40252e:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  402532:	9310      	str	r3, [sp, #64]	; 0x40
  402534:	46da      	mov	sl, fp
  402536:	f10a 0a08 	add.w	sl, sl, #8
  40253a:	9b03      	ldr	r3, [sp, #12]
  40253c:	0759      	lsls	r1, r3, #29
  40253e:	d505      	bpl.n	40254c <_vfiprintf_r+0x888>
  402540:	9b07      	ldr	r3, [sp, #28]
  402542:	9902      	ldr	r1, [sp, #8]
  402544:	1a5c      	subs	r4, r3, r1
  402546:	2c00      	cmp	r4, #0
  402548:	f73f adae 	bgt.w	4020a8 <_vfiprintf_r+0x3e4>
  40254c:	9b04      	ldr	r3, [sp, #16]
  40254e:	9907      	ldr	r1, [sp, #28]
  402550:	9802      	ldr	r0, [sp, #8]
  402552:	4281      	cmp	r1, r0
  402554:	bfac      	ite	ge
  402556:	185b      	addge	r3, r3, r1
  402558:	181b      	addlt	r3, r3, r0
  40255a:	9304      	str	r3, [sp, #16]
  40255c:	bb7a      	cbnz	r2, 4025be <_vfiprintf_r+0x8fa>
  40255e:	2300      	movs	r3, #0
  402560:	9310      	str	r3, [sp, #64]	; 0x40
  402562:	46da      	mov	sl, fp
  402564:	f7ff bbe0 	b.w	401d28 <_vfiprintf_r+0x64>
  402568:	aa0f      	add	r2, sp, #60	; 0x3c
  40256a:	9901      	ldr	r1, [sp, #4]
  40256c:	4620      	mov	r0, r4
  40256e:	f7ff fb69 	bl	401c44 <__sprint_r.part.0>
  402572:	2800      	cmp	r0, #0
  402574:	d1b8      	bne.n	4024e8 <_vfiprintf_r+0x824>
  402576:	9910      	ldr	r1, [sp, #64]	; 0x40
  402578:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40257a:	f101 0e01 	add.w	lr, r1, #1
  40257e:	46dc      	mov	ip, fp
  402580:	e54e      	b.n	402020 <_vfiprintf_r+0x35c>
  402582:	2a00      	cmp	r2, #0
  402584:	f040 811c 	bne.w	4027c0 <_vfiprintf_r+0xafc>
  402588:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40258c:	2900      	cmp	r1, #0
  40258e:	f000 8111 	beq.w	4027b4 <_vfiprintf_r+0xaf0>
  402592:	2201      	movs	r2, #1
  402594:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  402598:	4610      	mov	r0, r2
  40259a:	921d      	str	r2, [sp, #116]	; 0x74
  40259c:	911c      	str	r1, [sp, #112]	; 0x70
  40259e:	46da      	mov	sl, fp
  4025a0:	4601      	mov	r1, r0
  4025a2:	f10a 0a08 	add.w	sl, sl, #8
  4025a6:	3001      	adds	r0, #1
  4025a8:	e50d      	b.n	401fc6 <_vfiprintf_r+0x302>
  4025aa:	9b03      	ldr	r3, [sp, #12]
  4025ac:	2a01      	cmp	r2, #1
  4025ae:	f000 8090 	beq.w	4026d2 <_vfiprintf_r+0xa0e>
  4025b2:	2a02      	cmp	r2, #2
  4025b4:	d10b      	bne.n	4025ce <_vfiprintf_r+0x90a>
  4025b6:	9303      	str	r3, [sp, #12]
  4025b8:	2600      	movs	r6, #0
  4025ba:	2700      	movs	r7, #0
  4025bc:	e615      	b.n	4021ea <_vfiprintf_r+0x526>
  4025be:	aa0f      	add	r2, sp, #60	; 0x3c
  4025c0:	9901      	ldr	r1, [sp, #4]
  4025c2:	9806      	ldr	r0, [sp, #24]
  4025c4:	f7ff fb3e 	bl	401c44 <__sprint_r.part.0>
  4025c8:	2800      	cmp	r0, #0
  4025ca:	d0c8      	beq.n	40255e <_vfiprintf_r+0x89a>
  4025cc:	e78c      	b.n	4024e8 <_vfiprintf_r+0x824>
  4025ce:	9303      	str	r3, [sp, #12]
  4025d0:	2600      	movs	r6, #0
  4025d2:	2700      	movs	r7, #0
  4025d4:	4659      	mov	r1, fp
  4025d6:	e000      	b.n	4025da <_vfiprintf_r+0x916>
  4025d8:	4641      	mov	r1, r8
  4025da:	08f2      	lsrs	r2, r6, #3
  4025dc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4025e0:	08f8      	lsrs	r0, r7, #3
  4025e2:	f006 0307 	and.w	r3, r6, #7
  4025e6:	4607      	mov	r7, r0
  4025e8:	4616      	mov	r6, r2
  4025ea:	3330      	adds	r3, #48	; 0x30
  4025ec:	ea56 0207 	orrs.w	r2, r6, r7
  4025f0:	f801 3c01 	strb.w	r3, [r1, #-1]
  4025f4:	f101 38ff 	add.w	r8, r1, #4294967295
  4025f8:	d1ee      	bne.n	4025d8 <_vfiprintf_r+0x914>
  4025fa:	9a03      	ldr	r2, [sp, #12]
  4025fc:	07d6      	lsls	r6, r2, #31
  4025fe:	f57f ae04 	bpl.w	40220a <_vfiprintf_r+0x546>
  402602:	2b30      	cmp	r3, #48	; 0x30
  402604:	f43f ae01 	beq.w	40220a <_vfiprintf_r+0x546>
  402608:	3902      	subs	r1, #2
  40260a:	2330      	movs	r3, #48	; 0x30
  40260c:	f808 3c01 	strb.w	r3, [r8, #-1]
  402610:	ebab 0301 	sub.w	r3, fp, r1
  402614:	9305      	str	r3, [sp, #20]
  402616:	4688      	mov	r8, r1
  402618:	e47e      	b.n	401f18 <_vfiprintf_r+0x254>
  40261a:	9b04      	ldr	r3, [sp, #16]
  40261c:	9a07      	ldr	r2, [sp, #28]
  40261e:	428a      	cmp	r2, r1
  402620:	bfac      	ite	ge
  402622:	189b      	addge	r3, r3, r2
  402624:	185b      	addlt	r3, r3, r1
  402626:	9304      	str	r3, [sp, #16]
  402628:	e799      	b.n	40255e <_vfiprintf_r+0x89a>
  40262a:	2202      	movs	r2, #2
  40262c:	e455      	b.n	401eda <_vfiprintf_r+0x216>
  40262e:	2f00      	cmp	r7, #0
  402630:	bf08      	it	eq
  402632:	2e0a      	cmpeq	r6, #10
  402634:	d34c      	bcc.n	4026d0 <_vfiprintf_r+0xa0c>
  402636:	46d8      	mov	r8, fp
  402638:	4630      	mov	r0, r6
  40263a:	4639      	mov	r1, r7
  40263c:	220a      	movs	r2, #10
  40263e:	2300      	movs	r3, #0
  402640:	f001 ff28 	bl	404494 <__aeabi_uldivmod>
  402644:	3230      	adds	r2, #48	; 0x30
  402646:	f808 2d01 	strb.w	r2, [r8, #-1]!
  40264a:	4630      	mov	r0, r6
  40264c:	4639      	mov	r1, r7
  40264e:	2300      	movs	r3, #0
  402650:	220a      	movs	r2, #10
  402652:	f001 ff1f 	bl	404494 <__aeabi_uldivmod>
  402656:	4606      	mov	r6, r0
  402658:	460f      	mov	r7, r1
  40265a:	ea56 0307 	orrs.w	r3, r6, r7
  40265e:	d1eb      	bne.n	402638 <_vfiprintf_r+0x974>
  402660:	ebab 0308 	sub.w	r3, fp, r8
  402664:	9305      	str	r3, [sp, #20]
  402666:	e457      	b.n	401f18 <_vfiprintf_r+0x254>
  402668:	9405      	str	r4, [sp, #20]
  40266a:	46d8      	mov	r8, fp
  40266c:	e454      	b.n	401f18 <_vfiprintf_r+0x254>
  40266e:	aa0f      	add	r2, sp, #60	; 0x3c
  402670:	9901      	ldr	r1, [sp, #4]
  402672:	9806      	ldr	r0, [sp, #24]
  402674:	f7ff fae6 	bl	401c44 <__sprint_r.part.0>
  402678:	2800      	cmp	r0, #0
  40267a:	f47f af35 	bne.w	4024e8 <_vfiprintf_r+0x824>
  40267e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402680:	46da      	mov	sl, fp
  402682:	e75a      	b.n	40253a <_vfiprintf_r+0x876>
  402684:	aa0f      	add	r2, sp, #60	; 0x3c
  402686:	9901      	ldr	r1, [sp, #4]
  402688:	9806      	ldr	r0, [sp, #24]
  40268a:	f7ff fadb 	bl	401c44 <__sprint_r.part.0>
  40268e:	2800      	cmp	r0, #0
  402690:	f47f af2a 	bne.w	4024e8 <_vfiprintf_r+0x824>
  402694:	46da      	mov	sl, fp
  402696:	f7ff bbe0 	b.w	401e5a <_vfiprintf_r+0x196>
  40269a:	3104      	adds	r1, #4
  40269c:	6816      	ldr	r6, [r2, #0]
  40269e:	9108      	str	r1, [sp, #32]
  4026a0:	2201      	movs	r2, #1
  4026a2:	2700      	movs	r7, #0
  4026a4:	e419      	b.n	401eda <_vfiprintf_r+0x216>
  4026a6:	9808      	ldr	r0, [sp, #32]
  4026a8:	4601      	mov	r1, r0
  4026aa:	3104      	adds	r1, #4
  4026ac:	6806      	ldr	r6, [r0, #0]
  4026ae:	9108      	str	r1, [sp, #32]
  4026b0:	2700      	movs	r7, #0
  4026b2:	e412      	b.n	401eda <_vfiprintf_r+0x216>
  4026b4:	680e      	ldr	r6, [r1, #0]
  4026b6:	3104      	adds	r1, #4
  4026b8:	9108      	str	r1, [sp, #32]
  4026ba:	2700      	movs	r7, #0
  4026bc:	e5d9      	b.n	402272 <_vfiprintf_r+0x5ae>
  4026be:	9908      	ldr	r1, [sp, #32]
  4026c0:	680e      	ldr	r6, [r1, #0]
  4026c2:	460a      	mov	r2, r1
  4026c4:	17f7      	asrs	r7, r6, #31
  4026c6:	3204      	adds	r2, #4
  4026c8:	9208      	str	r2, [sp, #32]
  4026ca:	4630      	mov	r0, r6
  4026cc:	4639      	mov	r1, r7
  4026ce:	e575      	b.n	4021bc <_vfiprintf_r+0x4f8>
  4026d0:	9b03      	ldr	r3, [sp, #12]
  4026d2:	9303      	str	r3, [sp, #12]
  4026d4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
  4026d8:	3630      	adds	r6, #48	; 0x30
  4026da:	2301      	movs	r3, #1
  4026dc:	f808 6d41 	strb.w	r6, [r8, #-65]!
  4026e0:	9305      	str	r3, [sp, #20]
  4026e2:	e419      	b.n	401f18 <_vfiprintf_r+0x254>
  4026e4:	aa0f      	add	r2, sp, #60	; 0x3c
  4026e6:	9901      	ldr	r1, [sp, #4]
  4026e8:	9806      	ldr	r0, [sp, #24]
  4026ea:	f7ff faab 	bl	401c44 <__sprint_r.part.0>
  4026ee:	2800      	cmp	r0, #0
  4026f0:	f47f aefa 	bne.w	4024e8 <_vfiprintf_r+0x824>
  4026f4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4026f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4026f8:	1c48      	adds	r0, r1, #1
  4026fa:	46da      	mov	sl, fp
  4026fc:	e463      	b.n	401fc6 <_vfiprintf_r+0x302>
  4026fe:	aa0f      	add	r2, sp, #60	; 0x3c
  402700:	9901      	ldr	r1, [sp, #4]
  402702:	9806      	ldr	r0, [sp, #24]
  402704:	f7ff fa9e 	bl	401c44 <__sprint_r.part.0>
  402708:	2800      	cmp	r0, #0
  40270a:	f47f aeed 	bne.w	4024e8 <_vfiprintf_r+0x824>
  40270e:	9910      	ldr	r1, [sp, #64]	; 0x40
  402710:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402712:	1c48      	adds	r0, r1, #1
  402714:	46da      	mov	sl, fp
  402716:	e69e      	b.n	402456 <_vfiprintf_r+0x792>
  402718:	2a00      	cmp	r2, #0
  40271a:	f040 8086 	bne.w	40282a <_vfiprintf_r+0xb66>
  40271e:	2001      	movs	r0, #1
  402720:	4611      	mov	r1, r2
  402722:	46da      	mov	sl, fp
  402724:	e69b      	b.n	40245e <_vfiprintf_r+0x79a>
  402726:	aa0f      	add	r2, sp, #60	; 0x3c
  402728:	9901      	ldr	r1, [sp, #4]
  40272a:	9806      	ldr	r0, [sp, #24]
  40272c:	f7ff fa8a 	bl	401c44 <__sprint_r.part.0>
  402730:	2800      	cmp	r0, #0
  402732:	f47f aed9 	bne.w	4024e8 <_vfiprintf_r+0x824>
  402736:	9810      	ldr	r0, [sp, #64]	; 0x40
  402738:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40273a:	3001      	adds	r0, #1
  40273c:	46da      	mov	sl, fp
  40273e:	e49a      	b.n	402076 <_vfiprintf_r+0x3b2>
  402740:	9e08      	ldr	r6, [sp, #32]
  402742:	3607      	adds	r6, #7
  402744:	f026 0607 	bic.w	r6, r6, #7
  402748:	e9d6 0100 	ldrd	r0, r1, [r6]
  40274c:	f106 0208 	add.w	r2, r6, #8
  402750:	9208      	str	r2, [sp, #32]
  402752:	4606      	mov	r6, r0
  402754:	460f      	mov	r7, r1
  402756:	e531      	b.n	4021bc <_vfiprintf_r+0x4f8>
  402758:	9e08      	ldr	r6, [sp, #32]
  40275a:	3607      	adds	r6, #7
  40275c:	f026 0207 	bic.w	r2, r6, #7
  402760:	f102 0108 	add.w	r1, r2, #8
  402764:	e9d2 6700 	ldrd	r6, r7, [r2]
  402768:	9108      	str	r1, [sp, #32]
  40276a:	2201      	movs	r2, #1
  40276c:	f7ff bbb5 	b.w	401eda <_vfiprintf_r+0x216>
  402770:	9e08      	ldr	r6, [sp, #32]
  402772:	3607      	adds	r6, #7
  402774:	f026 0207 	bic.w	r2, r6, #7
  402778:	f102 0108 	add.w	r1, r2, #8
  40277c:	e9d2 6700 	ldrd	r6, r7, [r2]
  402780:	9108      	str	r1, [sp, #32]
  402782:	2200      	movs	r2, #0
  402784:	f7ff bba9 	b.w	401eda <_vfiprintf_r+0x216>
  402788:	9e08      	ldr	r6, [sp, #32]
  40278a:	3607      	adds	r6, #7
  40278c:	f026 0107 	bic.w	r1, r6, #7
  402790:	f101 0008 	add.w	r0, r1, #8
  402794:	9008      	str	r0, [sp, #32]
  402796:	e9d1 6700 	ldrd	r6, r7, [r1]
  40279a:	e56a      	b.n	402272 <_vfiprintf_r+0x5ae>
  40279c:	46d8      	mov	r8, fp
  40279e:	f7ff bbbb 	b.w	401f18 <_vfiprintf_r+0x254>
  4027a2:	252d      	movs	r5, #45	; 0x2d
  4027a4:	4276      	negs	r6, r6
  4027a6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4027aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4027ae:	2201      	movs	r2, #1
  4027b0:	f7ff bb98 	b.w	401ee4 <_vfiprintf_r+0x220>
  4027b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4027b6:	b9d3      	cbnz	r3, 4027ee <_vfiprintf_r+0xb2a>
  4027b8:	4611      	mov	r1, r2
  4027ba:	2001      	movs	r0, #1
  4027bc:	46da      	mov	sl, fp
  4027be:	e64e      	b.n	40245e <_vfiprintf_r+0x79a>
  4027c0:	aa0f      	add	r2, sp, #60	; 0x3c
  4027c2:	9901      	ldr	r1, [sp, #4]
  4027c4:	9806      	ldr	r0, [sp, #24]
  4027c6:	f7ff fa3d 	bl	401c44 <__sprint_r.part.0>
  4027ca:	2800      	cmp	r0, #0
  4027cc:	f47f ae8c 	bne.w	4024e8 <_vfiprintf_r+0x824>
  4027d0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4027d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027d4:	1c48      	adds	r0, r1, #1
  4027d6:	46da      	mov	sl, fp
  4027d8:	e61a      	b.n	402410 <_vfiprintf_r+0x74c>
  4027da:	aa0f      	add	r2, sp, #60	; 0x3c
  4027dc:	9901      	ldr	r1, [sp, #4]
  4027de:	9806      	ldr	r0, [sp, #24]
  4027e0:	f7ff fa30 	bl	401c44 <__sprint_r.part.0>
  4027e4:	2800      	cmp	r0, #0
  4027e6:	f47f ae7f 	bne.w	4024e8 <_vfiprintf_r+0x824>
  4027ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027ec:	e6ae      	b.n	40254c <_vfiprintf_r+0x888>
  4027ee:	ab0e      	add	r3, sp, #56	; 0x38
  4027f0:	2202      	movs	r2, #2
  4027f2:	931c      	str	r3, [sp, #112]	; 0x70
  4027f4:	921d      	str	r2, [sp, #116]	; 0x74
  4027f6:	2001      	movs	r0, #1
  4027f8:	46da      	mov	sl, fp
  4027fa:	e628      	b.n	40244e <_vfiprintf_r+0x78a>
  4027fc:	9a08      	ldr	r2, [sp, #32]
  4027fe:	9904      	ldr	r1, [sp, #16]
  402800:	6813      	ldr	r3, [r2, #0]
  402802:	17cd      	asrs	r5, r1, #31
  402804:	4608      	mov	r0, r1
  402806:	3204      	adds	r2, #4
  402808:	4629      	mov	r1, r5
  40280a:	9208      	str	r2, [sp, #32]
  40280c:	e9c3 0100 	strd	r0, r1, [r3]
  402810:	f7ff ba8a 	b.w	401d28 <_vfiprintf_r+0x64>
  402814:	4640      	mov	r0, r8
  402816:	9608      	str	r6, [sp, #32]
  402818:	9303      	str	r3, [sp, #12]
  40281a:	f001 fc31 	bl	404080 <strlen>
  40281e:	2400      	movs	r4, #0
  402820:	9005      	str	r0, [sp, #20]
  402822:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402826:	f7ff bb77 	b.w	401f18 <_vfiprintf_r+0x254>
  40282a:	aa0f      	add	r2, sp, #60	; 0x3c
  40282c:	9901      	ldr	r1, [sp, #4]
  40282e:	9806      	ldr	r0, [sp, #24]
  402830:	f7ff fa08 	bl	401c44 <__sprint_r.part.0>
  402834:	2800      	cmp	r0, #0
  402836:	f47f ae57 	bne.w	4024e8 <_vfiprintf_r+0x824>
  40283a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40283c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40283e:	1c48      	adds	r0, r1, #1
  402840:	46da      	mov	sl, fp
  402842:	e60c      	b.n	40245e <_vfiprintf_r+0x79a>
  402844:	9910      	ldr	r1, [sp, #64]	; 0x40
  402846:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402848:	4e1c      	ldr	r6, [pc, #112]	; (4028bc <_vfiprintf_r+0xbf8>)
  40284a:	3101      	adds	r1, #1
  40284c:	f7ff bba9 	b.w	401fa2 <_vfiprintf_r+0x2de>
  402850:	2c06      	cmp	r4, #6
  402852:	bf28      	it	cs
  402854:	2406      	movcs	r4, #6
  402856:	9405      	str	r4, [sp, #20]
  402858:	9608      	str	r6, [sp, #32]
  40285a:	9402      	str	r4, [sp, #8]
  40285c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4028c0 <_vfiprintf_r+0xbfc>
  402860:	e493      	b.n	40218a <_vfiprintf_r+0x4c6>
  402862:	9810      	ldr	r0, [sp, #64]	; 0x40
  402864:	4e15      	ldr	r6, [pc, #84]	; (4028bc <_vfiprintf_r+0xbf8>)
  402866:	3001      	adds	r0, #1
  402868:	e443      	b.n	4020f2 <_vfiprintf_r+0x42e>
  40286a:	4686      	mov	lr, r0
  40286c:	f7ff bbef 	b.w	40204e <_vfiprintf_r+0x38a>
  402870:	9405      	str	r4, [sp, #20]
  402872:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402876:	9608      	str	r6, [sp, #32]
  402878:	9303      	str	r3, [sp, #12]
  40287a:	4604      	mov	r4, r0
  40287c:	f7ff bb4c 	b.w	401f18 <_vfiprintf_r+0x254>
  402880:	9908      	ldr	r1, [sp, #32]
  402882:	f899 2001 	ldrb.w	r2, [r9, #1]
  402886:	680c      	ldr	r4, [r1, #0]
  402888:	3104      	adds	r1, #4
  40288a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40288e:	46b9      	mov	r9, r7
  402890:	9108      	str	r1, [sp, #32]
  402892:	f7ff ba7e 	b.w	401d92 <_vfiprintf_r+0xce>
  402896:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40289a:	e4c6      	b.n	40222a <_vfiprintf_r+0x566>
  40289c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4028a0:	e47a      	b.n	402198 <_vfiprintf_r+0x4d4>
  4028a2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4028a6:	e575      	b.n	402394 <_vfiprintf_r+0x6d0>
  4028a8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4028ac:	e4d0      	b.n	402250 <_vfiprintf_r+0x58c>
  4028ae:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4028b2:	e587      	b.n	4023c4 <_vfiprintf_r+0x700>
  4028b4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4028b8:	e522      	b.n	402300 <_vfiprintf_r+0x63c>
  4028ba:	bf00      	nop
  4028bc:	00404810 	.word	0x00404810
  4028c0:	00404808 	.word	0x00404808

004028c4 <__sbprintf>:
  4028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4028c6:	460c      	mov	r4, r1
  4028c8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  4028cc:	8989      	ldrh	r1, [r1, #12]
  4028ce:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4028d0:	89e5      	ldrh	r5, [r4, #14]
  4028d2:	9619      	str	r6, [sp, #100]	; 0x64
  4028d4:	f021 0102 	bic.w	r1, r1, #2
  4028d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4028da:	f8ad 500e 	strh.w	r5, [sp, #14]
  4028de:	2500      	movs	r5, #0
  4028e0:	69e7      	ldr	r7, [r4, #28]
  4028e2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4028e6:	9609      	str	r6, [sp, #36]	; 0x24
  4028e8:	9506      	str	r5, [sp, #24]
  4028ea:	ae1a      	add	r6, sp, #104	; 0x68
  4028ec:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4028f0:	4669      	mov	r1, sp
  4028f2:	9600      	str	r6, [sp, #0]
  4028f4:	9604      	str	r6, [sp, #16]
  4028f6:	9502      	str	r5, [sp, #8]
  4028f8:	9505      	str	r5, [sp, #20]
  4028fa:	9707      	str	r7, [sp, #28]
  4028fc:	4606      	mov	r6, r0
  4028fe:	f7ff f9e1 	bl	401cc4 <_vfiprintf_r>
  402902:	1e05      	subs	r5, r0, #0
  402904:	db07      	blt.n	402916 <__sbprintf+0x52>
  402906:	4630      	mov	r0, r6
  402908:	4669      	mov	r1, sp
  40290a:	f000 f925 	bl	402b58 <_fflush_r>
  40290e:	2800      	cmp	r0, #0
  402910:	bf18      	it	ne
  402912:	f04f 35ff 	movne.w	r5, #4294967295
  402916:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40291a:	065b      	lsls	r3, r3, #25
  40291c:	d503      	bpl.n	402926 <__sbprintf+0x62>
  40291e:	89a3      	ldrh	r3, [r4, #12]
  402920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402924:	81a3      	strh	r3, [r4, #12]
  402926:	4628      	mov	r0, r5
  402928:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  40292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40292e:	bf00      	nop

00402930 <__swsetup_r>:
  402930:	b538      	push	{r3, r4, r5, lr}
  402932:	4b30      	ldr	r3, [pc, #192]	; (4029f4 <__swsetup_r+0xc4>)
  402934:	681b      	ldr	r3, [r3, #0]
  402936:	4605      	mov	r5, r0
  402938:	460c      	mov	r4, r1
  40293a:	b113      	cbz	r3, 402942 <__swsetup_r+0x12>
  40293c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40293e:	2a00      	cmp	r2, #0
  402940:	d038      	beq.n	4029b4 <__swsetup_r+0x84>
  402942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402946:	b293      	uxth	r3, r2
  402948:	0718      	lsls	r0, r3, #28
  40294a:	d50c      	bpl.n	402966 <__swsetup_r+0x36>
  40294c:	6920      	ldr	r0, [r4, #16]
  40294e:	b1a8      	cbz	r0, 40297c <__swsetup_r+0x4c>
  402950:	f013 0201 	ands.w	r2, r3, #1
  402954:	d01e      	beq.n	402994 <__swsetup_r+0x64>
  402956:	6963      	ldr	r3, [r4, #20]
  402958:	2200      	movs	r2, #0
  40295a:	425b      	negs	r3, r3
  40295c:	61a3      	str	r3, [r4, #24]
  40295e:	60a2      	str	r2, [r4, #8]
  402960:	b1f0      	cbz	r0, 4029a0 <__swsetup_r+0x70>
  402962:	2000      	movs	r0, #0
  402964:	bd38      	pop	{r3, r4, r5, pc}
  402966:	06d9      	lsls	r1, r3, #27
  402968:	d53c      	bpl.n	4029e4 <__swsetup_r+0xb4>
  40296a:	0758      	lsls	r0, r3, #29
  40296c:	d426      	bmi.n	4029bc <__swsetup_r+0x8c>
  40296e:	6920      	ldr	r0, [r4, #16]
  402970:	f042 0308 	orr.w	r3, r2, #8
  402974:	81a3      	strh	r3, [r4, #12]
  402976:	b29b      	uxth	r3, r3
  402978:	2800      	cmp	r0, #0
  40297a:	d1e9      	bne.n	402950 <__swsetup_r+0x20>
  40297c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402980:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402984:	d0e4      	beq.n	402950 <__swsetup_r+0x20>
  402986:	4628      	mov	r0, r5
  402988:	4621      	mov	r1, r4
  40298a:	f000 fd17 	bl	4033bc <__smakebuf_r>
  40298e:	89a3      	ldrh	r3, [r4, #12]
  402990:	6920      	ldr	r0, [r4, #16]
  402992:	e7dd      	b.n	402950 <__swsetup_r+0x20>
  402994:	0799      	lsls	r1, r3, #30
  402996:	bf58      	it	pl
  402998:	6962      	ldrpl	r2, [r4, #20]
  40299a:	60a2      	str	r2, [r4, #8]
  40299c:	2800      	cmp	r0, #0
  40299e:	d1e0      	bne.n	402962 <__swsetup_r+0x32>
  4029a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029a4:	061a      	lsls	r2, r3, #24
  4029a6:	d5dd      	bpl.n	402964 <__swsetup_r+0x34>
  4029a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4029ac:	81a3      	strh	r3, [r4, #12]
  4029ae:	f04f 30ff 	mov.w	r0, #4294967295
  4029b2:	bd38      	pop	{r3, r4, r5, pc}
  4029b4:	4618      	mov	r0, r3
  4029b6:	f000 f963 	bl	402c80 <__sinit>
  4029ba:	e7c2      	b.n	402942 <__swsetup_r+0x12>
  4029bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4029be:	b151      	cbz	r1, 4029d6 <__swsetup_r+0xa6>
  4029c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4029c4:	4299      	cmp	r1, r3
  4029c6:	d004      	beq.n	4029d2 <__swsetup_r+0xa2>
  4029c8:	4628      	mov	r0, r5
  4029ca:	f000 fa2f 	bl	402e2c <_free_r>
  4029ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4029d2:	2300      	movs	r3, #0
  4029d4:	6323      	str	r3, [r4, #48]	; 0x30
  4029d6:	2300      	movs	r3, #0
  4029d8:	6920      	ldr	r0, [r4, #16]
  4029da:	6063      	str	r3, [r4, #4]
  4029dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4029e0:	6020      	str	r0, [r4, #0]
  4029e2:	e7c5      	b.n	402970 <__swsetup_r+0x40>
  4029e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4029e8:	2309      	movs	r3, #9
  4029ea:	602b      	str	r3, [r5, #0]
  4029ec:	f04f 30ff 	mov.w	r0, #4294967295
  4029f0:	81a2      	strh	r2, [r4, #12]
  4029f2:	bd38      	pop	{r3, r4, r5, pc}
  4029f4:	20000018 	.word	0x20000018

004029f8 <register_fini>:
  4029f8:	4b02      	ldr	r3, [pc, #8]	; (402a04 <register_fini+0xc>)
  4029fa:	b113      	cbz	r3, 402a02 <register_fini+0xa>
  4029fc:	4802      	ldr	r0, [pc, #8]	; (402a08 <register_fini+0x10>)
  4029fe:	f000 b805 	b.w	402a0c <atexit>
  402a02:	4770      	bx	lr
  402a04:	00000000 	.word	0x00000000
  402a08:	00402c95 	.word	0x00402c95

00402a0c <atexit>:
  402a0c:	2300      	movs	r3, #0
  402a0e:	4601      	mov	r1, r0
  402a10:	461a      	mov	r2, r3
  402a12:	4618      	mov	r0, r3
  402a14:	f001 bc48 	b.w	4042a8 <__register_exitproc>

00402a18 <__sflush_r>:
  402a18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402a1c:	b29a      	uxth	r2, r3
  402a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a22:	460d      	mov	r5, r1
  402a24:	0711      	lsls	r1, r2, #28
  402a26:	4680      	mov	r8, r0
  402a28:	d43a      	bmi.n	402aa0 <__sflush_r+0x88>
  402a2a:	686a      	ldr	r2, [r5, #4]
  402a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402a30:	2a00      	cmp	r2, #0
  402a32:	81ab      	strh	r3, [r5, #12]
  402a34:	dd6f      	ble.n	402b16 <__sflush_r+0xfe>
  402a36:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402a38:	2c00      	cmp	r4, #0
  402a3a:	d049      	beq.n	402ad0 <__sflush_r+0xb8>
  402a3c:	2200      	movs	r2, #0
  402a3e:	b29b      	uxth	r3, r3
  402a40:	f8d8 6000 	ldr.w	r6, [r8]
  402a44:	f8c8 2000 	str.w	r2, [r8]
  402a48:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  402a4c:	d067      	beq.n	402b1e <__sflush_r+0x106>
  402a4e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402a50:	075f      	lsls	r7, r3, #29
  402a52:	d505      	bpl.n	402a60 <__sflush_r+0x48>
  402a54:	6869      	ldr	r1, [r5, #4]
  402a56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402a58:	1a52      	subs	r2, r2, r1
  402a5a:	b10b      	cbz	r3, 402a60 <__sflush_r+0x48>
  402a5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  402a5e:	1ad2      	subs	r2, r2, r3
  402a60:	2300      	movs	r3, #0
  402a62:	69e9      	ldr	r1, [r5, #28]
  402a64:	4640      	mov	r0, r8
  402a66:	47a0      	blx	r4
  402a68:	1c44      	adds	r4, r0, #1
  402a6a:	d03c      	beq.n	402ae6 <__sflush_r+0xce>
  402a6c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402a70:	692a      	ldr	r2, [r5, #16]
  402a72:	602a      	str	r2, [r5, #0]
  402a74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402a78:	2200      	movs	r2, #0
  402a7a:	81ab      	strh	r3, [r5, #12]
  402a7c:	04db      	lsls	r3, r3, #19
  402a7e:	606a      	str	r2, [r5, #4]
  402a80:	d447      	bmi.n	402b12 <__sflush_r+0xfa>
  402a82:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402a84:	f8c8 6000 	str.w	r6, [r8]
  402a88:	b311      	cbz	r1, 402ad0 <__sflush_r+0xb8>
  402a8a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  402a8e:	4299      	cmp	r1, r3
  402a90:	d002      	beq.n	402a98 <__sflush_r+0x80>
  402a92:	4640      	mov	r0, r8
  402a94:	f000 f9ca 	bl	402e2c <_free_r>
  402a98:	2000      	movs	r0, #0
  402a9a:	6328      	str	r0, [r5, #48]	; 0x30
  402a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402aa0:	692e      	ldr	r6, [r5, #16]
  402aa2:	b1ae      	cbz	r6, 402ad0 <__sflush_r+0xb8>
  402aa4:	682c      	ldr	r4, [r5, #0]
  402aa6:	602e      	str	r6, [r5, #0]
  402aa8:	0791      	lsls	r1, r2, #30
  402aaa:	bf0c      	ite	eq
  402aac:	696b      	ldreq	r3, [r5, #20]
  402aae:	2300      	movne	r3, #0
  402ab0:	1ba4      	subs	r4, r4, r6
  402ab2:	60ab      	str	r3, [r5, #8]
  402ab4:	e00a      	b.n	402acc <__sflush_r+0xb4>
  402ab6:	4623      	mov	r3, r4
  402ab8:	4632      	mov	r2, r6
  402aba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402abc:	69e9      	ldr	r1, [r5, #28]
  402abe:	4640      	mov	r0, r8
  402ac0:	47b8      	blx	r7
  402ac2:	2800      	cmp	r0, #0
  402ac4:	eba4 0400 	sub.w	r4, r4, r0
  402ac8:	4406      	add	r6, r0
  402aca:	dd04      	ble.n	402ad6 <__sflush_r+0xbe>
  402acc:	2c00      	cmp	r4, #0
  402ace:	dcf2      	bgt.n	402ab6 <__sflush_r+0x9e>
  402ad0:	2000      	movs	r0, #0
  402ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ad6:	89ab      	ldrh	r3, [r5, #12]
  402ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402adc:	81ab      	strh	r3, [r5, #12]
  402ade:	f04f 30ff 	mov.w	r0, #4294967295
  402ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402ae6:	f8d8 4000 	ldr.w	r4, [r8]
  402aea:	2c1d      	cmp	r4, #29
  402aec:	d8f3      	bhi.n	402ad6 <__sflush_r+0xbe>
  402aee:	4b19      	ldr	r3, [pc, #100]	; (402b54 <__sflush_r+0x13c>)
  402af0:	40e3      	lsrs	r3, r4
  402af2:	43db      	mvns	r3, r3
  402af4:	f013 0301 	ands.w	r3, r3, #1
  402af8:	d1ed      	bne.n	402ad6 <__sflush_r+0xbe>
  402afa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  402afe:	606b      	str	r3, [r5, #4]
  402b00:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402b04:	6929      	ldr	r1, [r5, #16]
  402b06:	81ab      	strh	r3, [r5, #12]
  402b08:	04da      	lsls	r2, r3, #19
  402b0a:	6029      	str	r1, [r5, #0]
  402b0c:	d5b9      	bpl.n	402a82 <__sflush_r+0x6a>
  402b0e:	2c00      	cmp	r4, #0
  402b10:	d1b7      	bne.n	402a82 <__sflush_r+0x6a>
  402b12:	6528      	str	r0, [r5, #80]	; 0x50
  402b14:	e7b5      	b.n	402a82 <__sflush_r+0x6a>
  402b16:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402b18:	2a00      	cmp	r2, #0
  402b1a:	dc8c      	bgt.n	402a36 <__sflush_r+0x1e>
  402b1c:	e7d8      	b.n	402ad0 <__sflush_r+0xb8>
  402b1e:	2301      	movs	r3, #1
  402b20:	69e9      	ldr	r1, [r5, #28]
  402b22:	4640      	mov	r0, r8
  402b24:	47a0      	blx	r4
  402b26:	1c43      	adds	r3, r0, #1
  402b28:	4602      	mov	r2, r0
  402b2a:	d002      	beq.n	402b32 <__sflush_r+0x11a>
  402b2c:	89ab      	ldrh	r3, [r5, #12]
  402b2e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402b30:	e78e      	b.n	402a50 <__sflush_r+0x38>
  402b32:	f8d8 3000 	ldr.w	r3, [r8]
  402b36:	2b00      	cmp	r3, #0
  402b38:	d0f8      	beq.n	402b2c <__sflush_r+0x114>
  402b3a:	2b1d      	cmp	r3, #29
  402b3c:	d001      	beq.n	402b42 <__sflush_r+0x12a>
  402b3e:	2b16      	cmp	r3, #22
  402b40:	d102      	bne.n	402b48 <__sflush_r+0x130>
  402b42:	f8c8 6000 	str.w	r6, [r8]
  402b46:	e7c3      	b.n	402ad0 <__sflush_r+0xb8>
  402b48:	89ab      	ldrh	r3, [r5, #12]
  402b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402b4e:	81ab      	strh	r3, [r5, #12]
  402b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b54:	20400001 	.word	0x20400001

00402b58 <_fflush_r>:
  402b58:	b510      	push	{r4, lr}
  402b5a:	4604      	mov	r4, r0
  402b5c:	b082      	sub	sp, #8
  402b5e:	b108      	cbz	r0, 402b64 <_fflush_r+0xc>
  402b60:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402b62:	b153      	cbz	r3, 402b7a <_fflush_r+0x22>
  402b64:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  402b68:	b908      	cbnz	r0, 402b6e <_fflush_r+0x16>
  402b6a:	b002      	add	sp, #8
  402b6c:	bd10      	pop	{r4, pc}
  402b6e:	4620      	mov	r0, r4
  402b70:	b002      	add	sp, #8
  402b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402b76:	f7ff bf4f 	b.w	402a18 <__sflush_r>
  402b7a:	9101      	str	r1, [sp, #4]
  402b7c:	f000 f880 	bl	402c80 <__sinit>
  402b80:	9901      	ldr	r1, [sp, #4]
  402b82:	e7ef      	b.n	402b64 <_fflush_r+0xc>

00402b84 <_cleanup_r>:
  402b84:	4901      	ldr	r1, [pc, #4]	; (402b8c <_cleanup_r+0x8>)
  402b86:	f000 bbaf 	b.w	4032e8 <_fwalk_reent>
  402b8a:	bf00      	nop
  402b8c:	00404371 	.word	0x00404371

00402b90 <__sinit.part.1>:
  402b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b94:	4b35      	ldr	r3, [pc, #212]	; (402c6c <__sinit.part.1+0xdc>)
  402b96:	6845      	ldr	r5, [r0, #4]
  402b98:	63c3      	str	r3, [r0, #60]	; 0x3c
  402b9a:	2400      	movs	r4, #0
  402b9c:	4607      	mov	r7, r0
  402b9e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  402ba2:	2304      	movs	r3, #4
  402ba4:	2103      	movs	r1, #3
  402ba6:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402baa:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402bae:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  402bb2:	b083      	sub	sp, #12
  402bb4:	602c      	str	r4, [r5, #0]
  402bb6:	606c      	str	r4, [r5, #4]
  402bb8:	60ac      	str	r4, [r5, #8]
  402bba:	666c      	str	r4, [r5, #100]	; 0x64
  402bbc:	81ec      	strh	r4, [r5, #14]
  402bbe:	612c      	str	r4, [r5, #16]
  402bc0:	616c      	str	r4, [r5, #20]
  402bc2:	61ac      	str	r4, [r5, #24]
  402bc4:	81ab      	strh	r3, [r5, #12]
  402bc6:	4621      	mov	r1, r4
  402bc8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402bcc:	2208      	movs	r2, #8
  402bce:	f7fe fe93 	bl	4018f8 <memset>
  402bd2:	68be      	ldr	r6, [r7, #8]
  402bd4:	f8df b098 	ldr.w	fp, [pc, #152]	; 402c70 <__sinit.part.1+0xe0>
  402bd8:	f8df a098 	ldr.w	sl, [pc, #152]	; 402c74 <__sinit.part.1+0xe4>
  402bdc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 402c78 <__sinit.part.1+0xe8>
  402be0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 402c7c <__sinit.part.1+0xec>
  402be4:	f8c5 b020 	str.w	fp, [r5, #32]
  402be8:	2301      	movs	r3, #1
  402bea:	2209      	movs	r2, #9
  402bec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402bf0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402bf4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402bf8:	61ed      	str	r5, [r5, #28]
  402bfa:	4621      	mov	r1, r4
  402bfc:	81f3      	strh	r3, [r6, #14]
  402bfe:	81b2      	strh	r2, [r6, #12]
  402c00:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402c04:	6034      	str	r4, [r6, #0]
  402c06:	6074      	str	r4, [r6, #4]
  402c08:	60b4      	str	r4, [r6, #8]
  402c0a:	6674      	str	r4, [r6, #100]	; 0x64
  402c0c:	6134      	str	r4, [r6, #16]
  402c0e:	6174      	str	r4, [r6, #20]
  402c10:	61b4      	str	r4, [r6, #24]
  402c12:	2208      	movs	r2, #8
  402c14:	9301      	str	r3, [sp, #4]
  402c16:	f7fe fe6f 	bl	4018f8 <memset>
  402c1a:	68fd      	ldr	r5, [r7, #12]
  402c1c:	61f6      	str	r6, [r6, #28]
  402c1e:	2012      	movs	r0, #18
  402c20:	2202      	movs	r2, #2
  402c22:	f8c6 b020 	str.w	fp, [r6, #32]
  402c26:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402c2a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402c2e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402c32:	4621      	mov	r1, r4
  402c34:	81a8      	strh	r0, [r5, #12]
  402c36:	81ea      	strh	r2, [r5, #14]
  402c38:	602c      	str	r4, [r5, #0]
  402c3a:	606c      	str	r4, [r5, #4]
  402c3c:	60ac      	str	r4, [r5, #8]
  402c3e:	666c      	str	r4, [r5, #100]	; 0x64
  402c40:	612c      	str	r4, [r5, #16]
  402c42:	616c      	str	r4, [r5, #20]
  402c44:	61ac      	str	r4, [r5, #24]
  402c46:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402c4a:	2208      	movs	r2, #8
  402c4c:	f7fe fe54 	bl	4018f8 <memset>
  402c50:	9b01      	ldr	r3, [sp, #4]
  402c52:	61ed      	str	r5, [r5, #28]
  402c54:	f8c5 b020 	str.w	fp, [r5, #32]
  402c58:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402c5c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402c60:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402c64:	63bb      	str	r3, [r7, #56]	; 0x38
  402c66:	b003      	add	sp, #12
  402c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c6c:	00402b85 	.word	0x00402b85
  402c70:	00403ff5 	.word	0x00403ff5
  402c74:	00404019 	.word	0x00404019
  402c78:	00404055 	.word	0x00404055
  402c7c:	00404075 	.word	0x00404075

00402c80 <__sinit>:
  402c80:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402c82:	b103      	cbz	r3, 402c86 <__sinit+0x6>
  402c84:	4770      	bx	lr
  402c86:	f7ff bf83 	b.w	402b90 <__sinit.part.1>
  402c8a:	bf00      	nop

00402c8c <__sfp_lock_acquire>:
  402c8c:	4770      	bx	lr
  402c8e:	bf00      	nop

00402c90 <__sfp_lock_release>:
  402c90:	4770      	bx	lr
  402c92:	bf00      	nop

00402c94 <__libc_fini_array>:
  402c94:	b538      	push	{r3, r4, r5, lr}
  402c96:	4c0a      	ldr	r4, [pc, #40]	; (402cc0 <__libc_fini_array+0x2c>)
  402c98:	4d0a      	ldr	r5, [pc, #40]	; (402cc4 <__libc_fini_array+0x30>)
  402c9a:	1b64      	subs	r4, r4, r5
  402c9c:	10a4      	asrs	r4, r4, #2
  402c9e:	d00a      	beq.n	402cb6 <__libc_fini_array+0x22>
  402ca0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ca4:	3b01      	subs	r3, #1
  402ca6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402caa:	3c01      	subs	r4, #1
  402cac:	f855 3904 	ldr.w	r3, [r5], #-4
  402cb0:	4798      	blx	r3
  402cb2:	2c00      	cmp	r4, #0
  402cb4:	d1f9      	bne.n	402caa <__libc_fini_array+0x16>
  402cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402cba:	f001 be4d 	b.w	404958 <_fini>
  402cbe:	bf00      	nop
  402cc0:	00404968 	.word	0x00404968
  402cc4:	00404964 	.word	0x00404964

00402cc8 <__fputwc>:
  402cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ccc:	b082      	sub	sp, #8
  402cce:	4680      	mov	r8, r0
  402cd0:	4689      	mov	r9, r1
  402cd2:	4614      	mov	r4, r2
  402cd4:	f000 fb32 	bl	40333c <__locale_mb_cur_max>
  402cd8:	2801      	cmp	r0, #1
  402cda:	d036      	beq.n	402d4a <__fputwc+0x82>
  402cdc:	464a      	mov	r2, r9
  402cde:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402ce2:	a901      	add	r1, sp, #4
  402ce4:	4640      	mov	r0, r8
  402ce6:	f001 fa91 	bl	40420c <_wcrtomb_r>
  402cea:	1c42      	adds	r2, r0, #1
  402cec:	4606      	mov	r6, r0
  402cee:	d025      	beq.n	402d3c <__fputwc+0x74>
  402cf0:	b3a8      	cbz	r0, 402d5e <__fputwc+0x96>
  402cf2:	f89d e004 	ldrb.w	lr, [sp, #4]
  402cf6:	2500      	movs	r5, #0
  402cf8:	f10d 0a04 	add.w	sl, sp, #4
  402cfc:	e009      	b.n	402d12 <__fputwc+0x4a>
  402cfe:	6823      	ldr	r3, [r4, #0]
  402d00:	1c5a      	adds	r2, r3, #1
  402d02:	6022      	str	r2, [r4, #0]
  402d04:	f883 e000 	strb.w	lr, [r3]
  402d08:	3501      	adds	r5, #1
  402d0a:	42b5      	cmp	r5, r6
  402d0c:	d227      	bcs.n	402d5e <__fputwc+0x96>
  402d0e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  402d12:	68a3      	ldr	r3, [r4, #8]
  402d14:	3b01      	subs	r3, #1
  402d16:	2b00      	cmp	r3, #0
  402d18:	60a3      	str	r3, [r4, #8]
  402d1a:	daf0      	bge.n	402cfe <__fputwc+0x36>
  402d1c:	69a7      	ldr	r7, [r4, #24]
  402d1e:	42bb      	cmp	r3, r7
  402d20:	4671      	mov	r1, lr
  402d22:	4622      	mov	r2, r4
  402d24:	4640      	mov	r0, r8
  402d26:	db02      	blt.n	402d2e <__fputwc+0x66>
  402d28:	f1be 0f0a 	cmp.w	lr, #10
  402d2c:	d1e7      	bne.n	402cfe <__fputwc+0x36>
  402d2e:	f001 fa15 	bl	40415c <__swbuf_r>
  402d32:	1c43      	adds	r3, r0, #1
  402d34:	d1e8      	bne.n	402d08 <__fputwc+0x40>
  402d36:	b002      	add	sp, #8
  402d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d3c:	89a3      	ldrh	r3, [r4, #12]
  402d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402d42:	81a3      	strh	r3, [r4, #12]
  402d44:	b002      	add	sp, #8
  402d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d4a:	f109 33ff 	add.w	r3, r9, #4294967295
  402d4e:	2bfe      	cmp	r3, #254	; 0xfe
  402d50:	d8c4      	bhi.n	402cdc <__fputwc+0x14>
  402d52:	fa5f fe89 	uxtb.w	lr, r9
  402d56:	4606      	mov	r6, r0
  402d58:	f88d e004 	strb.w	lr, [sp, #4]
  402d5c:	e7cb      	b.n	402cf6 <__fputwc+0x2e>
  402d5e:	4648      	mov	r0, r9
  402d60:	b002      	add	sp, #8
  402d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d66:	bf00      	nop

00402d68 <_fputwc_r>:
  402d68:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402d6c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402d70:	d10a      	bne.n	402d88 <_fputwc_r+0x20>
  402d72:	b410      	push	{r4}
  402d74:	6e54      	ldr	r4, [r2, #100]	; 0x64
  402d76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402d7a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  402d7e:	6654      	str	r4, [r2, #100]	; 0x64
  402d80:	8193      	strh	r3, [r2, #12]
  402d82:	bc10      	pop	{r4}
  402d84:	f7ff bfa0 	b.w	402cc8 <__fputwc>
  402d88:	f7ff bf9e 	b.w	402cc8 <__fputwc>

00402d8c <_malloc_trim_r>:
  402d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d8e:	4f24      	ldr	r7, [pc, #144]	; (402e20 <_malloc_trim_r+0x94>)
  402d90:	460c      	mov	r4, r1
  402d92:	4606      	mov	r6, r0
  402d94:	f000 ff72 	bl	403c7c <__malloc_lock>
  402d98:	68bb      	ldr	r3, [r7, #8]
  402d9a:	685d      	ldr	r5, [r3, #4]
  402d9c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  402da0:	310f      	adds	r1, #15
  402da2:	f025 0503 	bic.w	r5, r5, #3
  402da6:	4429      	add	r1, r5
  402da8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  402dac:	f021 010f 	bic.w	r1, r1, #15
  402db0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402db4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402db8:	db07      	blt.n	402dca <_malloc_trim_r+0x3e>
  402dba:	2100      	movs	r1, #0
  402dbc:	4630      	mov	r0, r6
  402dbe:	f001 f907 	bl	403fd0 <_sbrk_r>
  402dc2:	68bb      	ldr	r3, [r7, #8]
  402dc4:	442b      	add	r3, r5
  402dc6:	4298      	cmp	r0, r3
  402dc8:	d004      	beq.n	402dd4 <_malloc_trim_r+0x48>
  402dca:	4630      	mov	r0, r6
  402dcc:	f000 ff58 	bl	403c80 <__malloc_unlock>
  402dd0:	2000      	movs	r0, #0
  402dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dd4:	4261      	negs	r1, r4
  402dd6:	4630      	mov	r0, r6
  402dd8:	f001 f8fa 	bl	403fd0 <_sbrk_r>
  402ddc:	3001      	adds	r0, #1
  402dde:	d00d      	beq.n	402dfc <_malloc_trim_r+0x70>
  402de0:	4b10      	ldr	r3, [pc, #64]	; (402e24 <_malloc_trim_r+0x98>)
  402de2:	68ba      	ldr	r2, [r7, #8]
  402de4:	6819      	ldr	r1, [r3, #0]
  402de6:	1b2d      	subs	r5, r5, r4
  402de8:	f045 0501 	orr.w	r5, r5, #1
  402dec:	4630      	mov	r0, r6
  402dee:	1b09      	subs	r1, r1, r4
  402df0:	6055      	str	r5, [r2, #4]
  402df2:	6019      	str	r1, [r3, #0]
  402df4:	f000 ff44 	bl	403c80 <__malloc_unlock>
  402df8:	2001      	movs	r0, #1
  402dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402dfc:	2100      	movs	r1, #0
  402dfe:	4630      	mov	r0, r6
  402e00:	f001 f8e6 	bl	403fd0 <_sbrk_r>
  402e04:	68ba      	ldr	r2, [r7, #8]
  402e06:	1a83      	subs	r3, r0, r2
  402e08:	2b0f      	cmp	r3, #15
  402e0a:	ddde      	ble.n	402dca <_malloc_trim_r+0x3e>
  402e0c:	4c06      	ldr	r4, [pc, #24]	; (402e28 <_malloc_trim_r+0x9c>)
  402e0e:	4905      	ldr	r1, [pc, #20]	; (402e24 <_malloc_trim_r+0x98>)
  402e10:	6824      	ldr	r4, [r4, #0]
  402e12:	f043 0301 	orr.w	r3, r3, #1
  402e16:	1b00      	subs	r0, r0, r4
  402e18:	6053      	str	r3, [r2, #4]
  402e1a:	6008      	str	r0, [r1, #0]
  402e1c:	e7d5      	b.n	402dca <_malloc_trim_r+0x3e>
  402e1e:	bf00      	nop
  402e20:	200005b4 	.word	0x200005b4
  402e24:	20000a64 	.word	0x20000a64
  402e28:	200009bc 	.word	0x200009bc

00402e2c <_free_r>:
  402e2c:	2900      	cmp	r1, #0
  402e2e:	d044      	beq.n	402eba <_free_r+0x8e>
  402e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e34:	460d      	mov	r5, r1
  402e36:	4680      	mov	r8, r0
  402e38:	f000 ff20 	bl	403c7c <__malloc_lock>
  402e3c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402e40:	4969      	ldr	r1, [pc, #420]	; (402fe8 <_free_r+0x1bc>)
  402e42:	f027 0301 	bic.w	r3, r7, #1
  402e46:	f1a5 0408 	sub.w	r4, r5, #8
  402e4a:	18e2      	adds	r2, r4, r3
  402e4c:	688e      	ldr	r6, [r1, #8]
  402e4e:	6850      	ldr	r0, [r2, #4]
  402e50:	42b2      	cmp	r2, r6
  402e52:	f020 0003 	bic.w	r0, r0, #3
  402e56:	d05e      	beq.n	402f16 <_free_r+0xea>
  402e58:	07fe      	lsls	r6, r7, #31
  402e5a:	6050      	str	r0, [r2, #4]
  402e5c:	d40b      	bmi.n	402e76 <_free_r+0x4a>
  402e5e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  402e62:	1be4      	subs	r4, r4, r7
  402e64:	f101 0e08 	add.w	lr, r1, #8
  402e68:	68a5      	ldr	r5, [r4, #8]
  402e6a:	4575      	cmp	r5, lr
  402e6c:	443b      	add	r3, r7
  402e6e:	d06d      	beq.n	402f4c <_free_r+0x120>
  402e70:	68e7      	ldr	r7, [r4, #12]
  402e72:	60ef      	str	r7, [r5, #12]
  402e74:	60bd      	str	r5, [r7, #8]
  402e76:	1815      	adds	r5, r2, r0
  402e78:	686d      	ldr	r5, [r5, #4]
  402e7a:	07ed      	lsls	r5, r5, #31
  402e7c:	d53e      	bpl.n	402efc <_free_r+0xd0>
  402e7e:	f043 0201 	orr.w	r2, r3, #1
  402e82:	6062      	str	r2, [r4, #4]
  402e84:	50e3      	str	r3, [r4, r3]
  402e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e8a:	d217      	bcs.n	402ebc <_free_r+0x90>
  402e8c:	08db      	lsrs	r3, r3, #3
  402e8e:	1c58      	adds	r0, r3, #1
  402e90:	109a      	asrs	r2, r3, #2
  402e92:	684d      	ldr	r5, [r1, #4]
  402e94:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  402e98:	60a7      	str	r7, [r4, #8]
  402e9a:	2301      	movs	r3, #1
  402e9c:	4093      	lsls	r3, r2
  402e9e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  402ea2:	432b      	orrs	r3, r5
  402ea4:	3a08      	subs	r2, #8
  402ea6:	60e2      	str	r2, [r4, #12]
  402ea8:	604b      	str	r3, [r1, #4]
  402eaa:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  402eae:	60fc      	str	r4, [r7, #12]
  402eb0:	4640      	mov	r0, r8
  402eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402eb6:	f000 bee3 	b.w	403c80 <__malloc_unlock>
  402eba:	4770      	bx	lr
  402ebc:	0a5a      	lsrs	r2, r3, #9
  402ebe:	2a04      	cmp	r2, #4
  402ec0:	d852      	bhi.n	402f68 <_free_r+0x13c>
  402ec2:	099a      	lsrs	r2, r3, #6
  402ec4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402ec8:	00ff      	lsls	r7, r7, #3
  402eca:	f102 0538 	add.w	r5, r2, #56	; 0x38
  402ece:	19c8      	adds	r0, r1, r7
  402ed0:	59ca      	ldr	r2, [r1, r7]
  402ed2:	3808      	subs	r0, #8
  402ed4:	4290      	cmp	r0, r2
  402ed6:	d04f      	beq.n	402f78 <_free_r+0x14c>
  402ed8:	6851      	ldr	r1, [r2, #4]
  402eda:	f021 0103 	bic.w	r1, r1, #3
  402ede:	428b      	cmp	r3, r1
  402ee0:	d232      	bcs.n	402f48 <_free_r+0x11c>
  402ee2:	6892      	ldr	r2, [r2, #8]
  402ee4:	4290      	cmp	r0, r2
  402ee6:	d1f7      	bne.n	402ed8 <_free_r+0xac>
  402ee8:	68c3      	ldr	r3, [r0, #12]
  402eea:	60a0      	str	r0, [r4, #8]
  402eec:	60e3      	str	r3, [r4, #12]
  402eee:	609c      	str	r4, [r3, #8]
  402ef0:	60c4      	str	r4, [r0, #12]
  402ef2:	4640      	mov	r0, r8
  402ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402ef8:	f000 bec2 	b.w	403c80 <__malloc_unlock>
  402efc:	6895      	ldr	r5, [r2, #8]
  402efe:	4f3b      	ldr	r7, [pc, #236]	; (402fec <_free_r+0x1c0>)
  402f00:	42bd      	cmp	r5, r7
  402f02:	4403      	add	r3, r0
  402f04:	d040      	beq.n	402f88 <_free_r+0x15c>
  402f06:	68d0      	ldr	r0, [r2, #12]
  402f08:	60e8      	str	r0, [r5, #12]
  402f0a:	f043 0201 	orr.w	r2, r3, #1
  402f0e:	6085      	str	r5, [r0, #8]
  402f10:	6062      	str	r2, [r4, #4]
  402f12:	50e3      	str	r3, [r4, r3]
  402f14:	e7b7      	b.n	402e86 <_free_r+0x5a>
  402f16:	07ff      	lsls	r7, r7, #31
  402f18:	4403      	add	r3, r0
  402f1a:	d407      	bmi.n	402f2c <_free_r+0x100>
  402f1c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402f20:	1aa4      	subs	r4, r4, r2
  402f22:	4413      	add	r3, r2
  402f24:	68a0      	ldr	r0, [r4, #8]
  402f26:	68e2      	ldr	r2, [r4, #12]
  402f28:	60c2      	str	r2, [r0, #12]
  402f2a:	6090      	str	r0, [r2, #8]
  402f2c:	4a30      	ldr	r2, [pc, #192]	; (402ff0 <_free_r+0x1c4>)
  402f2e:	6812      	ldr	r2, [r2, #0]
  402f30:	f043 0001 	orr.w	r0, r3, #1
  402f34:	4293      	cmp	r3, r2
  402f36:	6060      	str	r0, [r4, #4]
  402f38:	608c      	str	r4, [r1, #8]
  402f3a:	d3b9      	bcc.n	402eb0 <_free_r+0x84>
  402f3c:	4b2d      	ldr	r3, [pc, #180]	; (402ff4 <_free_r+0x1c8>)
  402f3e:	4640      	mov	r0, r8
  402f40:	6819      	ldr	r1, [r3, #0]
  402f42:	f7ff ff23 	bl	402d8c <_malloc_trim_r>
  402f46:	e7b3      	b.n	402eb0 <_free_r+0x84>
  402f48:	4610      	mov	r0, r2
  402f4a:	e7cd      	b.n	402ee8 <_free_r+0xbc>
  402f4c:	1811      	adds	r1, r2, r0
  402f4e:	6849      	ldr	r1, [r1, #4]
  402f50:	07c9      	lsls	r1, r1, #31
  402f52:	d444      	bmi.n	402fde <_free_r+0x1b2>
  402f54:	6891      	ldr	r1, [r2, #8]
  402f56:	68d2      	ldr	r2, [r2, #12]
  402f58:	60ca      	str	r2, [r1, #12]
  402f5a:	4403      	add	r3, r0
  402f5c:	f043 0001 	orr.w	r0, r3, #1
  402f60:	6091      	str	r1, [r2, #8]
  402f62:	6060      	str	r0, [r4, #4]
  402f64:	50e3      	str	r3, [r4, r3]
  402f66:	e7a3      	b.n	402eb0 <_free_r+0x84>
  402f68:	2a14      	cmp	r2, #20
  402f6a:	d816      	bhi.n	402f9a <_free_r+0x16e>
  402f6c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402f70:	00ff      	lsls	r7, r7, #3
  402f72:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  402f76:	e7aa      	b.n	402ece <_free_r+0xa2>
  402f78:	10aa      	asrs	r2, r5, #2
  402f7a:	2301      	movs	r3, #1
  402f7c:	684d      	ldr	r5, [r1, #4]
  402f7e:	4093      	lsls	r3, r2
  402f80:	432b      	orrs	r3, r5
  402f82:	604b      	str	r3, [r1, #4]
  402f84:	4603      	mov	r3, r0
  402f86:	e7b0      	b.n	402eea <_free_r+0xbe>
  402f88:	f043 0201 	orr.w	r2, r3, #1
  402f8c:	614c      	str	r4, [r1, #20]
  402f8e:	610c      	str	r4, [r1, #16]
  402f90:	60e5      	str	r5, [r4, #12]
  402f92:	60a5      	str	r5, [r4, #8]
  402f94:	6062      	str	r2, [r4, #4]
  402f96:	50e3      	str	r3, [r4, r3]
  402f98:	e78a      	b.n	402eb0 <_free_r+0x84>
  402f9a:	2a54      	cmp	r2, #84	; 0x54
  402f9c:	d806      	bhi.n	402fac <_free_r+0x180>
  402f9e:	0b1a      	lsrs	r2, r3, #12
  402fa0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  402fa4:	00ff      	lsls	r7, r7, #3
  402fa6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  402faa:	e790      	b.n	402ece <_free_r+0xa2>
  402fac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402fb0:	d806      	bhi.n	402fc0 <_free_r+0x194>
  402fb2:	0bda      	lsrs	r2, r3, #15
  402fb4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  402fb8:	00ff      	lsls	r7, r7, #3
  402fba:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402fbe:	e786      	b.n	402ece <_free_r+0xa2>
  402fc0:	f240 5054 	movw	r0, #1364	; 0x554
  402fc4:	4282      	cmp	r2, r0
  402fc6:	d806      	bhi.n	402fd6 <_free_r+0x1aa>
  402fc8:	0c9a      	lsrs	r2, r3, #18
  402fca:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402fce:	00ff      	lsls	r7, r7, #3
  402fd0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402fd4:	e77b      	b.n	402ece <_free_r+0xa2>
  402fd6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402fda:	257e      	movs	r5, #126	; 0x7e
  402fdc:	e777      	b.n	402ece <_free_r+0xa2>
  402fde:	f043 0101 	orr.w	r1, r3, #1
  402fe2:	6061      	str	r1, [r4, #4]
  402fe4:	6013      	str	r3, [r2, #0]
  402fe6:	e763      	b.n	402eb0 <_free_r+0x84>
  402fe8:	200005b4 	.word	0x200005b4
  402fec:	200005bc 	.word	0x200005bc
  402ff0:	200009c0 	.word	0x200009c0
  402ff4:	20000a94 	.word	0x20000a94

00402ff8 <__sfvwrite_r>:
  402ff8:	6893      	ldr	r3, [r2, #8]
  402ffa:	2b00      	cmp	r3, #0
  402ffc:	d073      	beq.n	4030e6 <__sfvwrite_r+0xee>
  402ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403002:	898b      	ldrh	r3, [r1, #12]
  403004:	b083      	sub	sp, #12
  403006:	460c      	mov	r4, r1
  403008:	0719      	lsls	r1, r3, #28
  40300a:	9000      	str	r0, [sp, #0]
  40300c:	4616      	mov	r6, r2
  40300e:	d526      	bpl.n	40305e <__sfvwrite_r+0x66>
  403010:	6922      	ldr	r2, [r4, #16]
  403012:	b322      	cbz	r2, 40305e <__sfvwrite_r+0x66>
  403014:	f013 0002 	ands.w	r0, r3, #2
  403018:	6835      	ldr	r5, [r6, #0]
  40301a:	d02c      	beq.n	403076 <__sfvwrite_r+0x7e>
  40301c:	f04f 0900 	mov.w	r9, #0
  403020:	4fb0      	ldr	r7, [pc, #704]	; (4032e4 <__sfvwrite_r+0x2ec>)
  403022:	46c8      	mov	r8, r9
  403024:	46b2      	mov	sl, r6
  403026:	45b8      	cmp	r8, r7
  403028:	4643      	mov	r3, r8
  40302a:	464a      	mov	r2, r9
  40302c:	bf28      	it	cs
  40302e:	463b      	movcs	r3, r7
  403030:	9800      	ldr	r0, [sp, #0]
  403032:	f1b8 0f00 	cmp.w	r8, #0
  403036:	d050      	beq.n	4030da <__sfvwrite_r+0xe2>
  403038:	69e1      	ldr	r1, [r4, #28]
  40303a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40303c:	47b0      	blx	r6
  40303e:	2800      	cmp	r0, #0
  403040:	dd58      	ble.n	4030f4 <__sfvwrite_r+0xfc>
  403042:	f8da 3008 	ldr.w	r3, [sl, #8]
  403046:	1a1b      	subs	r3, r3, r0
  403048:	4481      	add	r9, r0
  40304a:	eba8 0800 	sub.w	r8, r8, r0
  40304e:	f8ca 3008 	str.w	r3, [sl, #8]
  403052:	2b00      	cmp	r3, #0
  403054:	d1e7      	bne.n	403026 <__sfvwrite_r+0x2e>
  403056:	2000      	movs	r0, #0
  403058:	b003      	add	sp, #12
  40305a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40305e:	4621      	mov	r1, r4
  403060:	9800      	ldr	r0, [sp, #0]
  403062:	f7ff fc65 	bl	402930 <__swsetup_r>
  403066:	2800      	cmp	r0, #0
  403068:	f040 8133 	bne.w	4032d2 <__sfvwrite_r+0x2da>
  40306c:	89a3      	ldrh	r3, [r4, #12]
  40306e:	6835      	ldr	r5, [r6, #0]
  403070:	f013 0002 	ands.w	r0, r3, #2
  403074:	d1d2      	bne.n	40301c <__sfvwrite_r+0x24>
  403076:	f013 0901 	ands.w	r9, r3, #1
  40307a:	d145      	bne.n	403108 <__sfvwrite_r+0x110>
  40307c:	464f      	mov	r7, r9
  40307e:	9601      	str	r6, [sp, #4]
  403080:	b337      	cbz	r7, 4030d0 <__sfvwrite_r+0xd8>
  403082:	059a      	lsls	r2, r3, #22
  403084:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403088:	f140 8083 	bpl.w	403192 <__sfvwrite_r+0x19a>
  40308c:	4547      	cmp	r7, r8
  40308e:	46c3      	mov	fp, r8
  403090:	f0c0 80ab 	bcc.w	4031ea <__sfvwrite_r+0x1f2>
  403094:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403098:	f040 80ac 	bne.w	4031f4 <__sfvwrite_r+0x1fc>
  40309c:	6820      	ldr	r0, [r4, #0]
  40309e:	46ba      	mov	sl, r7
  4030a0:	465a      	mov	r2, fp
  4030a2:	4649      	mov	r1, r9
  4030a4:	f000 fd86 	bl	403bb4 <memmove>
  4030a8:	68a2      	ldr	r2, [r4, #8]
  4030aa:	6823      	ldr	r3, [r4, #0]
  4030ac:	eba2 0208 	sub.w	r2, r2, r8
  4030b0:	445b      	add	r3, fp
  4030b2:	60a2      	str	r2, [r4, #8]
  4030b4:	6023      	str	r3, [r4, #0]
  4030b6:	9a01      	ldr	r2, [sp, #4]
  4030b8:	6893      	ldr	r3, [r2, #8]
  4030ba:	eba3 030a 	sub.w	r3, r3, sl
  4030be:	44d1      	add	r9, sl
  4030c0:	eba7 070a 	sub.w	r7, r7, sl
  4030c4:	6093      	str	r3, [r2, #8]
  4030c6:	2b00      	cmp	r3, #0
  4030c8:	d0c5      	beq.n	403056 <__sfvwrite_r+0x5e>
  4030ca:	89a3      	ldrh	r3, [r4, #12]
  4030cc:	2f00      	cmp	r7, #0
  4030ce:	d1d8      	bne.n	403082 <__sfvwrite_r+0x8a>
  4030d0:	f8d5 9000 	ldr.w	r9, [r5]
  4030d4:	686f      	ldr	r7, [r5, #4]
  4030d6:	3508      	adds	r5, #8
  4030d8:	e7d2      	b.n	403080 <__sfvwrite_r+0x88>
  4030da:	f8d5 9000 	ldr.w	r9, [r5]
  4030de:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4030e2:	3508      	adds	r5, #8
  4030e4:	e79f      	b.n	403026 <__sfvwrite_r+0x2e>
  4030e6:	2000      	movs	r0, #0
  4030e8:	4770      	bx	lr
  4030ea:	4621      	mov	r1, r4
  4030ec:	9800      	ldr	r0, [sp, #0]
  4030ee:	f7ff fd33 	bl	402b58 <_fflush_r>
  4030f2:	b370      	cbz	r0, 403152 <__sfvwrite_r+0x15a>
  4030f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030fc:	f04f 30ff 	mov.w	r0, #4294967295
  403100:	81a3      	strh	r3, [r4, #12]
  403102:	b003      	add	sp, #12
  403104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403108:	4681      	mov	r9, r0
  40310a:	4633      	mov	r3, r6
  40310c:	464e      	mov	r6, r9
  40310e:	46a8      	mov	r8, r5
  403110:	469a      	mov	sl, r3
  403112:	464d      	mov	r5, r9
  403114:	b34e      	cbz	r6, 40316a <__sfvwrite_r+0x172>
  403116:	b380      	cbz	r0, 40317a <__sfvwrite_r+0x182>
  403118:	6820      	ldr	r0, [r4, #0]
  40311a:	6923      	ldr	r3, [r4, #16]
  40311c:	6962      	ldr	r2, [r4, #20]
  40311e:	45b1      	cmp	r9, r6
  403120:	46cb      	mov	fp, r9
  403122:	bf28      	it	cs
  403124:	46b3      	movcs	fp, r6
  403126:	4298      	cmp	r0, r3
  403128:	465f      	mov	r7, fp
  40312a:	d904      	bls.n	403136 <__sfvwrite_r+0x13e>
  40312c:	68a3      	ldr	r3, [r4, #8]
  40312e:	4413      	add	r3, r2
  403130:	459b      	cmp	fp, r3
  403132:	f300 80a6 	bgt.w	403282 <__sfvwrite_r+0x28a>
  403136:	4593      	cmp	fp, r2
  403138:	db4b      	blt.n	4031d2 <__sfvwrite_r+0x1da>
  40313a:	4613      	mov	r3, r2
  40313c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40313e:	69e1      	ldr	r1, [r4, #28]
  403140:	9800      	ldr	r0, [sp, #0]
  403142:	462a      	mov	r2, r5
  403144:	47b8      	blx	r7
  403146:	1e07      	subs	r7, r0, #0
  403148:	ddd4      	ble.n	4030f4 <__sfvwrite_r+0xfc>
  40314a:	ebb9 0907 	subs.w	r9, r9, r7
  40314e:	d0cc      	beq.n	4030ea <__sfvwrite_r+0xf2>
  403150:	2001      	movs	r0, #1
  403152:	f8da 3008 	ldr.w	r3, [sl, #8]
  403156:	1bdb      	subs	r3, r3, r7
  403158:	443d      	add	r5, r7
  40315a:	1bf6      	subs	r6, r6, r7
  40315c:	f8ca 3008 	str.w	r3, [sl, #8]
  403160:	2b00      	cmp	r3, #0
  403162:	f43f af78 	beq.w	403056 <__sfvwrite_r+0x5e>
  403166:	2e00      	cmp	r6, #0
  403168:	d1d5      	bne.n	403116 <__sfvwrite_r+0x11e>
  40316a:	f108 0308 	add.w	r3, r8, #8
  40316e:	e913 0060 	ldmdb	r3, {r5, r6}
  403172:	4698      	mov	r8, r3
  403174:	3308      	adds	r3, #8
  403176:	2e00      	cmp	r6, #0
  403178:	d0f9      	beq.n	40316e <__sfvwrite_r+0x176>
  40317a:	4632      	mov	r2, r6
  40317c:	210a      	movs	r1, #10
  40317e:	4628      	mov	r0, r5
  403180:	f000 fc2e 	bl	4039e0 <memchr>
  403184:	2800      	cmp	r0, #0
  403186:	f000 80a1 	beq.w	4032cc <__sfvwrite_r+0x2d4>
  40318a:	3001      	adds	r0, #1
  40318c:	eba0 0905 	sub.w	r9, r0, r5
  403190:	e7c2      	b.n	403118 <__sfvwrite_r+0x120>
  403192:	6820      	ldr	r0, [r4, #0]
  403194:	6923      	ldr	r3, [r4, #16]
  403196:	4298      	cmp	r0, r3
  403198:	d802      	bhi.n	4031a0 <__sfvwrite_r+0x1a8>
  40319a:	6963      	ldr	r3, [r4, #20]
  40319c:	429f      	cmp	r7, r3
  40319e:	d25d      	bcs.n	40325c <__sfvwrite_r+0x264>
  4031a0:	45b8      	cmp	r8, r7
  4031a2:	bf28      	it	cs
  4031a4:	46b8      	movcs	r8, r7
  4031a6:	4642      	mov	r2, r8
  4031a8:	4649      	mov	r1, r9
  4031aa:	f000 fd03 	bl	403bb4 <memmove>
  4031ae:	68a3      	ldr	r3, [r4, #8]
  4031b0:	6822      	ldr	r2, [r4, #0]
  4031b2:	eba3 0308 	sub.w	r3, r3, r8
  4031b6:	4442      	add	r2, r8
  4031b8:	60a3      	str	r3, [r4, #8]
  4031ba:	6022      	str	r2, [r4, #0]
  4031bc:	b10b      	cbz	r3, 4031c2 <__sfvwrite_r+0x1ca>
  4031be:	46c2      	mov	sl, r8
  4031c0:	e779      	b.n	4030b6 <__sfvwrite_r+0xbe>
  4031c2:	4621      	mov	r1, r4
  4031c4:	9800      	ldr	r0, [sp, #0]
  4031c6:	f7ff fcc7 	bl	402b58 <_fflush_r>
  4031ca:	2800      	cmp	r0, #0
  4031cc:	d192      	bne.n	4030f4 <__sfvwrite_r+0xfc>
  4031ce:	46c2      	mov	sl, r8
  4031d0:	e771      	b.n	4030b6 <__sfvwrite_r+0xbe>
  4031d2:	465a      	mov	r2, fp
  4031d4:	4629      	mov	r1, r5
  4031d6:	f000 fced 	bl	403bb4 <memmove>
  4031da:	68a2      	ldr	r2, [r4, #8]
  4031dc:	6823      	ldr	r3, [r4, #0]
  4031de:	eba2 020b 	sub.w	r2, r2, fp
  4031e2:	445b      	add	r3, fp
  4031e4:	60a2      	str	r2, [r4, #8]
  4031e6:	6023      	str	r3, [r4, #0]
  4031e8:	e7af      	b.n	40314a <__sfvwrite_r+0x152>
  4031ea:	6820      	ldr	r0, [r4, #0]
  4031ec:	46b8      	mov	r8, r7
  4031ee:	46ba      	mov	sl, r7
  4031f0:	46bb      	mov	fp, r7
  4031f2:	e755      	b.n	4030a0 <__sfvwrite_r+0xa8>
  4031f4:	6962      	ldr	r2, [r4, #20]
  4031f6:	6820      	ldr	r0, [r4, #0]
  4031f8:	6921      	ldr	r1, [r4, #16]
  4031fa:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4031fe:	eba0 0a01 	sub.w	sl, r0, r1
  403202:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  403206:	f10a 0001 	add.w	r0, sl, #1
  40320a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40320e:	4438      	add	r0, r7
  403210:	4540      	cmp	r0, r8
  403212:	4642      	mov	r2, r8
  403214:	bf84      	itt	hi
  403216:	4680      	movhi	r8, r0
  403218:	4642      	movhi	r2, r8
  40321a:	055b      	lsls	r3, r3, #21
  40321c:	d544      	bpl.n	4032a8 <__sfvwrite_r+0x2b0>
  40321e:	4611      	mov	r1, r2
  403220:	9800      	ldr	r0, [sp, #0]
  403222:	f000 f917 	bl	403454 <_malloc_r>
  403226:	4683      	mov	fp, r0
  403228:	2800      	cmp	r0, #0
  40322a:	d055      	beq.n	4032d8 <__sfvwrite_r+0x2e0>
  40322c:	4652      	mov	r2, sl
  40322e:	6921      	ldr	r1, [r4, #16]
  403230:	f000 fc26 	bl	403a80 <memcpy>
  403234:	89a3      	ldrh	r3, [r4, #12]
  403236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40323e:	81a3      	strh	r3, [r4, #12]
  403240:	eb0b 000a 	add.w	r0, fp, sl
  403244:	eba8 030a 	sub.w	r3, r8, sl
  403248:	f8c4 b010 	str.w	fp, [r4, #16]
  40324c:	f8c4 8014 	str.w	r8, [r4, #20]
  403250:	6020      	str	r0, [r4, #0]
  403252:	60a3      	str	r3, [r4, #8]
  403254:	46b8      	mov	r8, r7
  403256:	46ba      	mov	sl, r7
  403258:	46bb      	mov	fp, r7
  40325a:	e721      	b.n	4030a0 <__sfvwrite_r+0xa8>
  40325c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403260:	42b9      	cmp	r1, r7
  403262:	bf28      	it	cs
  403264:	4639      	movcs	r1, r7
  403266:	464a      	mov	r2, r9
  403268:	fb91 f1f3 	sdiv	r1, r1, r3
  40326c:	9800      	ldr	r0, [sp, #0]
  40326e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403270:	fb03 f301 	mul.w	r3, r3, r1
  403274:	69e1      	ldr	r1, [r4, #28]
  403276:	47b0      	blx	r6
  403278:	f1b0 0a00 	subs.w	sl, r0, #0
  40327c:	f73f af1b 	bgt.w	4030b6 <__sfvwrite_r+0xbe>
  403280:	e738      	b.n	4030f4 <__sfvwrite_r+0xfc>
  403282:	461a      	mov	r2, r3
  403284:	4629      	mov	r1, r5
  403286:	9301      	str	r3, [sp, #4]
  403288:	f000 fc94 	bl	403bb4 <memmove>
  40328c:	6822      	ldr	r2, [r4, #0]
  40328e:	9b01      	ldr	r3, [sp, #4]
  403290:	9800      	ldr	r0, [sp, #0]
  403292:	441a      	add	r2, r3
  403294:	6022      	str	r2, [r4, #0]
  403296:	4621      	mov	r1, r4
  403298:	f7ff fc5e 	bl	402b58 <_fflush_r>
  40329c:	9b01      	ldr	r3, [sp, #4]
  40329e:	2800      	cmp	r0, #0
  4032a0:	f47f af28 	bne.w	4030f4 <__sfvwrite_r+0xfc>
  4032a4:	461f      	mov	r7, r3
  4032a6:	e750      	b.n	40314a <__sfvwrite_r+0x152>
  4032a8:	9800      	ldr	r0, [sp, #0]
  4032aa:	f000 fceb 	bl	403c84 <_realloc_r>
  4032ae:	4683      	mov	fp, r0
  4032b0:	2800      	cmp	r0, #0
  4032b2:	d1c5      	bne.n	403240 <__sfvwrite_r+0x248>
  4032b4:	9d00      	ldr	r5, [sp, #0]
  4032b6:	6921      	ldr	r1, [r4, #16]
  4032b8:	4628      	mov	r0, r5
  4032ba:	f7ff fdb7 	bl	402e2c <_free_r>
  4032be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032c2:	220c      	movs	r2, #12
  4032c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4032c8:	602a      	str	r2, [r5, #0]
  4032ca:	e715      	b.n	4030f8 <__sfvwrite_r+0x100>
  4032cc:	f106 0901 	add.w	r9, r6, #1
  4032d0:	e722      	b.n	403118 <__sfvwrite_r+0x120>
  4032d2:	f04f 30ff 	mov.w	r0, #4294967295
  4032d6:	e6bf      	b.n	403058 <__sfvwrite_r+0x60>
  4032d8:	9a00      	ldr	r2, [sp, #0]
  4032da:	230c      	movs	r3, #12
  4032dc:	6013      	str	r3, [r2, #0]
  4032de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4032e2:	e709      	b.n	4030f8 <__sfvwrite_r+0x100>
  4032e4:	7ffffc00 	.word	0x7ffffc00

004032e8 <_fwalk_reent>:
  4032e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4032ec:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4032f0:	d01f      	beq.n	403332 <_fwalk_reent+0x4a>
  4032f2:	4688      	mov	r8, r1
  4032f4:	4606      	mov	r6, r0
  4032f6:	f04f 0900 	mov.w	r9, #0
  4032fa:	687d      	ldr	r5, [r7, #4]
  4032fc:	68bc      	ldr	r4, [r7, #8]
  4032fe:	3d01      	subs	r5, #1
  403300:	d411      	bmi.n	403326 <_fwalk_reent+0x3e>
  403302:	89a3      	ldrh	r3, [r4, #12]
  403304:	2b01      	cmp	r3, #1
  403306:	f105 35ff 	add.w	r5, r5, #4294967295
  40330a:	d908      	bls.n	40331e <_fwalk_reent+0x36>
  40330c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  403310:	3301      	adds	r3, #1
  403312:	4621      	mov	r1, r4
  403314:	4630      	mov	r0, r6
  403316:	d002      	beq.n	40331e <_fwalk_reent+0x36>
  403318:	47c0      	blx	r8
  40331a:	ea49 0900 	orr.w	r9, r9, r0
  40331e:	1c6b      	adds	r3, r5, #1
  403320:	f104 0468 	add.w	r4, r4, #104	; 0x68
  403324:	d1ed      	bne.n	403302 <_fwalk_reent+0x1a>
  403326:	683f      	ldr	r7, [r7, #0]
  403328:	2f00      	cmp	r7, #0
  40332a:	d1e6      	bne.n	4032fa <_fwalk_reent+0x12>
  40332c:	4648      	mov	r0, r9
  40332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403332:	46b9      	mov	r9, r7
  403334:	4648      	mov	r0, r9
  403336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40333a:	bf00      	nop

0040333c <__locale_mb_cur_max>:
  40333c:	4b04      	ldr	r3, [pc, #16]	; (403350 <__locale_mb_cur_max+0x14>)
  40333e:	4a05      	ldr	r2, [pc, #20]	; (403354 <__locale_mb_cur_max+0x18>)
  403340:	681b      	ldr	r3, [r3, #0]
  403342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403344:	2b00      	cmp	r3, #0
  403346:	bf08      	it	eq
  403348:	4613      	moveq	r3, r2
  40334a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40334e:	4770      	bx	lr
  403350:	20000018 	.word	0x20000018
  403354:	20000448 	.word	0x20000448

00403358 <__locale_ctype_ptr_l>:
  403358:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  40335c:	4770      	bx	lr
  40335e:	bf00      	nop

00403360 <__swhatbuf_r>:
  403360:	b570      	push	{r4, r5, r6, lr}
  403362:	460c      	mov	r4, r1
  403364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403368:	2900      	cmp	r1, #0
  40336a:	b090      	sub	sp, #64	; 0x40
  40336c:	4615      	mov	r5, r2
  40336e:	461e      	mov	r6, r3
  403370:	db14      	blt.n	40339c <__swhatbuf_r+0x3c>
  403372:	aa01      	add	r2, sp, #4
  403374:	f001 f83c 	bl	4043f0 <_fstat_r>
  403378:	2800      	cmp	r0, #0
  40337a:	db0f      	blt.n	40339c <__swhatbuf_r+0x3c>
  40337c:	9a02      	ldr	r2, [sp, #8]
  40337e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403382:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  403386:	fab2 f282 	clz	r2, r2
  40338a:	0952      	lsrs	r2, r2, #5
  40338c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403390:	f44f 6000 	mov.w	r0, #2048	; 0x800
  403394:	6032      	str	r2, [r6, #0]
  403396:	602b      	str	r3, [r5, #0]
  403398:	b010      	add	sp, #64	; 0x40
  40339a:	bd70      	pop	{r4, r5, r6, pc}
  40339c:	89a2      	ldrh	r2, [r4, #12]
  40339e:	2300      	movs	r3, #0
  4033a0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4033a4:	6033      	str	r3, [r6, #0]
  4033a6:	d004      	beq.n	4033b2 <__swhatbuf_r+0x52>
  4033a8:	2240      	movs	r2, #64	; 0x40
  4033aa:	4618      	mov	r0, r3
  4033ac:	602a      	str	r2, [r5, #0]
  4033ae:	b010      	add	sp, #64	; 0x40
  4033b0:	bd70      	pop	{r4, r5, r6, pc}
  4033b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4033b6:	602b      	str	r3, [r5, #0]
  4033b8:	b010      	add	sp, #64	; 0x40
  4033ba:	bd70      	pop	{r4, r5, r6, pc}

004033bc <__smakebuf_r>:
  4033bc:	898a      	ldrh	r2, [r1, #12]
  4033be:	0792      	lsls	r2, r2, #30
  4033c0:	460b      	mov	r3, r1
  4033c2:	d506      	bpl.n	4033d2 <__smakebuf_r+0x16>
  4033c4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4033c8:	2101      	movs	r1, #1
  4033ca:	601a      	str	r2, [r3, #0]
  4033cc:	611a      	str	r2, [r3, #16]
  4033ce:	6159      	str	r1, [r3, #20]
  4033d0:	4770      	bx	lr
  4033d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033d4:	b083      	sub	sp, #12
  4033d6:	ab01      	add	r3, sp, #4
  4033d8:	466a      	mov	r2, sp
  4033da:	460c      	mov	r4, r1
  4033dc:	4605      	mov	r5, r0
  4033de:	f7ff ffbf 	bl	403360 <__swhatbuf_r>
  4033e2:	9900      	ldr	r1, [sp, #0]
  4033e4:	4606      	mov	r6, r0
  4033e6:	4628      	mov	r0, r5
  4033e8:	f000 f834 	bl	403454 <_malloc_r>
  4033ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033f0:	b1d0      	cbz	r0, 403428 <__smakebuf_r+0x6c>
  4033f2:	9a01      	ldr	r2, [sp, #4]
  4033f4:	4f12      	ldr	r7, [pc, #72]	; (403440 <__smakebuf_r+0x84>)
  4033f6:	9900      	ldr	r1, [sp, #0]
  4033f8:	63ef      	str	r7, [r5, #60]	; 0x3c
  4033fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4033fe:	81a3      	strh	r3, [r4, #12]
  403400:	6020      	str	r0, [r4, #0]
  403402:	6120      	str	r0, [r4, #16]
  403404:	6161      	str	r1, [r4, #20]
  403406:	b91a      	cbnz	r2, 403410 <__smakebuf_r+0x54>
  403408:	4333      	orrs	r3, r6
  40340a:	81a3      	strh	r3, [r4, #12]
  40340c:	b003      	add	sp, #12
  40340e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403410:	4628      	mov	r0, r5
  403412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403416:	f000 ffff 	bl	404418 <_isatty_r>
  40341a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40341e:	2800      	cmp	r0, #0
  403420:	d0f2      	beq.n	403408 <__smakebuf_r+0x4c>
  403422:	f043 0301 	orr.w	r3, r3, #1
  403426:	e7ef      	b.n	403408 <__smakebuf_r+0x4c>
  403428:	059a      	lsls	r2, r3, #22
  40342a:	d4ef      	bmi.n	40340c <__smakebuf_r+0x50>
  40342c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403430:	f043 0302 	orr.w	r3, r3, #2
  403434:	2101      	movs	r1, #1
  403436:	81a3      	strh	r3, [r4, #12]
  403438:	6022      	str	r2, [r4, #0]
  40343a:	6122      	str	r2, [r4, #16]
  40343c:	6161      	str	r1, [r4, #20]
  40343e:	e7e5      	b.n	40340c <__smakebuf_r+0x50>
  403440:	00402b85 	.word	0x00402b85

00403444 <malloc>:
  403444:	4b02      	ldr	r3, [pc, #8]	; (403450 <malloc+0xc>)
  403446:	4601      	mov	r1, r0
  403448:	6818      	ldr	r0, [r3, #0]
  40344a:	f000 b803 	b.w	403454 <_malloc_r>
  40344e:	bf00      	nop
  403450:	20000018 	.word	0x20000018

00403454 <_malloc_r>:
  403454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403458:	f101 060b 	add.w	r6, r1, #11
  40345c:	2e16      	cmp	r6, #22
  40345e:	b083      	sub	sp, #12
  403460:	4605      	mov	r5, r0
  403462:	f240 809e 	bls.w	4035a2 <_malloc_r+0x14e>
  403466:	f036 0607 	bics.w	r6, r6, #7
  40346a:	f100 80bd 	bmi.w	4035e8 <_malloc_r+0x194>
  40346e:	42b1      	cmp	r1, r6
  403470:	f200 80ba 	bhi.w	4035e8 <_malloc_r+0x194>
  403474:	f000 fc02 	bl	403c7c <__malloc_lock>
  403478:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40347c:	f0c0 8293 	bcc.w	4039a6 <_malloc_r+0x552>
  403480:	0a73      	lsrs	r3, r6, #9
  403482:	f000 80b8 	beq.w	4035f6 <_malloc_r+0x1a2>
  403486:	2b04      	cmp	r3, #4
  403488:	f200 8179 	bhi.w	40377e <_malloc_r+0x32a>
  40348c:	09b3      	lsrs	r3, r6, #6
  40348e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403492:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403496:	00c3      	lsls	r3, r0, #3
  403498:	4fbf      	ldr	r7, [pc, #764]	; (403798 <_malloc_r+0x344>)
  40349a:	443b      	add	r3, r7
  40349c:	f1a3 0108 	sub.w	r1, r3, #8
  4034a0:	685c      	ldr	r4, [r3, #4]
  4034a2:	42a1      	cmp	r1, r4
  4034a4:	d106      	bne.n	4034b4 <_malloc_r+0x60>
  4034a6:	e00c      	b.n	4034c2 <_malloc_r+0x6e>
  4034a8:	2a00      	cmp	r2, #0
  4034aa:	f280 80aa 	bge.w	403602 <_malloc_r+0x1ae>
  4034ae:	68e4      	ldr	r4, [r4, #12]
  4034b0:	42a1      	cmp	r1, r4
  4034b2:	d006      	beq.n	4034c2 <_malloc_r+0x6e>
  4034b4:	6863      	ldr	r3, [r4, #4]
  4034b6:	f023 0303 	bic.w	r3, r3, #3
  4034ba:	1b9a      	subs	r2, r3, r6
  4034bc:	2a0f      	cmp	r2, #15
  4034be:	ddf3      	ble.n	4034a8 <_malloc_r+0x54>
  4034c0:	4670      	mov	r0, lr
  4034c2:	693c      	ldr	r4, [r7, #16]
  4034c4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4037ac <_malloc_r+0x358>
  4034c8:	4574      	cmp	r4, lr
  4034ca:	f000 81ab 	beq.w	403824 <_malloc_r+0x3d0>
  4034ce:	6863      	ldr	r3, [r4, #4]
  4034d0:	f023 0303 	bic.w	r3, r3, #3
  4034d4:	1b9a      	subs	r2, r3, r6
  4034d6:	2a0f      	cmp	r2, #15
  4034d8:	f300 8190 	bgt.w	4037fc <_malloc_r+0x3a8>
  4034dc:	2a00      	cmp	r2, #0
  4034de:	f8c7 e014 	str.w	lr, [r7, #20]
  4034e2:	f8c7 e010 	str.w	lr, [r7, #16]
  4034e6:	f280 809d 	bge.w	403624 <_malloc_r+0x1d0>
  4034ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4034ee:	f080 8161 	bcs.w	4037b4 <_malloc_r+0x360>
  4034f2:	08db      	lsrs	r3, r3, #3
  4034f4:	f103 0c01 	add.w	ip, r3, #1
  4034f8:	1099      	asrs	r1, r3, #2
  4034fa:	687a      	ldr	r2, [r7, #4]
  4034fc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403500:	f8c4 8008 	str.w	r8, [r4, #8]
  403504:	2301      	movs	r3, #1
  403506:	408b      	lsls	r3, r1
  403508:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40350c:	4313      	orrs	r3, r2
  40350e:	3908      	subs	r1, #8
  403510:	60e1      	str	r1, [r4, #12]
  403512:	607b      	str	r3, [r7, #4]
  403514:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403518:	f8c8 400c 	str.w	r4, [r8, #12]
  40351c:	1082      	asrs	r2, r0, #2
  40351e:	2401      	movs	r4, #1
  403520:	4094      	lsls	r4, r2
  403522:	429c      	cmp	r4, r3
  403524:	f200 808b 	bhi.w	40363e <_malloc_r+0x1ea>
  403528:	421c      	tst	r4, r3
  40352a:	d106      	bne.n	40353a <_malloc_r+0xe6>
  40352c:	f020 0003 	bic.w	r0, r0, #3
  403530:	0064      	lsls	r4, r4, #1
  403532:	421c      	tst	r4, r3
  403534:	f100 0004 	add.w	r0, r0, #4
  403538:	d0fa      	beq.n	403530 <_malloc_r+0xdc>
  40353a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40353e:	46cc      	mov	ip, r9
  403540:	4680      	mov	r8, r0
  403542:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403546:	459c      	cmp	ip, r3
  403548:	d107      	bne.n	40355a <_malloc_r+0x106>
  40354a:	e16d      	b.n	403828 <_malloc_r+0x3d4>
  40354c:	2a00      	cmp	r2, #0
  40354e:	f280 817b 	bge.w	403848 <_malloc_r+0x3f4>
  403552:	68db      	ldr	r3, [r3, #12]
  403554:	459c      	cmp	ip, r3
  403556:	f000 8167 	beq.w	403828 <_malloc_r+0x3d4>
  40355a:	6859      	ldr	r1, [r3, #4]
  40355c:	f021 0103 	bic.w	r1, r1, #3
  403560:	1b8a      	subs	r2, r1, r6
  403562:	2a0f      	cmp	r2, #15
  403564:	ddf2      	ble.n	40354c <_malloc_r+0xf8>
  403566:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40356a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40356e:	9300      	str	r3, [sp, #0]
  403570:	199c      	adds	r4, r3, r6
  403572:	4628      	mov	r0, r5
  403574:	f046 0601 	orr.w	r6, r6, #1
  403578:	f042 0501 	orr.w	r5, r2, #1
  40357c:	605e      	str	r6, [r3, #4]
  40357e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403582:	f8cc 8008 	str.w	r8, [ip, #8]
  403586:	617c      	str	r4, [r7, #20]
  403588:	613c      	str	r4, [r7, #16]
  40358a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40358e:	f8c4 e008 	str.w	lr, [r4, #8]
  403592:	6065      	str	r5, [r4, #4]
  403594:	505a      	str	r2, [r3, r1]
  403596:	f000 fb73 	bl	403c80 <__malloc_unlock>
  40359a:	9b00      	ldr	r3, [sp, #0]
  40359c:	f103 0408 	add.w	r4, r3, #8
  4035a0:	e01e      	b.n	4035e0 <_malloc_r+0x18c>
  4035a2:	2910      	cmp	r1, #16
  4035a4:	d820      	bhi.n	4035e8 <_malloc_r+0x194>
  4035a6:	f000 fb69 	bl	403c7c <__malloc_lock>
  4035aa:	2610      	movs	r6, #16
  4035ac:	2318      	movs	r3, #24
  4035ae:	2002      	movs	r0, #2
  4035b0:	4f79      	ldr	r7, [pc, #484]	; (403798 <_malloc_r+0x344>)
  4035b2:	443b      	add	r3, r7
  4035b4:	f1a3 0208 	sub.w	r2, r3, #8
  4035b8:	685c      	ldr	r4, [r3, #4]
  4035ba:	4294      	cmp	r4, r2
  4035bc:	f000 813d 	beq.w	40383a <_malloc_r+0x3e6>
  4035c0:	6863      	ldr	r3, [r4, #4]
  4035c2:	68e1      	ldr	r1, [r4, #12]
  4035c4:	68a6      	ldr	r6, [r4, #8]
  4035c6:	f023 0303 	bic.w	r3, r3, #3
  4035ca:	4423      	add	r3, r4
  4035cc:	4628      	mov	r0, r5
  4035ce:	685a      	ldr	r2, [r3, #4]
  4035d0:	60f1      	str	r1, [r6, #12]
  4035d2:	f042 0201 	orr.w	r2, r2, #1
  4035d6:	608e      	str	r6, [r1, #8]
  4035d8:	605a      	str	r2, [r3, #4]
  4035da:	f000 fb51 	bl	403c80 <__malloc_unlock>
  4035de:	3408      	adds	r4, #8
  4035e0:	4620      	mov	r0, r4
  4035e2:	b003      	add	sp, #12
  4035e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035e8:	2400      	movs	r4, #0
  4035ea:	230c      	movs	r3, #12
  4035ec:	4620      	mov	r0, r4
  4035ee:	602b      	str	r3, [r5, #0]
  4035f0:	b003      	add	sp, #12
  4035f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035f6:	2040      	movs	r0, #64	; 0x40
  4035f8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4035fc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403600:	e74a      	b.n	403498 <_malloc_r+0x44>
  403602:	4423      	add	r3, r4
  403604:	68e1      	ldr	r1, [r4, #12]
  403606:	685a      	ldr	r2, [r3, #4]
  403608:	68a6      	ldr	r6, [r4, #8]
  40360a:	f042 0201 	orr.w	r2, r2, #1
  40360e:	60f1      	str	r1, [r6, #12]
  403610:	4628      	mov	r0, r5
  403612:	608e      	str	r6, [r1, #8]
  403614:	605a      	str	r2, [r3, #4]
  403616:	f000 fb33 	bl	403c80 <__malloc_unlock>
  40361a:	3408      	adds	r4, #8
  40361c:	4620      	mov	r0, r4
  40361e:	b003      	add	sp, #12
  403620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403624:	4423      	add	r3, r4
  403626:	4628      	mov	r0, r5
  403628:	685a      	ldr	r2, [r3, #4]
  40362a:	f042 0201 	orr.w	r2, r2, #1
  40362e:	605a      	str	r2, [r3, #4]
  403630:	f000 fb26 	bl	403c80 <__malloc_unlock>
  403634:	3408      	adds	r4, #8
  403636:	4620      	mov	r0, r4
  403638:	b003      	add	sp, #12
  40363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40363e:	68bc      	ldr	r4, [r7, #8]
  403640:	6863      	ldr	r3, [r4, #4]
  403642:	f023 0803 	bic.w	r8, r3, #3
  403646:	45b0      	cmp	r8, r6
  403648:	d304      	bcc.n	403654 <_malloc_r+0x200>
  40364a:	eba8 0306 	sub.w	r3, r8, r6
  40364e:	2b0f      	cmp	r3, #15
  403650:	f300 8085 	bgt.w	40375e <_malloc_r+0x30a>
  403654:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4037b0 <_malloc_r+0x35c>
  403658:	4b50      	ldr	r3, [pc, #320]	; (40379c <_malloc_r+0x348>)
  40365a:	f8d9 2000 	ldr.w	r2, [r9]
  40365e:	681b      	ldr	r3, [r3, #0]
  403660:	3201      	adds	r2, #1
  403662:	4433      	add	r3, r6
  403664:	eb04 0a08 	add.w	sl, r4, r8
  403668:	f000 8155 	beq.w	403916 <_malloc_r+0x4c2>
  40366c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403670:	330f      	adds	r3, #15
  403672:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403676:	f02b 0b0f 	bic.w	fp, fp, #15
  40367a:	4659      	mov	r1, fp
  40367c:	4628      	mov	r0, r5
  40367e:	f000 fca7 	bl	403fd0 <_sbrk_r>
  403682:	1c41      	adds	r1, r0, #1
  403684:	4602      	mov	r2, r0
  403686:	f000 80fc 	beq.w	403882 <_malloc_r+0x42e>
  40368a:	4582      	cmp	sl, r0
  40368c:	f200 80f7 	bhi.w	40387e <_malloc_r+0x42a>
  403690:	4b43      	ldr	r3, [pc, #268]	; (4037a0 <_malloc_r+0x34c>)
  403692:	6819      	ldr	r1, [r3, #0]
  403694:	4459      	add	r1, fp
  403696:	6019      	str	r1, [r3, #0]
  403698:	f000 814d 	beq.w	403936 <_malloc_r+0x4e2>
  40369c:	f8d9 0000 	ldr.w	r0, [r9]
  4036a0:	3001      	adds	r0, #1
  4036a2:	bf1b      	ittet	ne
  4036a4:	eba2 0a0a 	subne.w	sl, r2, sl
  4036a8:	4451      	addne	r1, sl
  4036aa:	f8c9 2000 	streq.w	r2, [r9]
  4036ae:	6019      	strne	r1, [r3, #0]
  4036b0:	f012 0107 	ands.w	r1, r2, #7
  4036b4:	f000 8115 	beq.w	4038e2 <_malloc_r+0x48e>
  4036b8:	f1c1 0008 	rsb	r0, r1, #8
  4036bc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4036c0:	4402      	add	r2, r0
  4036c2:	3108      	adds	r1, #8
  4036c4:	eb02 090b 	add.w	r9, r2, fp
  4036c8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4036cc:	eba1 0909 	sub.w	r9, r1, r9
  4036d0:	4649      	mov	r1, r9
  4036d2:	4628      	mov	r0, r5
  4036d4:	9301      	str	r3, [sp, #4]
  4036d6:	9200      	str	r2, [sp, #0]
  4036d8:	f000 fc7a 	bl	403fd0 <_sbrk_r>
  4036dc:	1c43      	adds	r3, r0, #1
  4036de:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4036e2:	f000 8143 	beq.w	40396c <_malloc_r+0x518>
  4036e6:	1a80      	subs	r0, r0, r2
  4036e8:	4448      	add	r0, r9
  4036ea:	f040 0001 	orr.w	r0, r0, #1
  4036ee:	6819      	ldr	r1, [r3, #0]
  4036f0:	60ba      	str	r2, [r7, #8]
  4036f2:	4449      	add	r1, r9
  4036f4:	42bc      	cmp	r4, r7
  4036f6:	6050      	str	r0, [r2, #4]
  4036f8:	6019      	str	r1, [r3, #0]
  4036fa:	d017      	beq.n	40372c <_malloc_r+0x2d8>
  4036fc:	f1b8 0f0f 	cmp.w	r8, #15
  403700:	f240 80fb 	bls.w	4038fa <_malloc_r+0x4a6>
  403704:	6860      	ldr	r0, [r4, #4]
  403706:	f1a8 020c 	sub.w	r2, r8, #12
  40370a:	f022 0207 	bic.w	r2, r2, #7
  40370e:	eb04 0e02 	add.w	lr, r4, r2
  403712:	f000 0001 	and.w	r0, r0, #1
  403716:	f04f 0c05 	mov.w	ip, #5
  40371a:	4310      	orrs	r0, r2
  40371c:	2a0f      	cmp	r2, #15
  40371e:	6060      	str	r0, [r4, #4]
  403720:	f8ce c004 	str.w	ip, [lr, #4]
  403724:	f8ce c008 	str.w	ip, [lr, #8]
  403728:	f200 8117 	bhi.w	40395a <_malloc_r+0x506>
  40372c:	4b1d      	ldr	r3, [pc, #116]	; (4037a4 <_malloc_r+0x350>)
  40372e:	68bc      	ldr	r4, [r7, #8]
  403730:	681a      	ldr	r2, [r3, #0]
  403732:	4291      	cmp	r1, r2
  403734:	bf88      	it	hi
  403736:	6019      	strhi	r1, [r3, #0]
  403738:	4b1b      	ldr	r3, [pc, #108]	; (4037a8 <_malloc_r+0x354>)
  40373a:	681a      	ldr	r2, [r3, #0]
  40373c:	4291      	cmp	r1, r2
  40373e:	6862      	ldr	r2, [r4, #4]
  403740:	bf88      	it	hi
  403742:	6019      	strhi	r1, [r3, #0]
  403744:	f022 0203 	bic.w	r2, r2, #3
  403748:	4296      	cmp	r6, r2
  40374a:	eba2 0306 	sub.w	r3, r2, r6
  40374e:	d801      	bhi.n	403754 <_malloc_r+0x300>
  403750:	2b0f      	cmp	r3, #15
  403752:	dc04      	bgt.n	40375e <_malloc_r+0x30a>
  403754:	4628      	mov	r0, r5
  403756:	f000 fa93 	bl	403c80 <__malloc_unlock>
  40375a:	2400      	movs	r4, #0
  40375c:	e740      	b.n	4035e0 <_malloc_r+0x18c>
  40375e:	19a2      	adds	r2, r4, r6
  403760:	f043 0301 	orr.w	r3, r3, #1
  403764:	f046 0601 	orr.w	r6, r6, #1
  403768:	6066      	str	r6, [r4, #4]
  40376a:	4628      	mov	r0, r5
  40376c:	60ba      	str	r2, [r7, #8]
  40376e:	6053      	str	r3, [r2, #4]
  403770:	f000 fa86 	bl	403c80 <__malloc_unlock>
  403774:	3408      	adds	r4, #8
  403776:	4620      	mov	r0, r4
  403778:	b003      	add	sp, #12
  40377a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40377e:	2b14      	cmp	r3, #20
  403780:	d971      	bls.n	403866 <_malloc_r+0x412>
  403782:	2b54      	cmp	r3, #84	; 0x54
  403784:	f200 80a3 	bhi.w	4038ce <_malloc_r+0x47a>
  403788:	0b33      	lsrs	r3, r6, #12
  40378a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40378e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403792:	00c3      	lsls	r3, r0, #3
  403794:	e680      	b.n	403498 <_malloc_r+0x44>
  403796:	bf00      	nop
  403798:	200005b4 	.word	0x200005b4
  40379c:	20000a94 	.word	0x20000a94
  4037a0:	20000a64 	.word	0x20000a64
  4037a4:	20000a8c 	.word	0x20000a8c
  4037a8:	20000a90 	.word	0x20000a90
  4037ac:	200005bc 	.word	0x200005bc
  4037b0:	200009bc 	.word	0x200009bc
  4037b4:	0a5a      	lsrs	r2, r3, #9
  4037b6:	2a04      	cmp	r2, #4
  4037b8:	d95b      	bls.n	403872 <_malloc_r+0x41e>
  4037ba:	2a14      	cmp	r2, #20
  4037bc:	f200 80ae 	bhi.w	40391c <_malloc_r+0x4c8>
  4037c0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4037c4:	00c9      	lsls	r1, r1, #3
  4037c6:	325b      	adds	r2, #91	; 0x5b
  4037c8:	eb07 0c01 	add.w	ip, r7, r1
  4037cc:	5879      	ldr	r1, [r7, r1]
  4037ce:	f1ac 0c08 	sub.w	ip, ip, #8
  4037d2:	458c      	cmp	ip, r1
  4037d4:	f000 8088 	beq.w	4038e8 <_malloc_r+0x494>
  4037d8:	684a      	ldr	r2, [r1, #4]
  4037da:	f022 0203 	bic.w	r2, r2, #3
  4037de:	4293      	cmp	r3, r2
  4037e0:	d273      	bcs.n	4038ca <_malloc_r+0x476>
  4037e2:	6889      	ldr	r1, [r1, #8]
  4037e4:	458c      	cmp	ip, r1
  4037e6:	d1f7      	bne.n	4037d8 <_malloc_r+0x384>
  4037e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4037ec:	687b      	ldr	r3, [r7, #4]
  4037ee:	60e2      	str	r2, [r4, #12]
  4037f0:	f8c4 c008 	str.w	ip, [r4, #8]
  4037f4:	6094      	str	r4, [r2, #8]
  4037f6:	f8cc 400c 	str.w	r4, [ip, #12]
  4037fa:	e68f      	b.n	40351c <_malloc_r+0xc8>
  4037fc:	19a1      	adds	r1, r4, r6
  4037fe:	f046 0c01 	orr.w	ip, r6, #1
  403802:	f042 0601 	orr.w	r6, r2, #1
  403806:	f8c4 c004 	str.w	ip, [r4, #4]
  40380a:	4628      	mov	r0, r5
  40380c:	6179      	str	r1, [r7, #20]
  40380e:	6139      	str	r1, [r7, #16]
  403810:	f8c1 e00c 	str.w	lr, [r1, #12]
  403814:	f8c1 e008 	str.w	lr, [r1, #8]
  403818:	604e      	str	r6, [r1, #4]
  40381a:	50e2      	str	r2, [r4, r3]
  40381c:	f000 fa30 	bl	403c80 <__malloc_unlock>
  403820:	3408      	adds	r4, #8
  403822:	e6dd      	b.n	4035e0 <_malloc_r+0x18c>
  403824:	687b      	ldr	r3, [r7, #4]
  403826:	e679      	b.n	40351c <_malloc_r+0xc8>
  403828:	f108 0801 	add.w	r8, r8, #1
  40382c:	f018 0f03 	tst.w	r8, #3
  403830:	f10c 0c08 	add.w	ip, ip, #8
  403834:	f47f ae85 	bne.w	403542 <_malloc_r+0xee>
  403838:	e02d      	b.n	403896 <_malloc_r+0x442>
  40383a:	68dc      	ldr	r4, [r3, #12]
  40383c:	42a3      	cmp	r3, r4
  40383e:	bf08      	it	eq
  403840:	3002      	addeq	r0, #2
  403842:	f43f ae3e 	beq.w	4034c2 <_malloc_r+0x6e>
  403846:	e6bb      	b.n	4035c0 <_malloc_r+0x16c>
  403848:	4419      	add	r1, r3
  40384a:	461c      	mov	r4, r3
  40384c:	684a      	ldr	r2, [r1, #4]
  40384e:	68db      	ldr	r3, [r3, #12]
  403850:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403854:	f042 0201 	orr.w	r2, r2, #1
  403858:	604a      	str	r2, [r1, #4]
  40385a:	4628      	mov	r0, r5
  40385c:	60f3      	str	r3, [r6, #12]
  40385e:	609e      	str	r6, [r3, #8]
  403860:	f000 fa0e 	bl	403c80 <__malloc_unlock>
  403864:	e6bc      	b.n	4035e0 <_malloc_r+0x18c>
  403866:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40386a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40386e:	00c3      	lsls	r3, r0, #3
  403870:	e612      	b.n	403498 <_malloc_r+0x44>
  403872:	099a      	lsrs	r2, r3, #6
  403874:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403878:	00c9      	lsls	r1, r1, #3
  40387a:	3238      	adds	r2, #56	; 0x38
  40387c:	e7a4      	b.n	4037c8 <_malloc_r+0x374>
  40387e:	42bc      	cmp	r4, r7
  403880:	d054      	beq.n	40392c <_malloc_r+0x4d8>
  403882:	68bc      	ldr	r4, [r7, #8]
  403884:	6862      	ldr	r2, [r4, #4]
  403886:	f022 0203 	bic.w	r2, r2, #3
  40388a:	e75d      	b.n	403748 <_malloc_r+0x2f4>
  40388c:	f859 3908 	ldr.w	r3, [r9], #-8
  403890:	4599      	cmp	r9, r3
  403892:	f040 8086 	bne.w	4039a2 <_malloc_r+0x54e>
  403896:	f010 0f03 	tst.w	r0, #3
  40389a:	f100 30ff 	add.w	r0, r0, #4294967295
  40389e:	d1f5      	bne.n	40388c <_malloc_r+0x438>
  4038a0:	687b      	ldr	r3, [r7, #4]
  4038a2:	ea23 0304 	bic.w	r3, r3, r4
  4038a6:	607b      	str	r3, [r7, #4]
  4038a8:	0064      	lsls	r4, r4, #1
  4038aa:	429c      	cmp	r4, r3
  4038ac:	f63f aec7 	bhi.w	40363e <_malloc_r+0x1ea>
  4038b0:	2c00      	cmp	r4, #0
  4038b2:	f43f aec4 	beq.w	40363e <_malloc_r+0x1ea>
  4038b6:	421c      	tst	r4, r3
  4038b8:	4640      	mov	r0, r8
  4038ba:	f47f ae3e 	bne.w	40353a <_malloc_r+0xe6>
  4038be:	0064      	lsls	r4, r4, #1
  4038c0:	421c      	tst	r4, r3
  4038c2:	f100 0004 	add.w	r0, r0, #4
  4038c6:	d0fa      	beq.n	4038be <_malloc_r+0x46a>
  4038c8:	e637      	b.n	40353a <_malloc_r+0xe6>
  4038ca:	468c      	mov	ip, r1
  4038cc:	e78c      	b.n	4037e8 <_malloc_r+0x394>
  4038ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4038d2:	d815      	bhi.n	403900 <_malloc_r+0x4ac>
  4038d4:	0bf3      	lsrs	r3, r6, #15
  4038d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4038da:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4038de:	00c3      	lsls	r3, r0, #3
  4038e0:	e5da      	b.n	403498 <_malloc_r+0x44>
  4038e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4038e6:	e6ed      	b.n	4036c4 <_malloc_r+0x270>
  4038e8:	687b      	ldr	r3, [r7, #4]
  4038ea:	1092      	asrs	r2, r2, #2
  4038ec:	2101      	movs	r1, #1
  4038ee:	fa01 f202 	lsl.w	r2, r1, r2
  4038f2:	4313      	orrs	r3, r2
  4038f4:	607b      	str	r3, [r7, #4]
  4038f6:	4662      	mov	r2, ip
  4038f8:	e779      	b.n	4037ee <_malloc_r+0x39a>
  4038fa:	2301      	movs	r3, #1
  4038fc:	6053      	str	r3, [r2, #4]
  4038fe:	e729      	b.n	403754 <_malloc_r+0x300>
  403900:	f240 5254 	movw	r2, #1364	; 0x554
  403904:	4293      	cmp	r3, r2
  403906:	d822      	bhi.n	40394e <_malloc_r+0x4fa>
  403908:	0cb3      	lsrs	r3, r6, #18
  40390a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40390e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403912:	00c3      	lsls	r3, r0, #3
  403914:	e5c0      	b.n	403498 <_malloc_r+0x44>
  403916:	f103 0b10 	add.w	fp, r3, #16
  40391a:	e6ae      	b.n	40367a <_malloc_r+0x226>
  40391c:	2a54      	cmp	r2, #84	; 0x54
  40391e:	d829      	bhi.n	403974 <_malloc_r+0x520>
  403920:	0b1a      	lsrs	r2, r3, #12
  403922:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403926:	00c9      	lsls	r1, r1, #3
  403928:	326e      	adds	r2, #110	; 0x6e
  40392a:	e74d      	b.n	4037c8 <_malloc_r+0x374>
  40392c:	4b20      	ldr	r3, [pc, #128]	; (4039b0 <_malloc_r+0x55c>)
  40392e:	6819      	ldr	r1, [r3, #0]
  403930:	4459      	add	r1, fp
  403932:	6019      	str	r1, [r3, #0]
  403934:	e6b2      	b.n	40369c <_malloc_r+0x248>
  403936:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40393a:	2800      	cmp	r0, #0
  40393c:	f47f aeae 	bne.w	40369c <_malloc_r+0x248>
  403940:	eb08 030b 	add.w	r3, r8, fp
  403944:	68ba      	ldr	r2, [r7, #8]
  403946:	f043 0301 	orr.w	r3, r3, #1
  40394a:	6053      	str	r3, [r2, #4]
  40394c:	e6ee      	b.n	40372c <_malloc_r+0x2d8>
  40394e:	207f      	movs	r0, #127	; 0x7f
  403950:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403954:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403958:	e59e      	b.n	403498 <_malloc_r+0x44>
  40395a:	f104 0108 	add.w	r1, r4, #8
  40395e:	4628      	mov	r0, r5
  403960:	9300      	str	r3, [sp, #0]
  403962:	f7ff fa63 	bl	402e2c <_free_r>
  403966:	9b00      	ldr	r3, [sp, #0]
  403968:	6819      	ldr	r1, [r3, #0]
  40396a:	e6df      	b.n	40372c <_malloc_r+0x2d8>
  40396c:	2001      	movs	r0, #1
  40396e:	f04f 0900 	mov.w	r9, #0
  403972:	e6bc      	b.n	4036ee <_malloc_r+0x29a>
  403974:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403978:	d805      	bhi.n	403986 <_malloc_r+0x532>
  40397a:	0bda      	lsrs	r2, r3, #15
  40397c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403980:	00c9      	lsls	r1, r1, #3
  403982:	3277      	adds	r2, #119	; 0x77
  403984:	e720      	b.n	4037c8 <_malloc_r+0x374>
  403986:	f240 5154 	movw	r1, #1364	; 0x554
  40398a:	428a      	cmp	r2, r1
  40398c:	d805      	bhi.n	40399a <_malloc_r+0x546>
  40398e:	0c9a      	lsrs	r2, r3, #18
  403990:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403994:	00c9      	lsls	r1, r1, #3
  403996:	327c      	adds	r2, #124	; 0x7c
  403998:	e716      	b.n	4037c8 <_malloc_r+0x374>
  40399a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40399e:	227e      	movs	r2, #126	; 0x7e
  4039a0:	e712      	b.n	4037c8 <_malloc_r+0x374>
  4039a2:	687b      	ldr	r3, [r7, #4]
  4039a4:	e780      	b.n	4038a8 <_malloc_r+0x454>
  4039a6:	08f0      	lsrs	r0, r6, #3
  4039a8:	f106 0308 	add.w	r3, r6, #8
  4039ac:	e600      	b.n	4035b0 <_malloc_r+0x15c>
  4039ae:	bf00      	nop
  4039b0:	20000a64 	.word	0x20000a64

004039b4 <__ascii_mbtowc>:
  4039b4:	b082      	sub	sp, #8
  4039b6:	b149      	cbz	r1, 4039cc <__ascii_mbtowc+0x18>
  4039b8:	b15a      	cbz	r2, 4039d2 <__ascii_mbtowc+0x1e>
  4039ba:	b16b      	cbz	r3, 4039d8 <__ascii_mbtowc+0x24>
  4039bc:	7813      	ldrb	r3, [r2, #0]
  4039be:	600b      	str	r3, [r1, #0]
  4039c0:	7812      	ldrb	r2, [r2, #0]
  4039c2:	1c10      	adds	r0, r2, #0
  4039c4:	bf18      	it	ne
  4039c6:	2001      	movne	r0, #1
  4039c8:	b002      	add	sp, #8
  4039ca:	4770      	bx	lr
  4039cc:	a901      	add	r1, sp, #4
  4039ce:	2a00      	cmp	r2, #0
  4039d0:	d1f3      	bne.n	4039ba <__ascii_mbtowc+0x6>
  4039d2:	4610      	mov	r0, r2
  4039d4:	b002      	add	sp, #8
  4039d6:	4770      	bx	lr
  4039d8:	f06f 0001 	mvn.w	r0, #1
  4039dc:	e7f4      	b.n	4039c8 <__ascii_mbtowc+0x14>
  4039de:	bf00      	nop

004039e0 <memchr>:
  4039e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4039e4:	2a10      	cmp	r2, #16
  4039e6:	db2b      	blt.n	403a40 <memchr+0x60>
  4039e8:	f010 0f07 	tst.w	r0, #7
  4039ec:	d008      	beq.n	403a00 <memchr+0x20>
  4039ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4039f2:	3a01      	subs	r2, #1
  4039f4:	428b      	cmp	r3, r1
  4039f6:	d02d      	beq.n	403a54 <memchr+0x74>
  4039f8:	f010 0f07 	tst.w	r0, #7
  4039fc:	b342      	cbz	r2, 403a50 <memchr+0x70>
  4039fe:	d1f6      	bne.n	4039ee <memchr+0xe>
  403a00:	b4f0      	push	{r4, r5, r6, r7}
  403a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403a0a:	f022 0407 	bic.w	r4, r2, #7
  403a0e:	f07f 0700 	mvns.w	r7, #0
  403a12:	2300      	movs	r3, #0
  403a14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403a18:	3c08      	subs	r4, #8
  403a1a:	ea85 0501 	eor.w	r5, r5, r1
  403a1e:	ea86 0601 	eor.w	r6, r6, r1
  403a22:	fa85 f547 	uadd8	r5, r5, r7
  403a26:	faa3 f587 	sel	r5, r3, r7
  403a2a:	fa86 f647 	uadd8	r6, r6, r7
  403a2e:	faa5 f687 	sel	r6, r5, r7
  403a32:	b98e      	cbnz	r6, 403a58 <memchr+0x78>
  403a34:	d1ee      	bne.n	403a14 <memchr+0x34>
  403a36:	bcf0      	pop	{r4, r5, r6, r7}
  403a38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403a3c:	f002 0207 	and.w	r2, r2, #7
  403a40:	b132      	cbz	r2, 403a50 <memchr+0x70>
  403a42:	f810 3b01 	ldrb.w	r3, [r0], #1
  403a46:	3a01      	subs	r2, #1
  403a48:	ea83 0301 	eor.w	r3, r3, r1
  403a4c:	b113      	cbz	r3, 403a54 <memchr+0x74>
  403a4e:	d1f8      	bne.n	403a42 <memchr+0x62>
  403a50:	2000      	movs	r0, #0
  403a52:	4770      	bx	lr
  403a54:	3801      	subs	r0, #1
  403a56:	4770      	bx	lr
  403a58:	2d00      	cmp	r5, #0
  403a5a:	bf06      	itte	eq
  403a5c:	4635      	moveq	r5, r6
  403a5e:	3803      	subeq	r0, #3
  403a60:	3807      	subne	r0, #7
  403a62:	f015 0f01 	tst.w	r5, #1
  403a66:	d107      	bne.n	403a78 <memchr+0x98>
  403a68:	3001      	adds	r0, #1
  403a6a:	f415 7f80 	tst.w	r5, #256	; 0x100
  403a6e:	bf02      	ittt	eq
  403a70:	3001      	addeq	r0, #1
  403a72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403a76:	3001      	addeq	r0, #1
  403a78:	bcf0      	pop	{r4, r5, r6, r7}
  403a7a:	3801      	subs	r0, #1
  403a7c:	4770      	bx	lr
  403a7e:	bf00      	nop

00403a80 <memcpy>:
  403a80:	4684      	mov	ip, r0
  403a82:	ea41 0300 	orr.w	r3, r1, r0
  403a86:	f013 0303 	ands.w	r3, r3, #3
  403a8a:	d16d      	bne.n	403b68 <memcpy+0xe8>
  403a8c:	3a40      	subs	r2, #64	; 0x40
  403a8e:	d341      	bcc.n	403b14 <memcpy+0x94>
  403a90:	f851 3b04 	ldr.w	r3, [r1], #4
  403a94:	f840 3b04 	str.w	r3, [r0], #4
  403a98:	f851 3b04 	ldr.w	r3, [r1], #4
  403a9c:	f840 3b04 	str.w	r3, [r0], #4
  403aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  403aa4:	f840 3b04 	str.w	r3, [r0], #4
  403aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  403aac:	f840 3b04 	str.w	r3, [r0], #4
  403ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ab4:	f840 3b04 	str.w	r3, [r0], #4
  403ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  403abc:	f840 3b04 	str.w	r3, [r0], #4
  403ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ac4:	f840 3b04 	str.w	r3, [r0], #4
  403ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  403acc:	f840 3b04 	str.w	r3, [r0], #4
  403ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ad4:	f840 3b04 	str.w	r3, [r0], #4
  403ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  403adc:	f840 3b04 	str.w	r3, [r0], #4
  403ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  403ae4:	f840 3b04 	str.w	r3, [r0], #4
  403ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  403aec:	f840 3b04 	str.w	r3, [r0], #4
  403af0:	f851 3b04 	ldr.w	r3, [r1], #4
  403af4:	f840 3b04 	str.w	r3, [r0], #4
  403af8:	f851 3b04 	ldr.w	r3, [r1], #4
  403afc:	f840 3b04 	str.w	r3, [r0], #4
  403b00:	f851 3b04 	ldr.w	r3, [r1], #4
  403b04:	f840 3b04 	str.w	r3, [r0], #4
  403b08:	f851 3b04 	ldr.w	r3, [r1], #4
  403b0c:	f840 3b04 	str.w	r3, [r0], #4
  403b10:	3a40      	subs	r2, #64	; 0x40
  403b12:	d2bd      	bcs.n	403a90 <memcpy+0x10>
  403b14:	3230      	adds	r2, #48	; 0x30
  403b16:	d311      	bcc.n	403b3c <memcpy+0xbc>
  403b18:	f851 3b04 	ldr.w	r3, [r1], #4
  403b1c:	f840 3b04 	str.w	r3, [r0], #4
  403b20:	f851 3b04 	ldr.w	r3, [r1], #4
  403b24:	f840 3b04 	str.w	r3, [r0], #4
  403b28:	f851 3b04 	ldr.w	r3, [r1], #4
  403b2c:	f840 3b04 	str.w	r3, [r0], #4
  403b30:	f851 3b04 	ldr.w	r3, [r1], #4
  403b34:	f840 3b04 	str.w	r3, [r0], #4
  403b38:	3a10      	subs	r2, #16
  403b3a:	d2ed      	bcs.n	403b18 <memcpy+0x98>
  403b3c:	320c      	adds	r2, #12
  403b3e:	d305      	bcc.n	403b4c <memcpy+0xcc>
  403b40:	f851 3b04 	ldr.w	r3, [r1], #4
  403b44:	f840 3b04 	str.w	r3, [r0], #4
  403b48:	3a04      	subs	r2, #4
  403b4a:	d2f9      	bcs.n	403b40 <memcpy+0xc0>
  403b4c:	3204      	adds	r2, #4
  403b4e:	d008      	beq.n	403b62 <memcpy+0xe2>
  403b50:	07d2      	lsls	r2, r2, #31
  403b52:	bf1c      	itt	ne
  403b54:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403b58:	f800 3b01 	strbne.w	r3, [r0], #1
  403b5c:	d301      	bcc.n	403b62 <memcpy+0xe2>
  403b5e:	880b      	ldrh	r3, [r1, #0]
  403b60:	8003      	strh	r3, [r0, #0]
  403b62:	4660      	mov	r0, ip
  403b64:	4770      	bx	lr
  403b66:	bf00      	nop
  403b68:	2a08      	cmp	r2, #8
  403b6a:	d313      	bcc.n	403b94 <memcpy+0x114>
  403b6c:	078b      	lsls	r3, r1, #30
  403b6e:	d08d      	beq.n	403a8c <memcpy+0xc>
  403b70:	f010 0303 	ands.w	r3, r0, #3
  403b74:	d08a      	beq.n	403a8c <memcpy+0xc>
  403b76:	f1c3 0304 	rsb	r3, r3, #4
  403b7a:	1ad2      	subs	r2, r2, r3
  403b7c:	07db      	lsls	r3, r3, #31
  403b7e:	bf1c      	itt	ne
  403b80:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403b84:	f800 3b01 	strbne.w	r3, [r0], #1
  403b88:	d380      	bcc.n	403a8c <memcpy+0xc>
  403b8a:	f831 3b02 	ldrh.w	r3, [r1], #2
  403b8e:	f820 3b02 	strh.w	r3, [r0], #2
  403b92:	e77b      	b.n	403a8c <memcpy+0xc>
  403b94:	3a04      	subs	r2, #4
  403b96:	d3d9      	bcc.n	403b4c <memcpy+0xcc>
  403b98:	3a01      	subs	r2, #1
  403b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
  403b9e:	f800 3b01 	strb.w	r3, [r0], #1
  403ba2:	d2f9      	bcs.n	403b98 <memcpy+0x118>
  403ba4:	780b      	ldrb	r3, [r1, #0]
  403ba6:	7003      	strb	r3, [r0, #0]
  403ba8:	784b      	ldrb	r3, [r1, #1]
  403baa:	7043      	strb	r3, [r0, #1]
  403bac:	788b      	ldrb	r3, [r1, #2]
  403bae:	7083      	strb	r3, [r0, #2]
  403bb0:	4660      	mov	r0, ip
  403bb2:	4770      	bx	lr

00403bb4 <memmove>:
  403bb4:	4288      	cmp	r0, r1
  403bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bb8:	d90d      	bls.n	403bd6 <memmove+0x22>
  403bba:	188b      	adds	r3, r1, r2
  403bbc:	4298      	cmp	r0, r3
  403bbe:	d20a      	bcs.n	403bd6 <memmove+0x22>
  403bc0:	1884      	adds	r4, r0, r2
  403bc2:	2a00      	cmp	r2, #0
  403bc4:	d051      	beq.n	403c6a <memmove+0xb6>
  403bc6:	4622      	mov	r2, r4
  403bc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  403bcc:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403bd0:	4299      	cmp	r1, r3
  403bd2:	d1f9      	bne.n	403bc8 <memmove+0x14>
  403bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403bd6:	2a0f      	cmp	r2, #15
  403bd8:	d948      	bls.n	403c6c <memmove+0xb8>
  403bda:	ea41 0300 	orr.w	r3, r1, r0
  403bde:	079b      	lsls	r3, r3, #30
  403be0:	d146      	bne.n	403c70 <memmove+0xbc>
  403be2:	f100 0410 	add.w	r4, r0, #16
  403be6:	f101 0310 	add.w	r3, r1, #16
  403bea:	4615      	mov	r5, r2
  403bec:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403bf0:	f844 6c10 	str.w	r6, [r4, #-16]
  403bf4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403bf8:	f844 6c0c 	str.w	r6, [r4, #-12]
  403bfc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403c00:	f844 6c08 	str.w	r6, [r4, #-8]
  403c04:	3d10      	subs	r5, #16
  403c06:	f853 6c04 	ldr.w	r6, [r3, #-4]
  403c0a:	f844 6c04 	str.w	r6, [r4, #-4]
  403c0e:	2d0f      	cmp	r5, #15
  403c10:	f103 0310 	add.w	r3, r3, #16
  403c14:	f104 0410 	add.w	r4, r4, #16
  403c18:	d8e8      	bhi.n	403bec <memmove+0x38>
  403c1a:	f1a2 0310 	sub.w	r3, r2, #16
  403c1e:	f023 030f 	bic.w	r3, r3, #15
  403c22:	f002 0e0f 	and.w	lr, r2, #15
  403c26:	3310      	adds	r3, #16
  403c28:	f1be 0f03 	cmp.w	lr, #3
  403c2c:	4419      	add	r1, r3
  403c2e:	4403      	add	r3, r0
  403c30:	d921      	bls.n	403c76 <memmove+0xc2>
  403c32:	1f1e      	subs	r6, r3, #4
  403c34:	460d      	mov	r5, r1
  403c36:	4674      	mov	r4, lr
  403c38:	3c04      	subs	r4, #4
  403c3a:	f855 7b04 	ldr.w	r7, [r5], #4
  403c3e:	f846 7f04 	str.w	r7, [r6, #4]!
  403c42:	2c03      	cmp	r4, #3
  403c44:	d8f8      	bhi.n	403c38 <memmove+0x84>
  403c46:	f1ae 0404 	sub.w	r4, lr, #4
  403c4a:	f024 0403 	bic.w	r4, r4, #3
  403c4e:	3404      	adds	r4, #4
  403c50:	4421      	add	r1, r4
  403c52:	4423      	add	r3, r4
  403c54:	f002 0203 	and.w	r2, r2, #3
  403c58:	b162      	cbz	r2, 403c74 <memmove+0xc0>
  403c5a:	3b01      	subs	r3, #1
  403c5c:	440a      	add	r2, r1
  403c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403c62:	f803 4f01 	strb.w	r4, [r3, #1]!
  403c66:	428a      	cmp	r2, r1
  403c68:	d1f9      	bne.n	403c5e <memmove+0xaa>
  403c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c6c:	4603      	mov	r3, r0
  403c6e:	e7f3      	b.n	403c58 <memmove+0xa4>
  403c70:	4603      	mov	r3, r0
  403c72:	e7f2      	b.n	403c5a <memmove+0xa6>
  403c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c76:	4672      	mov	r2, lr
  403c78:	e7ee      	b.n	403c58 <memmove+0xa4>
  403c7a:	bf00      	nop

00403c7c <__malloc_lock>:
  403c7c:	4770      	bx	lr
  403c7e:	bf00      	nop

00403c80 <__malloc_unlock>:
  403c80:	4770      	bx	lr
  403c82:	bf00      	nop

00403c84 <_realloc_r>:
  403c84:	2900      	cmp	r1, #0
  403c86:	f000 8095 	beq.w	403db4 <_realloc_r+0x130>
  403c8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c8e:	460d      	mov	r5, r1
  403c90:	4616      	mov	r6, r2
  403c92:	b083      	sub	sp, #12
  403c94:	4680      	mov	r8, r0
  403c96:	f106 070b 	add.w	r7, r6, #11
  403c9a:	f7ff ffef 	bl	403c7c <__malloc_lock>
  403c9e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  403ca2:	2f16      	cmp	r7, #22
  403ca4:	f02e 0403 	bic.w	r4, lr, #3
  403ca8:	f1a5 0908 	sub.w	r9, r5, #8
  403cac:	d83c      	bhi.n	403d28 <_realloc_r+0xa4>
  403cae:	2210      	movs	r2, #16
  403cb0:	4617      	mov	r7, r2
  403cb2:	42be      	cmp	r6, r7
  403cb4:	d83d      	bhi.n	403d32 <_realloc_r+0xae>
  403cb6:	4294      	cmp	r4, r2
  403cb8:	da43      	bge.n	403d42 <_realloc_r+0xbe>
  403cba:	4bc4      	ldr	r3, [pc, #784]	; (403fcc <_realloc_r+0x348>)
  403cbc:	6899      	ldr	r1, [r3, #8]
  403cbe:	eb09 0004 	add.w	r0, r9, r4
  403cc2:	4288      	cmp	r0, r1
  403cc4:	f000 80b4 	beq.w	403e30 <_realloc_r+0x1ac>
  403cc8:	6843      	ldr	r3, [r0, #4]
  403cca:	f023 0101 	bic.w	r1, r3, #1
  403cce:	4401      	add	r1, r0
  403cd0:	6849      	ldr	r1, [r1, #4]
  403cd2:	07c9      	lsls	r1, r1, #31
  403cd4:	d54c      	bpl.n	403d70 <_realloc_r+0xec>
  403cd6:	f01e 0f01 	tst.w	lr, #1
  403cda:	f000 809b 	beq.w	403e14 <_realloc_r+0x190>
  403cde:	4631      	mov	r1, r6
  403ce0:	4640      	mov	r0, r8
  403ce2:	f7ff fbb7 	bl	403454 <_malloc_r>
  403ce6:	4606      	mov	r6, r0
  403ce8:	2800      	cmp	r0, #0
  403cea:	d03a      	beq.n	403d62 <_realloc_r+0xde>
  403cec:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403cf0:	f023 0301 	bic.w	r3, r3, #1
  403cf4:	444b      	add	r3, r9
  403cf6:	f1a0 0208 	sub.w	r2, r0, #8
  403cfa:	429a      	cmp	r2, r3
  403cfc:	f000 8121 	beq.w	403f42 <_realloc_r+0x2be>
  403d00:	1f22      	subs	r2, r4, #4
  403d02:	2a24      	cmp	r2, #36	; 0x24
  403d04:	f200 8107 	bhi.w	403f16 <_realloc_r+0x292>
  403d08:	2a13      	cmp	r2, #19
  403d0a:	f200 80db 	bhi.w	403ec4 <_realloc_r+0x240>
  403d0e:	4603      	mov	r3, r0
  403d10:	462a      	mov	r2, r5
  403d12:	6811      	ldr	r1, [r2, #0]
  403d14:	6019      	str	r1, [r3, #0]
  403d16:	6851      	ldr	r1, [r2, #4]
  403d18:	6059      	str	r1, [r3, #4]
  403d1a:	6892      	ldr	r2, [r2, #8]
  403d1c:	609a      	str	r2, [r3, #8]
  403d1e:	4629      	mov	r1, r5
  403d20:	4640      	mov	r0, r8
  403d22:	f7ff f883 	bl	402e2c <_free_r>
  403d26:	e01c      	b.n	403d62 <_realloc_r+0xde>
  403d28:	f027 0707 	bic.w	r7, r7, #7
  403d2c:	2f00      	cmp	r7, #0
  403d2e:	463a      	mov	r2, r7
  403d30:	dabf      	bge.n	403cb2 <_realloc_r+0x2e>
  403d32:	2600      	movs	r6, #0
  403d34:	230c      	movs	r3, #12
  403d36:	4630      	mov	r0, r6
  403d38:	f8c8 3000 	str.w	r3, [r8]
  403d3c:	b003      	add	sp, #12
  403d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d42:	462e      	mov	r6, r5
  403d44:	1be3      	subs	r3, r4, r7
  403d46:	2b0f      	cmp	r3, #15
  403d48:	d81e      	bhi.n	403d88 <_realloc_r+0x104>
  403d4a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403d4e:	f003 0301 	and.w	r3, r3, #1
  403d52:	4323      	orrs	r3, r4
  403d54:	444c      	add	r4, r9
  403d56:	f8c9 3004 	str.w	r3, [r9, #4]
  403d5a:	6863      	ldr	r3, [r4, #4]
  403d5c:	f043 0301 	orr.w	r3, r3, #1
  403d60:	6063      	str	r3, [r4, #4]
  403d62:	4640      	mov	r0, r8
  403d64:	f7ff ff8c 	bl	403c80 <__malloc_unlock>
  403d68:	4630      	mov	r0, r6
  403d6a:	b003      	add	sp, #12
  403d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d70:	f023 0303 	bic.w	r3, r3, #3
  403d74:	18e1      	adds	r1, r4, r3
  403d76:	4291      	cmp	r1, r2
  403d78:	db1f      	blt.n	403dba <_realloc_r+0x136>
  403d7a:	68c3      	ldr	r3, [r0, #12]
  403d7c:	6882      	ldr	r2, [r0, #8]
  403d7e:	462e      	mov	r6, r5
  403d80:	60d3      	str	r3, [r2, #12]
  403d82:	460c      	mov	r4, r1
  403d84:	609a      	str	r2, [r3, #8]
  403d86:	e7dd      	b.n	403d44 <_realloc_r+0xc0>
  403d88:	f8d9 2004 	ldr.w	r2, [r9, #4]
  403d8c:	eb09 0107 	add.w	r1, r9, r7
  403d90:	f002 0201 	and.w	r2, r2, #1
  403d94:	444c      	add	r4, r9
  403d96:	f043 0301 	orr.w	r3, r3, #1
  403d9a:	4317      	orrs	r7, r2
  403d9c:	f8c9 7004 	str.w	r7, [r9, #4]
  403da0:	604b      	str	r3, [r1, #4]
  403da2:	6863      	ldr	r3, [r4, #4]
  403da4:	f043 0301 	orr.w	r3, r3, #1
  403da8:	3108      	adds	r1, #8
  403daa:	6063      	str	r3, [r4, #4]
  403dac:	4640      	mov	r0, r8
  403dae:	f7ff f83d 	bl	402e2c <_free_r>
  403db2:	e7d6      	b.n	403d62 <_realloc_r+0xde>
  403db4:	4611      	mov	r1, r2
  403db6:	f7ff bb4d 	b.w	403454 <_malloc_r>
  403dba:	f01e 0f01 	tst.w	lr, #1
  403dbe:	d18e      	bne.n	403cde <_realloc_r+0x5a>
  403dc0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403dc4:	eba9 0a01 	sub.w	sl, r9, r1
  403dc8:	f8da 1004 	ldr.w	r1, [sl, #4]
  403dcc:	f021 0103 	bic.w	r1, r1, #3
  403dd0:	440b      	add	r3, r1
  403dd2:	4423      	add	r3, r4
  403dd4:	4293      	cmp	r3, r2
  403dd6:	db25      	blt.n	403e24 <_realloc_r+0x1a0>
  403dd8:	68c2      	ldr	r2, [r0, #12]
  403dda:	6881      	ldr	r1, [r0, #8]
  403ddc:	4656      	mov	r6, sl
  403dde:	60ca      	str	r2, [r1, #12]
  403de0:	6091      	str	r1, [r2, #8]
  403de2:	f8da 100c 	ldr.w	r1, [sl, #12]
  403de6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403dea:	1f22      	subs	r2, r4, #4
  403dec:	2a24      	cmp	r2, #36	; 0x24
  403dee:	60c1      	str	r1, [r0, #12]
  403df0:	6088      	str	r0, [r1, #8]
  403df2:	f200 8094 	bhi.w	403f1e <_realloc_r+0x29a>
  403df6:	2a13      	cmp	r2, #19
  403df8:	d96f      	bls.n	403eda <_realloc_r+0x256>
  403dfa:	6829      	ldr	r1, [r5, #0]
  403dfc:	f8ca 1008 	str.w	r1, [sl, #8]
  403e00:	6869      	ldr	r1, [r5, #4]
  403e02:	f8ca 100c 	str.w	r1, [sl, #12]
  403e06:	2a1b      	cmp	r2, #27
  403e08:	f200 80a2 	bhi.w	403f50 <_realloc_r+0x2cc>
  403e0c:	3508      	adds	r5, #8
  403e0e:	f10a 0210 	add.w	r2, sl, #16
  403e12:	e063      	b.n	403edc <_realloc_r+0x258>
  403e14:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403e18:	eba9 0a03 	sub.w	sl, r9, r3
  403e1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403e20:	f021 0103 	bic.w	r1, r1, #3
  403e24:	1863      	adds	r3, r4, r1
  403e26:	4293      	cmp	r3, r2
  403e28:	f6ff af59 	blt.w	403cde <_realloc_r+0x5a>
  403e2c:	4656      	mov	r6, sl
  403e2e:	e7d8      	b.n	403de2 <_realloc_r+0x15e>
  403e30:	6841      	ldr	r1, [r0, #4]
  403e32:	f021 0b03 	bic.w	fp, r1, #3
  403e36:	44a3      	add	fp, r4
  403e38:	f107 0010 	add.w	r0, r7, #16
  403e3c:	4583      	cmp	fp, r0
  403e3e:	da56      	bge.n	403eee <_realloc_r+0x26a>
  403e40:	f01e 0f01 	tst.w	lr, #1
  403e44:	f47f af4b 	bne.w	403cde <_realloc_r+0x5a>
  403e48:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403e4c:	eba9 0a01 	sub.w	sl, r9, r1
  403e50:	f8da 1004 	ldr.w	r1, [sl, #4]
  403e54:	f021 0103 	bic.w	r1, r1, #3
  403e58:	448b      	add	fp, r1
  403e5a:	4558      	cmp	r0, fp
  403e5c:	dce2      	bgt.n	403e24 <_realloc_r+0x1a0>
  403e5e:	4656      	mov	r6, sl
  403e60:	f8da 100c 	ldr.w	r1, [sl, #12]
  403e64:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403e68:	1f22      	subs	r2, r4, #4
  403e6a:	2a24      	cmp	r2, #36	; 0x24
  403e6c:	60c1      	str	r1, [r0, #12]
  403e6e:	6088      	str	r0, [r1, #8]
  403e70:	f200 808f 	bhi.w	403f92 <_realloc_r+0x30e>
  403e74:	2a13      	cmp	r2, #19
  403e76:	f240 808a 	bls.w	403f8e <_realloc_r+0x30a>
  403e7a:	6829      	ldr	r1, [r5, #0]
  403e7c:	f8ca 1008 	str.w	r1, [sl, #8]
  403e80:	6869      	ldr	r1, [r5, #4]
  403e82:	f8ca 100c 	str.w	r1, [sl, #12]
  403e86:	2a1b      	cmp	r2, #27
  403e88:	f200 808a 	bhi.w	403fa0 <_realloc_r+0x31c>
  403e8c:	3508      	adds	r5, #8
  403e8e:	f10a 0210 	add.w	r2, sl, #16
  403e92:	6829      	ldr	r1, [r5, #0]
  403e94:	6011      	str	r1, [r2, #0]
  403e96:	6869      	ldr	r1, [r5, #4]
  403e98:	6051      	str	r1, [r2, #4]
  403e9a:	68a9      	ldr	r1, [r5, #8]
  403e9c:	6091      	str	r1, [r2, #8]
  403e9e:	eb0a 0107 	add.w	r1, sl, r7
  403ea2:	ebab 0207 	sub.w	r2, fp, r7
  403ea6:	f042 0201 	orr.w	r2, r2, #1
  403eaa:	6099      	str	r1, [r3, #8]
  403eac:	604a      	str	r2, [r1, #4]
  403eae:	f8da 3004 	ldr.w	r3, [sl, #4]
  403eb2:	f003 0301 	and.w	r3, r3, #1
  403eb6:	431f      	orrs	r7, r3
  403eb8:	4640      	mov	r0, r8
  403eba:	f8ca 7004 	str.w	r7, [sl, #4]
  403ebe:	f7ff fedf 	bl	403c80 <__malloc_unlock>
  403ec2:	e751      	b.n	403d68 <_realloc_r+0xe4>
  403ec4:	682b      	ldr	r3, [r5, #0]
  403ec6:	6003      	str	r3, [r0, #0]
  403ec8:	686b      	ldr	r3, [r5, #4]
  403eca:	6043      	str	r3, [r0, #4]
  403ecc:	2a1b      	cmp	r2, #27
  403ece:	d82d      	bhi.n	403f2c <_realloc_r+0x2a8>
  403ed0:	f100 0308 	add.w	r3, r0, #8
  403ed4:	f105 0208 	add.w	r2, r5, #8
  403ed8:	e71b      	b.n	403d12 <_realloc_r+0x8e>
  403eda:	4632      	mov	r2, r6
  403edc:	6829      	ldr	r1, [r5, #0]
  403ede:	6011      	str	r1, [r2, #0]
  403ee0:	6869      	ldr	r1, [r5, #4]
  403ee2:	6051      	str	r1, [r2, #4]
  403ee4:	68a9      	ldr	r1, [r5, #8]
  403ee6:	6091      	str	r1, [r2, #8]
  403ee8:	461c      	mov	r4, r3
  403eea:	46d1      	mov	r9, sl
  403eec:	e72a      	b.n	403d44 <_realloc_r+0xc0>
  403eee:	eb09 0107 	add.w	r1, r9, r7
  403ef2:	ebab 0b07 	sub.w	fp, fp, r7
  403ef6:	f04b 0201 	orr.w	r2, fp, #1
  403efa:	6099      	str	r1, [r3, #8]
  403efc:	604a      	str	r2, [r1, #4]
  403efe:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403f02:	f003 0301 	and.w	r3, r3, #1
  403f06:	431f      	orrs	r7, r3
  403f08:	4640      	mov	r0, r8
  403f0a:	f845 7c04 	str.w	r7, [r5, #-4]
  403f0e:	f7ff feb7 	bl	403c80 <__malloc_unlock>
  403f12:	462e      	mov	r6, r5
  403f14:	e728      	b.n	403d68 <_realloc_r+0xe4>
  403f16:	4629      	mov	r1, r5
  403f18:	f7ff fe4c 	bl	403bb4 <memmove>
  403f1c:	e6ff      	b.n	403d1e <_realloc_r+0x9a>
  403f1e:	4629      	mov	r1, r5
  403f20:	4630      	mov	r0, r6
  403f22:	461c      	mov	r4, r3
  403f24:	46d1      	mov	r9, sl
  403f26:	f7ff fe45 	bl	403bb4 <memmove>
  403f2a:	e70b      	b.n	403d44 <_realloc_r+0xc0>
  403f2c:	68ab      	ldr	r3, [r5, #8]
  403f2e:	6083      	str	r3, [r0, #8]
  403f30:	68eb      	ldr	r3, [r5, #12]
  403f32:	60c3      	str	r3, [r0, #12]
  403f34:	2a24      	cmp	r2, #36	; 0x24
  403f36:	d017      	beq.n	403f68 <_realloc_r+0x2e4>
  403f38:	f100 0310 	add.w	r3, r0, #16
  403f3c:	f105 0210 	add.w	r2, r5, #16
  403f40:	e6e7      	b.n	403d12 <_realloc_r+0x8e>
  403f42:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403f46:	f023 0303 	bic.w	r3, r3, #3
  403f4a:	441c      	add	r4, r3
  403f4c:	462e      	mov	r6, r5
  403f4e:	e6f9      	b.n	403d44 <_realloc_r+0xc0>
  403f50:	68a9      	ldr	r1, [r5, #8]
  403f52:	f8ca 1010 	str.w	r1, [sl, #16]
  403f56:	68e9      	ldr	r1, [r5, #12]
  403f58:	f8ca 1014 	str.w	r1, [sl, #20]
  403f5c:	2a24      	cmp	r2, #36	; 0x24
  403f5e:	d00c      	beq.n	403f7a <_realloc_r+0x2f6>
  403f60:	3510      	adds	r5, #16
  403f62:	f10a 0218 	add.w	r2, sl, #24
  403f66:	e7b9      	b.n	403edc <_realloc_r+0x258>
  403f68:	692b      	ldr	r3, [r5, #16]
  403f6a:	6103      	str	r3, [r0, #16]
  403f6c:	696b      	ldr	r3, [r5, #20]
  403f6e:	6143      	str	r3, [r0, #20]
  403f70:	f105 0218 	add.w	r2, r5, #24
  403f74:	f100 0318 	add.w	r3, r0, #24
  403f78:	e6cb      	b.n	403d12 <_realloc_r+0x8e>
  403f7a:	692a      	ldr	r2, [r5, #16]
  403f7c:	f8ca 2018 	str.w	r2, [sl, #24]
  403f80:	696a      	ldr	r2, [r5, #20]
  403f82:	f8ca 201c 	str.w	r2, [sl, #28]
  403f86:	3518      	adds	r5, #24
  403f88:	f10a 0220 	add.w	r2, sl, #32
  403f8c:	e7a6      	b.n	403edc <_realloc_r+0x258>
  403f8e:	4632      	mov	r2, r6
  403f90:	e77f      	b.n	403e92 <_realloc_r+0x20e>
  403f92:	4629      	mov	r1, r5
  403f94:	4630      	mov	r0, r6
  403f96:	9301      	str	r3, [sp, #4]
  403f98:	f7ff fe0c 	bl	403bb4 <memmove>
  403f9c:	9b01      	ldr	r3, [sp, #4]
  403f9e:	e77e      	b.n	403e9e <_realloc_r+0x21a>
  403fa0:	68a9      	ldr	r1, [r5, #8]
  403fa2:	f8ca 1010 	str.w	r1, [sl, #16]
  403fa6:	68e9      	ldr	r1, [r5, #12]
  403fa8:	f8ca 1014 	str.w	r1, [sl, #20]
  403fac:	2a24      	cmp	r2, #36	; 0x24
  403fae:	d003      	beq.n	403fb8 <_realloc_r+0x334>
  403fb0:	3510      	adds	r5, #16
  403fb2:	f10a 0218 	add.w	r2, sl, #24
  403fb6:	e76c      	b.n	403e92 <_realloc_r+0x20e>
  403fb8:	692a      	ldr	r2, [r5, #16]
  403fba:	f8ca 2018 	str.w	r2, [sl, #24]
  403fbe:	696a      	ldr	r2, [r5, #20]
  403fc0:	f8ca 201c 	str.w	r2, [sl, #28]
  403fc4:	3518      	adds	r5, #24
  403fc6:	f10a 0220 	add.w	r2, sl, #32
  403fca:	e762      	b.n	403e92 <_realloc_r+0x20e>
  403fcc:	200005b4 	.word	0x200005b4

00403fd0 <_sbrk_r>:
  403fd0:	b538      	push	{r3, r4, r5, lr}
  403fd2:	4c07      	ldr	r4, [pc, #28]	; (403ff0 <_sbrk_r+0x20>)
  403fd4:	2300      	movs	r3, #0
  403fd6:	4605      	mov	r5, r0
  403fd8:	4608      	mov	r0, r1
  403fda:	6023      	str	r3, [r4, #0]
  403fdc:	f7fc fef2 	bl	400dc4 <_sbrk>
  403fe0:	1c43      	adds	r3, r0, #1
  403fe2:	d000      	beq.n	403fe6 <_sbrk_r+0x16>
  403fe4:	bd38      	pop	{r3, r4, r5, pc}
  403fe6:	6823      	ldr	r3, [r4, #0]
  403fe8:	2b00      	cmp	r3, #0
  403fea:	d0fb      	beq.n	403fe4 <_sbrk_r+0x14>
  403fec:	602b      	str	r3, [r5, #0]
  403fee:	bd38      	pop	{r3, r4, r5, pc}
  403ff0:	2000150c 	.word	0x2000150c

00403ff4 <__sread>:
  403ff4:	b510      	push	{r4, lr}
  403ff6:	460c      	mov	r4, r1
  403ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403ffc:	f000 fa34 	bl	404468 <_read_r>
  404000:	2800      	cmp	r0, #0
  404002:	db03      	blt.n	40400c <__sread+0x18>
  404004:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404006:	4403      	add	r3, r0
  404008:	6523      	str	r3, [r4, #80]	; 0x50
  40400a:	bd10      	pop	{r4, pc}
  40400c:	89a3      	ldrh	r3, [r4, #12]
  40400e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404012:	81a3      	strh	r3, [r4, #12]
  404014:	bd10      	pop	{r4, pc}
  404016:	bf00      	nop

00404018 <__swrite>:
  404018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40401c:	4616      	mov	r6, r2
  40401e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404022:	461f      	mov	r7, r3
  404024:	05d3      	lsls	r3, r2, #23
  404026:	460c      	mov	r4, r1
  404028:	4605      	mov	r5, r0
  40402a:	d507      	bpl.n	40403c <__swrite+0x24>
  40402c:	2200      	movs	r2, #0
  40402e:	2302      	movs	r3, #2
  404030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404034:	f000 fa02 	bl	40443c <_lseek_r>
  404038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40403c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404040:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404044:	81a2      	strh	r2, [r4, #12]
  404046:	463b      	mov	r3, r7
  404048:	4632      	mov	r2, r6
  40404a:	4628      	mov	r0, r5
  40404c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404050:	f000 b914 	b.w	40427c <_write_r>

00404054 <__sseek>:
  404054:	b510      	push	{r4, lr}
  404056:	460c      	mov	r4, r1
  404058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40405c:	f000 f9ee 	bl	40443c <_lseek_r>
  404060:	89a3      	ldrh	r3, [r4, #12]
  404062:	1c42      	adds	r2, r0, #1
  404064:	bf0e      	itee	eq
  404066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40406a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40406e:	6520      	strne	r0, [r4, #80]	; 0x50
  404070:	81a3      	strh	r3, [r4, #12]
  404072:	bd10      	pop	{r4, pc}

00404074 <__sclose>:
  404074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404078:	f000 b968 	b.w	40434c <_close_r>
  40407c:	0000      	movs	r0, r0
	...

00404080 <strlen>:
  404080:	f890 f000 	pld	[r0]
  404084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404088:	f020 0107 	bic.w	r1, r0, #7
  40408c:	f06f 0c00 	mvn.w	ip, #0
  404090:	f010 0407 	ands.w	r4, r0, #7
  404094:	f891 f020 	pld	[r1, #32]
  404098:	f040 8049 	bne.w	40412e <strlen+0xae>
  40409c:	f04f 0400 	mov.w	r4, #0
  4040a0:	f06f 0007 	mvn.w	r0, #7
  4040a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4040a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4040ac:	f100 0008 	add.w	r0, r0, #8
  4040b0:	fa82 f24c 	uadd8	r2, r2, ip
  4040b4:	faa4 f28c 	sel	r2, r4, ip
  4040b8:	fa83 f34c 	uadd8	r3, r3, ip
  4040bc:	faa2 f38c 	sel	r3, r2, ip
  4040c0:	bb4b      	cbnz	r3, 404116 <strlen+0x96>
  4040c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4040c6:	fa82 f24c 	uadd8	r2, r2, ip
  4040ca:	f100 0008 	add.w	r0, r0, #8
  4040ce:	faa4 f28c 	sel	r2, r4, ip
  4040d2:	fa83 f34c 	uadd8	r3, r3, ip
  4040d6:	faa2 f38c 	sel	r3, r2, ip
  4040da:	b9e3      	cbnz	r3, 404116 <strlen+0x96>
  4040dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4040e0:	fa82 f24c 	uadd8	r2, r2, ip
  4040e4:	f100 0008 	add.w	r0, r0, #8
  4040e8:	faa4 f28c 	sel	r2, r4, ip
  4040ec:	fa83 f34c 	uadd8	r3, r3, ip
  4040f0:	faa2 f38c 	sel	r3, r2, ip
  4040f4:	b97b      	cbnz	r3, 404116 <strlen+0x96>
  4040f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4040fa:	f101 0120 	add.w	r1, r1, #32
  4040fe:	fa82 f24c 	uadd8	r2, r2, ip
  404102:	f100 0008 	add.w	r0, r0, #8
  404106:	faa4 f28c 	sel	r2, r4, ip
  40410a:	fa83 f34c 	uadd8	r3, r3, ip
  40410e:	faa2 f38c 	sel	r3, r2, ip
  404112:	2b00      	cmp	r3, #0
  404114:	d0c6      	beq.n	4040a4 <strlen+0x24>
  404116:	2a00      	cmp	r2, #0
  404118:	bf04      	itt	eq
  40411a:	3004      	addeq	r0, #4
  40411c:	461a      	moveq	r2, r3
  40411e:	ba12      	rev	r2, r2
  404120:	fab2 f282 	clz	r2, r2
  404124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40412c:	4770      	bx	lr
  40412e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404132:	f004 0503 	and.w	r5, r4, #3
  404136:	f1c4 0000 	rsb	r0, r4, #0
  40413a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40413e:	f014 0f04 	tst.w	r4, #4
  404142:	f891 f040 	pld	[r1, #64]	; 0x40
  404146:	fa0c f505 	lsl.w	r5, ip, r5
  40414a:	ea62 0205 	orn	r2, r2, r5
  40414e:	bf1c      	itt	ne
  404150:	ea63 0305 	ornne	r3, r3, r5
  404154:	4662      	movne	r2, ip
  404156:	f04f 0400 	mov.w	r4, #0
  40415a:	e7a9      	b.n	4040b0 <strlen+0x30>

0040415c <__swbuf_r>:
  40415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40415e:	460d      	mov	r5, r1
  404160:	4614      	mov	r4, r2
  404162:	4606      	mov	r6, r0
  404164:	b110      	cbz	r0, 40416c <__swbuf_r+0x10>
  404166:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404168:	2b00      	cmp	r3, #0
  40416a:	d04b      	beq.n	404204 <__swbuf_r+0xa8>
  40416c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404170:	69a3      	ldr	r3, [r4, #24]
  404172:	60a3      	str	r3, [r4, #8]
  404174:	b291      	uxth	r1, r2
  404176:	0708      	lsls	r0, r1, #28
  404178:	d539      	bpl.n	4041ee <__swbuf_r+0x92>
  40417a:	6923      	ldr	r3, [r4, #16]
  40417c:	2b00      	cmp	r3, #0
  40417e:	d036      	beq.n	4041ee <__swbuf_r+0x92>
  404180:	b2ed      	uxtb	r5, r5
  404182:	0489      	lsls	r1, r1, #18
  404184:	462f      	mov	r7, r5
  404186:	d515      	bpl.n	4041b4 <__swbuf_r+0x58>
  404188:	6822      	ldr	r2, [r4, #0]
  40418a:	6961      	ldr	r1, [r4, #20]
  40418c:	1ad3      	subs	r3, r2, r3
  40418e:	428b      	cmp	r3, r1
  404190:	da1c      	bge.n	4041cc <__swbuf_r+0x70>
  404192:	3301      	adds	r3, #1
  404194:	68a1      	ldr	r1, [r4, #8]
  404196:	1c50      	adds	r0, r2, #1
  404198:	3901      	subs	r1, #1
  40419a:	60a1      	str	r1, [r4, #8]
  40419c:	6020      	str	r0, [r4, #0]
  40419e:	7015      	strb	r5, [r2, #0]
  4041a0:	6962      	ldr	r2, [r4, #20]
  4041a2:	429a      	cmp	r2, r3
  4041a4:	d01a      	beq.n	4041dc <__swbuf_r+0x80>
  4041a6:	89a3      	ldrh	r3, [r4, #12]
  4041a8:	07db      	lsls	r3, r3, #31
  4041aa:	d501      	bpl.n	4041b0 <__swbuf_r+0x54>
  4041ac:	2d0a      	cmp	r5, #10
  4041ae:	d015      	beq.n	4041dc <__swbuf_r+0x80>
  4041b0:	4638      	mov	r0, r7
  4041b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4041b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4041ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4041be:	81a2      	strh	r2, [r4, #12]
  4041c0:	6822      	ldr	r2, [r4, #0]
  4041c2:	6661      	str	r1, [r4, #100]	; 0x64
  4041c4:	6961      	ldr	r1, [r4, #20]
  4041c6:	1ad3      	subs	r3, r2, r3
  4041c8:	428b      	cmp	r3, r1
  4041ca:	dbe2      	blt.n	404192 <__swbuf_r+0x36>
  4041cc:	4621      	mov	r1, r4
  4041ce:	4630      	mov	r0, r6
  4041d0:	f7fe fcc2 	bl	402b58 <_fflush_r>
  4041d4:	b940      	cbnz	r0, 4041e8 <__swbuf_r+0x8c>
  4041d6:	6822      	ldr	r2, [r4, #0]
  4041d8:	2301      	movs	r3, #1
  4041da:	e7db      	b.n	404194 <__swbuf_r+0x38>
  4041dc:	4621      	mov	r1, r4
  4041de:	4630      	mov	r0, r6
  4041e0:	f7fe fcba 	bl	402b58 <_fflush_r>
  4041e4:	2800      	cmp	r0, #0
  4041e6:	d0e3      	beq.n	4041b0 <__swbuf_r+0x54>
  4041e8:	f04f 37ff 	mov.w	r7, #4294967295
  4041ec:	e7e0      	b.n	4041b0 <__swbuf_r+0x54>
  4041ee:	4621      	mov	r1, r4
  4041f0:	4630      	mov	r0, r6
  4041f2:	f7fe fb9d 	bl	402930 <__swsetup_r>
  4041f6:	2800      	cmp	r0, #0
  4041f8:	d1f6      	bne.n	4041e8 <__swbuf_r+0x8c>
  4041fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4041fe:	6923      	ldr	r3, [r4, #16]
  404200:	b291      	uxth	r1, r2
  404202:	e7bd      	b.n	404180 <__swbuf_r+0x24>
  404204:	f7fe fd3c 	bl	402c80 <__sinit>
  404208:	e7b0      	b.n	40416c <__swbuf_r+0x10>
  40420a:	bf00      	nop

0040420c <_wcrtomb_r>:
  40420c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40420e:	4606      	mov	r6, r0
  404210:	b085      	sub	sp, #20
  404212:	461f      	mov	r7, r3
  404214:	b189      	cbz	r1, 40423a <_wcrtomb_r+0x2e>
  404216:	4c10      	ldr	r4, [pc, #64]	; (404258 <_wcrtomb_r+0x4c>)
  404218:	4d10      	ldr	r5, [pc, #64]	; (40425c <_wcrtomb_r+0x50>)
  40421a:	6824      	ldr	r4, [r4, #0]
  40421c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40421e:	2c00      	cmp	r4, #0
  404220:	bf08      	it	eq
  404222:	462c      	moveq	r4, r5
  404224:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404228:	47a0      	blx	r4
  40422a:	1c43      	adds	r3, r0, #1
  40422c:	d103      	bne.n	404236 <_wcrtomb_r+0x2a>
  40422e:	2200      	movs	r2, #0
  404230:	238a      	movs	r3, #138	; 0x8a
  404232:	603a      	str	r2, [r7, #0]
  404234:	6033      	str	r3, [r6, #0]
  404236:	b005      	add	sp, #20
  404238:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40423a:	460c      	mov	r4, r1
  40423c:	4906      	ldr	r1, [pc, #24]	; (404258 <_wcrtomb_r+0x4c>)
  40423e:	4a07      	ldr	r2, [pc, #28]	; (40425c <_wcrtomb_r+0x50>)
  404240:	6809      	ldr	r1, [r1, #0]
  404242:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404244:	2900      	cmp	r1, #0
  404246:	bf08      	it	eq
  404248:	4611      	moveq	r1, r2
  40424a:	4622      	mov	r2, r4
  40424c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404250:	a901      	add	r1, sp, #4
  404252:	47a0      	blx	r4
  404254:	e7e9      	b.n	40422a <_wcrtomb_r+0x1e>
  404256:	bf00      	nop
  404258:	20000018 	.word	0x20000018
  40425c:	20000448 	.word	0x20000448

00404260 <__ascii_wctomb>:
  404260:	b121      	cbz	r1, 40426c <__ascii_wctomb+0xc>
  404262:	2aff      	cmp	r2, #255	; 0xff
  404264:	d804      	bhi.n	404270 <__ascii_wctomb+0x10>
  404266:	700a      	strb	r2, [r1, #0]
  404268:	2001      	movs	r0, #1
  40426a:	4770      	bx	lr
  40426c:	4608      	mov	r0, r1
  40426e:	4770      	bx	lr
  404270:	238a      	movs	r3, #138	; 0x8a
  404272:	6003      	str	r3, [r0, #0]
  404274:	f04f 30ff 	mov.w	r0, #4294967295
  404278:	4770      	bx	lr
  40427a:	bf00      	nop

0040427c <_write_r>:
  40427c:	b570      	push	{r4, r5, r6, lr}
  40427e:	460d      	mov	r5, r1
  404280:	4c08      	ldr	r4, [pc, #32]	; (4042a4 <_write_r+0x28>)
  404282:	4611      	mov	r1, r2
  404284:	4606      	mov	r6, r0
  404286:	461a      	mov	r2, r3
  404288:	4628      	mov	r0, r5
  40428a:	2300      	movs	r3, #0
  40428c:	6023      	str	r3, [r4, #0]
  40428e:	f7fb ffbb 	bl	400208 <_write>
  404292:	1c43      	adds	r3, r0, #1
  404294:	d000      	beq.n	404298 <_write_r+0x1c>
  404296:	bd70      	pop	{r4, r5, r6, pc}
  404298:	6823      	ldr	r3, [r4, #0]
  40429a:	2b00      	cmp	r3, #0
  40429c:	d0fb      	beq.n	404296 <_write_r+0x1a>
  40429e:	6033      	str	r3, [r6, #0]
  4042a0:	bd70      	pop	{r4, r5, r6, pc}
  4042a2:	bf00      	nop
  4042a4:	2000150c 	.word	0x2000150c

004042a8 <__register_exitproc>:
  4042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4042ac:	4c25      	ldr	r4, [pc, #148]	; (404344 <__register_exitproc+0x9c>)
  4042ae:	6825      	ldr	r5, [r4, #0]
  4042b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4042b4:	4606      	mov	r6, r0
  4042b6:	4688      	mov	r8, r1
  4042b8:	4692      	mov	sl, r2
  4042ba:	4699      	mov	r9, r3
  4042bc:	b3c4      	cbz	r4, 404330 <__register_exitproc+0x88>
  4042be:	6860      	ldr	r0, [r4, #4]
  4042c0:	281f      	cmp	r0, #31
  4042c2:	dc17      	bgt.n	4042f4 <__register_exitproc+0x4c>
  4042c4:	1c43      	adds	r3, r0, #1
  4042c6:	b176      	cbz	r6, 4042e6 <__register_exitproc+0x3e>
  4042c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4042cc:	2201      	movs	r2, #1
  4042ce:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4042d2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4042d6:	4082      	lsls	r2, r0
  4042d8:	4311      	orrs	r1, r2
  4042da:	2e02      	cmp	r6, #2
  4042dc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4042e0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4042e4:	d01e      	beq.n	404324 <__register_exitproc+0x7c>
  4042e6:	3002      	adds	r0, #2
  4042e8:	6063      	str	r3, [r4, #4]
  4042ea:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4042ee:	2000      	movs	r0, #0
  4042f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4042f4:	4b14      	ldr	r3, [pc, #80]	; (404348 <__register_exitproc+0xa0>)
  4042f6:	b303      	cbz	r3, 40433a <__register_exitproc+0x92>
  4042f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4042fc:	f7ff f8a2 	bl	403444 <malloc>
  404300:	4604      	mov	r4, r0
  404302:	b1d0      	cbz	r0, 40433a <__register_exitproc+0x92>
  404304:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404308:	2700      	movs	r7, #0
  40430a:	e880 0088 	stmia.w	r0, {r3, r7}
  40430e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404312:	4638      	mov	r0, r7
  404314:	2301      	movs	r3, #1
  404316:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40431a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40431e:	2e00      	cmp	r6, #0
  404320:	d0e1      	beq.n	4042e6 <__register_exitproc+0x3e>
  404322:	e7d1      	b.n	4042c8 <__register_exitproc+0x20>
  404324:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404328:	430a      	orrs	r2, r1
  40432a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40432e:	e7da      	b.n	4042e6 <__register_exitproc+0x3e>
  404330:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404334:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404338:	e7c1      	b.n	4042be <__register_exitproc+0x16>
  40433a:	f04f 30ff 	mov.w	r0, #4294967295
  40433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404342:	bf00      	nop
  404344:	004047dc 	.word	0x004047dc
  404348:	00403445 	.word	0x00403445

0040434c <_close_r>:
  40434c:	b538      	push	{r3, r4, r5, lr}
  40434e:	4c07      	ldr	r4, [pc, #28]	; (40436c <_close_r+0x20>)
  404350:	2300      	movs	r3, #0
  404352:	4605      	mov	r5, r0
  404354:	4608      	mov	r0, r1
  404356:	6023      	str	r3, [r4, #0]
  404358:	f7fc fd50 	bl	400dfc <_close>
  40435c:	1c43      	adds	r3, r0, #1
  40435e:	d000      	beq.n	404362 <_close_r+0x16>
  404360:	bd38      	pop	{r3, r4, r5, pc}
  404362:	6823      	ldr	r3, [r4, #0]
  404364:	2b00      	cmp	r3, #0
  404366:	d0fb      	beq.n	404360 <_close_r+0x14>
  404368:	602b      	str	r3, [r5, #0]
  40436a:	bd38      	pop	{r3, r4, r5, pc}
  40436c:	2000150c 	.word	0x2000150c

00404370 <_fclose_r>:
  404370:	b570      	push	{r4, r5, r6, lr}
  404372:	b139      	cbz	r1, 404384 <_fclose_r+0x14>
  404374:	4605      	mov	r5, r0
  404376:	460c      	mov	r4, r1
  404378:	b108      	cbz	r0, 40437e <_fclose_r+0xe>
  40437a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40437c:	b383      	cbz	r3, 4043e0 <_fclose_r+0x70>
  40437e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404382:	b913      	cbnz	r3, 40438a <_fclose_r+0x1a>
  404384:	2600      	movs	r6, #0
  404386:	4630      	mov	r0, r6
  404388:	bd70      	pop	{r4, r5, r6, pc}
  40438a:	4621      	mov	r1, r4
  40438c:	4628      	mov	r0, r5
  40438e:	f7fe fb43 	bl	402a18 <__sflush_r>
  404392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404394:	4606      	mov	r6, r0
  404396:	b133      	cbz	r3, 4043a6 <_fclose_r+0x36>
  404398:	69e1      	ldr	r1, [r4, #28]
  40439a:	4628      	mov	r0, r5
  40439c:	4798      	blx	r3
  40439e:	2800      	cmp	r0, #0
  4043a0:	bfb8      	it	lt
  4043a2:	f04f 36ff 	movlt.w	r6, #4294967295
  4043a6:	89a3      	ldrh	r3, [r4, #12]
  4043a8:	061b      	lsls	r3, r3, #24
  4043aa:	d41c      	bmi.n	4043e6 <_fclose_r+0x76>
  4043ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4043ae:	b141      	cbz	r1, 4043c2 <_fclose_r+0x52>
  4043b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4043b4:	4299      	cmp	r1, r3
  4043b6:	d002      	beq.n	4043be <_fclose_r+0x4e>
  4043b8:	4628      	mov	r0, r5
  4043ba:	f7fe fd37 	bl	402e2c <_free_r>
  4043be:	2300      	movs	r3, #0
  4043c0:	6323      	str	r3, [r4, #48]	; 0x30
  4043c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4043c4:	b121      	cbz	r1, 4043d0 <_fclose_r+0x60>
  4043c6:	4628      	mov	r0, r5
  4043c8:	f7fe fd30 	bl	402e2c <_free_r>
  4043cc:	2300      	movs	r3, #0
  4043ce:	6463      	str	r3, [r4, #68]	; 0x44
  4043d0:	f7fe fc5c 	bl	402c8c <__sfp_lock_acquire>
  4043d4:	2300      	movs	r3, #0
  4043d6:	81a3      	strh	r3, [r4, #12]
  4043d8:	f7fe fc5a 	bl	402c90 <__sfp_lock_release>
  4043dc:	4630      	mov	r0, r6
  4043de:	bd70      	pop	{r4, r5, r6, pc}
  4043e0:	f7fe fc4e 	bl	402c80 <__sinit>
  4043e4:	e7cb      	b.n	40437e <_fclose_r+0xe>
  4043e6:	6921      	ldr	r1, [r4, #16]
  4043e8:	4628      	mov	r0, r5
  4043ea:	f7fe fd1f 	bl	402e2c <_free_r>
  4043ee:	e7dd      	b.n	4043ac <_fclose_r+0x3c>

004043f0 <_fstat_r>:
  4043f0:	b538      	push	{r3, r4, r5, lr}
  4043f2:	460b      	mov	r3, r1
  4043f4:	4c07      	ldr	r4, [pc, #28]	; (404414 <_fstat_r+0x24>)
  4043f6:	4605      	mov	r5, r0
  4043f8:	4611      	mov	r1, r2
  4043fa:	4618      	mov	r0, r3
  4043fc:	2300      	movs	r3, #0
  4043fe:	6023      	str	r3, [r4, #0]
  404400:	f7fc fcff 	bl	400e02 <_fstat>
  404404:	1c43      	adds	r3, r0, #1
  404406:	d000      	beq.n	40440a <_fstat_r+0x1a>
  404408:	bd38      	pop	{r3, r4, r5, pc}
  40440a:	6823      	ldr	r3, [r4, #0]
  40440c:	2b00      	cmp	r3, #0
  40440e:	d0fb      	beq.n	404408 <_fstat_r+0x18>
  404410:	602b      	str	r3, [r5, #0]
  404412:	bd38      	pop	{r3, r4, r5, pc}
  404414:	2000150c 	.word	0x2000150c

00404418 <_isatty_r>:
  404418:	b538      	push	{r3, r4, r5, lr}
  40441a:	4c07      	ldr	r4, [pc, #28]	; (404438 <_isatty_r+0x20>)
  40441c:	2300      	movs	r3, #0
  40441e:	4605      	mov	r5, r0
  404420:	4608      	mov	r0, r1
  404422:	6023      	str	r3, [r4, #0]
  404424:	f7fc fcf2 	bl	400e0c <_isatty>
  404428:	1c43      	adds	r3, r0, #1
  40442a:	d000      	beq.n	40442e <_isatty_r+0x16>
  40442c:	bd38      	pop	{r3, r4, r5, pc}
  40442e:	6823      	ldr	r3, [r4, #0]
  404430:	2b00      	cmp	r3, #0
  404432:	d0fb      	beq.n	40442c <_isatty_r+0x14>
  404434:	602b      	str	r3, [r5, #0]
  404436:	bd38      	pop	{r3, r4, r5, pc}
  404438:	2000150c 	.word	0x2000150c

0040443c <_lseek_r>:
  40443c:	b570      	push	{r4, r5, r6, lr}
  40443e:	460d      	mov	r5, r1
  404440:	4c08      	ldr	r4, [pc, #32]	; (404464 <_lseek_r+0x28>)
  404442:	4611      	mov	r1, r2
  404444:	4606      	mov	r6, r0
  404446:	461a      	mov	r2, r3
  404448:	4628      	mov	r0, r5
  40444a:	2300      	movs	r3, #0
  40444c:	6023      	str	r3, [r4, #0]
  40444e:	f7fc fcdf 	bl	400e10 <_lseek>
  404452:	1c43      	adds	r3, r0, #1
  404454:	d000      	beq.n	404458 <_lseek_r+0x1c>
  404456:	bd70      	pop	{r4, r5, r6, pc}
  404458:	6823      	ldr	r3, [r4, #0]
  40445a:	2b00      	cmp	r3, #0
  40445c:	d0fb      	beq.n	404456 <_lseek_r+0x1a>
  40445e:	6033      	str	r3, [r6, #0]
  404460:	bd70      	pop	{r4, r5, r6, pc}
  404462:	bf00      	nop
  404464:	2000150c 	.word	0x2000150c

00404468 <_read_r>:
  404468:	b570      	push	{r4, r5, r6, lr}
  40446a:	460d      	mov	r5, r1
  40446c:	4c08      	ldr	r4, [pc, #32]	; (404490 <_read_r+0x28>)
  40446e:	4611      	mov	r1, r2
  404470:	4606      	mov	r6, r0
  404472:	461a      	mov	r2, r3
  404474:	4628      	mov	r0, r5
  404476:	2300      	movs	r3, #0
  404478:	6023      	str	r3, [r4, #0]
  40447a:	f7fb fea7 	bl	4001cc <_read>
  40447e:	1c43      	adds	r3, r0, #1
  404480:	d000      	beq.n	404484 <_read_r+0x1c>
  404482:	bd70      	pop	{r4, r5, r6, pc}
  404484:	6823      	ldr	r3, [r4, #0]
  404486:	2b00      	cmp	r3, #0
  404488:	d0fb      	beq.n	404482 <_read_r+0x1a>
  40448a:	6033      	str	r3, [r6, #0]
  40448c:	bd70      	pop	{r4, r5, r6, pc}
  40448e:	bf00      	nop
  404490:	2000150c 	.word	0x2000150c

00404494 <__aeabi_uldivmod>:
  404494:	b953      	cbnz	r3, 4044ac <__aeabi_uldivmod+0x18>
  404496:	b94a      	cbnz	r2, 4044ac <__aeabi_uldivmod+0x18>
  404498:	2900      	cmp	r1, #0
  40449a:	bf08      	it	eq
  40449c:	2800      	cmpeq	r0, #0
  40449e:	bf1c      	itt	ne
  4044a0:	f04f 31ff 	movne.w	r1, #4294967295
  4044a4:	f04f 30ff 	movne.w	r0, #4294967295
  4044a8:	f000 b97a 	b.w	4047a0 <__aeabi_idiv0>
  4044ac:	f1ad 0c08 	sub.w	ip, sp, #8
  4044b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4044b4:	f000 f806 	bl	4044c4 <__udivmoddi4>
  4044b8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4044bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4044c0:	b004      	add	sp, #16
  4044c2:	4770      	bx	lr

004044c4 <__udivmoddi4>:
  4044c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4044c8:	468c      	mov	ip, r1
  4044ca:	460d      	mov	r5, r1
  4044cc:	4604      	mov	r4, r0
  4044ce:	9e08      	ldr	r6, [sp, #32]
  4044d0:	2b00      	cmp	r3, #0
  4044d2:	d151      	bne.n	404578 <__udivmoddi4+0xb4>
  4044d4:	428a      	cmp	r2, r1
  4044d6:	4617      	mov	r7, r2
  4044d8:	d96d      	bls.n	4045b6 <__udivmoddi4+0xf2>
  4044da:	fab2 fe82 	clz	lr, r2
  4044de:	f1be 0f00 	cmp.w	lr, #0
  4044e2:	d00b      	beq.n	4044fc <__udivmoddi4+0x38>
  4044e4:	f1ce 0c20 	rsb	ip, lr, #32
  4044e8:	fa01 f50e 	lsl.w	r5, r1, lr
  4044ec:	fa20 fc0c 	lsr.w	ip, r0, ip
  4044f0:	fa02 f70e 	lsl.w	r7, r2, lr
  4044f4:	ea4c 0c05 	orr.w	ip, ip, r5
  4044f8:	fa00 f40e 	lsl.w	r4, r0, lr
  4044fc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404500:	0c25      	lsrs	r5, r4, #16
  404502:	fbbc f8fa 	udiv	r8, ip, sl
  404506:	fa1f f987 	uxth.w	r9, r7
  40450a:	fb0a cc18 	mls	ip, sl, r8, ip
  40450e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404512:	fb08 f309 	mul.w	r3, r8, r9
  404516:	42ab      	cmp	r3, r5
  404518:	d90a      	bls.n	404530 <__udivmoddi4+0x6c>
  40451a:	19ed      	adds	r5, r5, r7
  40451c:	f108 32ff 	add.w	r2, r8, #4294967295
  404520:	f080 8123 	bcs.w	40476a <__udivmoddi4+0x2a6>
  404524:	42ab      	cmp	r3, r5
  404526:	f240 8120 	bls.w	40476a <__udivmoddi4+0x2a6>
  40452a:	f1a8 0802 	sub.w	r8, r8, #2
  40452e:	443d      	add	r5, r7
  404530:	1aed      	subs	r5, r5, r3
  404532:	b2a4      	uxth	r4, r4
  404534:	fbb5 f0fa 	udiv	r0, r5, sl
  404538:	fb0a 5510 	mls	r5, sl, r0, r5
  40453c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404540:	fb00 f909 	mul.w	r9, r0, r9
  404544:	45a1      	cmp	r9, r4
  404546:	d909      	bls.n	40455c <__udivmoddi4+0x98>
  404548:	19e4      	adds	r4, r4, r7
  40454a:	f100 33ff 	add.w	r3, r0, #4294967295
  40454e:	f080 810a 	bcs.w	404766 <__udivmoddi4+0x2a2>
  404552:	45a1      	cmp	r9, r4
  404554:	f240 8107 	bls.w	404766 <__udivmoddi4+0x2a2>
  404558:	3802      	subs	r0, #2
  40455a:	443c      	add	r4, r7
  40455c:	eba4 0409 	sub.w	r4, r4, r9
  404560:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404564:	2100      	movs	r1, #0
  404566:	2e00      	cmp	r6, #0
  404568:	d061      	beq.n	40462e <__udivmoddi4+0x16a>
  40456a:	fa24 f40e 	lsr.w	r4, r4, lr
  40456e:	2300      	movs	r3, #0
  404570:	6034      	str	r4, [r6, #0]
  404572:	6073      	str	r3, [r6, #4]
  404574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404578:	428b      	cmp	r3, r1
  40457a:	d907      	bls.n	40458c <__udivmoddi4+0xc8>
  40457c:	2e00      	cmp	r6, #0
  40457e:	d054      	beq.n	40462a <__udivmoddi4+0x166>
  404580:	2100      	movs	r1, #0
  404582:	e886 0021 	stmia.w	r6, {r0, r5}
  404586:	4608      	mov	r0, r1
  404588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40458c:	fab3 f183 	clz	r1, r3
  404590:	2900      	cmp	r1, #0
  404592:	f040 808e 	bne.w	4046b2 <__udivmoddi4+0x1ee>
  404596:	42ab      	cmp	r3, r5
  404598:	d302      	bcc.n	4045a0 <__udivmoddi4+0xdc>
  40459a:	4282      	cmp	r2, r0
  40459c:	f200 80fa 	bhi.w	404794 <__udivmoddi4+0x2d0>
  4045a0:	1a84      	subs	r4, r0, r2
  4045a2:	eb65 0503 	sbc.w	r5, r5, r3
  4045a6:	2001      	movs	r0, #1
  4045a8:	46ac      	mov	ip, r5
  4045aa:	2e00      	cmp	r6, #0
  4045ac:	d03f      	beq.n	40462e <__udivmoddi4+0x16a>
  4045ae:	e886 1010 	stmia.w	r6, {r4, ip}
  4045b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045b6:	b912      	cbnz	r2, 4045be <__udivmoddi4+0xfa>
  4045b8:	2701      	movs	r7, #1
  4045ba:	fbb7 f7f2 	udiv	r7, r7, r2
  4045be:	fab7 fe87 	clz	lr, r7
  4045c2:	f1be 0f00 	cmp.w	lr, #0
  4045c6:	d134      	bne.n	404632 <__udivmoddi4+0x16e>
  4045c8:	1beb      	subs	r3, r5, r7
  4045ca:	0c3a      	lsrs	r2, r7, #16
  4045cc:	fa1f fc87 	uxth.w	ip, r7
  4045d0:	2101      	movs	r1, #1
  4045d2:	fbb3 f8f2 	udiv	r8, r3, r2
  4045d6:	0c25      	lsrs	r5, r4, #16
  4045d8:	fb02 3318 	mls	r3, r2, r8, r3
  4045dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4045e0:	fb0c f308 	mul.w	r3, ip, r8
  4045e4:	42ab      	cmp	r3, r5
  4045e6:	d907      	bls.n	4045f8 <__udivmoddi4+0x134>
  4045e8:	19ed      	adds	r5, r5, r7
  4045ea:	f108 30ff 	add.w	r0, r8, #4294967295
  4045ee:	d202      	bcs.n	4045f6 <__udivmoddi4+0x132>
  4045f0:	42ab      	cmp	r3, r5
  4045f2:	f200 80d1 	bhi.w	404798 <__udivmoddi4+0x2d4>
  4045f6:	4680      	mov	r8, r0
  4045f8:	1aed      	subs	r5, r5, r3
  4045fa:	b2a3      	uxth	r3, r4
  4045fc:	fbb5 f0f2 	udiv	r0, r5, r2
  404600:	fb02 5510 	mls	r5, r2, r0, r5
  404604:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  404608:	fb0c fc00 	mul.w	ip, ip, r0
  40460c:	45a4      	cmp	ip, r4
  40460e:	d907      	bls.n	404620 <__udivmoddi4+0x15c>
  404610:	19e4      	adds	r4, r4, r7
  404612:	f100 33ff 	add.w	r3, r0, #4294967295
  404616:	d202      	bcs.n	40461e <__udivmoddi4+0x15a>
  404618:	45a4      	cmp	ip, r4
  40461a:	f200 80b8 	bhi.w	40478e <__udivmoddi4+0x2ca>
  40461e:	4618      	mov	r0, r3
  404620:	eba4 040c 	sub.w	r4, r4, ip
  404624:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404628:	e79d      	b.n	404566 <__udivmoddi4+0xa2>
  40462a:	4631      	mov	r1, r6
  40462c:	4630      	mov	r0, r6
  40462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404632:	f1ce 0420 	rsb	r4, lr, #32
  404636:	fa05 f30e 	lsl.w	r3, r5, lr
  40463a:	fa07 f70e 	lsl.w	r7, r7, lr
  40463e:	fa20 f804 	lsr.w	r8, r0, r4
  404642:	0c3a      	lsrs	r2, r7, #16
  404644:	fa25 f404 	lsr.w	r4, r5, r4
  404648:	ea48 0803 	orr.w	r8, r8, r3
  40464c:	fbb4 f1f2 	udiv	r1, r4, r2
  404650:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404654:	fb02 4411 	mls	r4, r2, r1, r4
  404658:	fa1f fc87 	uxth.w	ip, r7
  40465c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404660:	fb01 f30c 	mul.w	r3, r1, ip
  404664:	42ab      	cmp	r3, r5
  404666:	fa00 f40e 	lsl.w	r4, r0, lr
  40466a:	d909      	bls.n	404680 <__udivmoddi4+0x1bc>
  40466c:	19ed      	adds	r5, r5, r7
  40466e:	f101 30ff 	add.w	r0, r1, #4294967295
  404672:	f080 808a 	bcs.w	40478a <__udivmoddi4+0x2c6>
  404676:	42ab      	cmp	r3, r5
  404678:	f240 8087 	bls.w	40478a <__udivmoddi4+0x2c6>
  40467c:	3902      	subs	r1, #2
  40467e:	443d      	add	r5, r7
  404680:	1aeb      	subs	r3, r5, r3
  404682:	fa1f f588 	uxth.w	r5, r8
  404686:	fbb3 f0f2 	udiv	r0, r3, r2
  40468a:	fb02 3310 	mls	r3, r2, r0, r3
  40468e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404692:	fb00 f30c 	mul.w	r3, r0, ip
  404696:	42ab      	cmp	r3, r5
  404698:	d907      	bls.n	4046aa <__udivmoddi4+0x1e6>
  40469a:	19ed      	adds	r5, r5, r7
  40469c:	f100 38ff 	add.w	r8, r0, #4294967295
  4046a0:	d26f      	bcs.n	404782 <__udivmoddi4+0x2be>
  4046a2:	42ab      	cmp	r3, r5
  4046a4:	d96d      	bls.n	404782 <__udivmoddi4+0x2be>
  4046a6:	3802      	subs	r0, #2
  4046a8:	443d      	add	r5, r7
  4046aa:	1aeb      	subs	r3, r5, r3
  4046ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4046b0:	e78f      	b.n	4045d2 <__udivmoddi4+0x10e>
  4046b2:	f1c1 0720 	rsb	r7, r1, #32
  4046b6:	fa22 f807 	lsr.w	r8, r2, r7
  4046ba:	408b      	lsls	r3, r1
  4046bc:	fa05 f401 	lsl.w	r4, r5, r1
  4046c0:	ea48 0303 	orr.w	r3, r8, r3
  4046c4:	fa20 fe07 	lsr.w	lr, r0, r7
  4046c8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4046cc:	40fd      	lsrs	r5, r7
  4046ce:	ea4e 0e04 	orr.w	lr, lr, r4
  4046d2:	fbb5 f9fc 	udiv	r9, r5, ip
  4046d6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4046da:	fb0c 5519 	mls	r5, ip, r9, r5
  4046de:	fa1f f883 	uxth.w	r8, r3
  4046e2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4046e6:	fb09 f408 	mul.w	r4, r9, r8
  4046ea:	42ac      	cmp	r4, r5
  4046ec:	fa02 f201 	lsl.w	r2, r2, r1
  4046f0:	fa00 fa01 	lsl.w	sl, r0, r1
  4046f4:	d908      	bls.n	404708 <__udivmoddi4+0x244>
  4046f6:	18ed      	adds	r5, r5, r3
  4046f8:	f109 30ff 	add.w	r0, r9, #4294967295
  4046fc:	d243      	bcs.n	404786 <__udivmoddi4+0x2c2>
  4046fe:	42ac      	cmp	r4, r5
  404700:	d941      	bls.n	404786 <__udivmoddi4+0x2c2>
  404702:	f1a9 0902 	sub.w	r9, r9, #2
  404706:	441d      	add	r5, r3
  404708:	1b2d      	subs	r5, r5, r4
  40470a:	fa1f fe8e 	uxth.w	lr, lr
  40470e:	fbb5 f0fc 	udiv	r0, r5, ip
  404712:	fb0c 5510 	mls	r5, ip, r0, r5
  404716:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40471a:	fb00 f808 	mul.w	r8, r0, r8
  40471e:	45a0      	cmp	r8, r4
  404720:	d907      	bls.n	404732 <__udivmoddi4+0x26e>
  404722:	18e4      	adds	r4, r4, r3
  404724:	f100 35ff 	add.w	r5, r0, #4294967295
  404728:	d229      	bcs.n	40477e <__udivmoddi4+0x2ba>
  40472a:	45a0      	cmp	r8, r4
  40472c:	d927      	bls.n	40477e <__udivmoddi4+0x2ba>
  40472e:	3802      	subs	r0, #2
  404730:	441c      	add	r4, r3
  404732:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  404736:	eba4 0408 	sub.w	r4, r4, r8
  40473a:	fba0 8902 	umull	r8, r9, r0, r2
  40473e:	454c      	cmp	r4, r9
  404740:	46c6      	mov	lr, r8
  404742:	464d      	mov	r5, r9
  404744:	d315      	bcc.n	404772 <__udivmoddi4+0x2ae>
  404746:	d012      	beq.n	40476e <__udivmoddi4+0x2aa>
  404748:	b156      	cbz	r6, 404760 <__udivmoddi4+0x29c>
  40474a:	ebba 030e 	subs.w	r3, sl, lr
  40474e:	eb64 0405 	sbc.w	r4, r4, r5
  404752:	fa04 f707 	lsl.w	r7, r4, r7
  404756:	40cb      	lsrs	r3, r1
  404758:	431f      	orrs	r7, r3
  40475a:	40cc      	lsrs	r4, r1
  40475c:	6037      	str	r7, [r6, #0]
  40475e:	6074      	str	r4, [r6, #4]
  404760:	2100      	movs	r1, #0
  404762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404766:	4618      	mov	r0, r3
  404768:	e6f8      	b.n	40455c <__udivmoddi4+0x98>
  40476a:	4690      	mov	r8, r2
  40476c:	e6e0      	b.n	404530 <__udivmoddi4+0x6c>
  40476e:	45c2      	cmp	sl, r8
  404770:	d2ea      	bcs.n	404748 <__udivmoddi4+0x284>
  404772:	ebb8 0e02 	subs.w	lr, r8, r2
  404776:	eb69 0503 	sbc.w	r5, r9, r3
  40477a:	3801      	subs	r0, #1
  40477c:	e7e4      	b.n	404748 <__udivmoddi4+0x284>
  40477e:	4628      	mov	r0, r5
  404780:	e7d7      	b.n	404732 <__udivmoddi4+0x26e>
  404782:	4640      	mov	r0, r8
  404784:	e791      	b.n	4046aa <__udivmoddi4+0x1e6>
  404786:	4681      	mov	r9, r0
  404788:	e7be      	b.n	404708 <__udivmoddi4+0x244>
  40478a:	4601      	mov	r1, r0
  40478c:	e778      	b.n	404680 <__udivmoddi4+0x1bc>
  40478e:	3802      	subs	r0, #2
  404790:	443c      	add	r4, r7
  404792:	e745      	b.n	404620 <__udivmoddi4+0x15c>
  404794:	4608      	mov	r0, r1
  404796:	e708      	b.n	4045aa <__udivmoddi4+0xe6>
  404798:	f1a8 0802 	sub.w	r8, r8, #2
  40479c:	443d      	add	r5, r7
  40479e:	e72b      	b.n	4045f8 <__udivmoddi4+0x134>

004047a0 <__aeabi_idiv0>:
  4047a0:	4770      	bx	lr
  4047a2:	bf00      	nop
  4047a4:	63256325 	.word	0x63256325
  4047a8:	00000000 	.word	0x00000000
  4047ac:	6d206f6e 	.word	0x6d206f6e
  4047b0:	2065726f 	.word	0x2065726f
  4047b4:	61746164 	.word	0x61746164
  4047b8:	207c7c20 	.word	0x207c7c20
  4047bc:	6d206f6e 	.word	0x6d206f6e
  4047c0:	2065726f 	.word	0x2065726f
  4047c4:	61746164 	.word	0x61746164
  4047c8:	207c7c20 	.word	0x207c7c20
  4047cc:	6d206f6e 	.word	0x6d206f6e
  4047d0:	2065726f 	.word	0x2065726f
  4047d4:	61746164 	.word	0x61746164
  4047d8:	00000000 	.word	0x00000000

004047dc <_global_impure_ptr>:
  4047dc:	20000020 33323130 37363534 42413938      .. 0123456789AB
  4047ec:	46454443 00000000 33323130 37363534     CDEF....01234567
  4047fc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40480c:	0000296c                                l)..

00404810 <blanks.7202>:
  404810:	20202020 20202020 20202020 20202020                     

00404820 <zeroes.7203>:
  404820:	30303030 30303030 30303030 30303030     0000000000000000
  404830:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404840 <_ctype_>:
  404840:	20202000 20202020 28282020 20282828     .         ((((( 
  404850:	20202020 20202020 20202020 20202020                     
  404860:	10108820 10101010 10101010 10101010      ...............
  404870:	04040410 04040404 10040404 10101010     ................
  404880:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404890:	01010101 01010101 01010101 10101010     ................
  4048a0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4048b0:	02020202 02020202 02020202 10101010     ................
  4048c0:	00000020 00000000 00000000 00000000      ...............
	...

00404944 <_init>:
  404944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404946:	bf00      	nop
  404948:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40494a:	bc08      	pop	{r3}
  40494c:	469e      	mov	lr, r3
  40494e:	4770      	bx	lr

00404950 <__init_array_start>:
  404950:	004029f9 	.word	0x004029f9

00404954 <__frame_dummy_init_array_entry>:
  404954:	0040011d                                ..@.

00404958 <_fini>:
  404958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40495a:	bf00      	nop
  40495c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40495e:	bc08      	pop	{r3}
  404960:	469e      	mov	lr, r3
  404962:	4770      	bx	lr

00404964 <__fini_array_start>:
  404964:	004000f9 	.word	0x004000f9
